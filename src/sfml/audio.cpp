/* Generated by Cython 0.19 on Tue Apr 30 08:33:18 2013 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (Py_TYPE(obj) == &PyBaseString_Type)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__sfml__audio
#define __PYX_HAVE_API__sfml__audio
#include "string.h"
#include "stdlib.h"
#include <string>
#include "SFML/System.hpp"
#include "SFML/Window.hpp"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "SFML/Graphics.hpp"
#include "SFML/Audio.hpp"
#include "SFML/Network.hpp"
#include "pysfml/system_api.h"
#include "DerivableSoundStream.hpp"
#include "DerivableSoundRecorder.hpp"
#include "pysfml/system.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "audio.pyx",
  "system.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_4sfml_5audio_SoundSource;
struct __pyx_obj_4sfml_5audio_SoundRecorder;
struct __pyx_obj_4sfml_5audio_Sound;
struct __pyx_obj_4sfml_5audio_SoundBufferRecorder;
struct __pyx_obj_4sfml_5audio_Listener;
struct __pyx_obj_4sfml_5audio_SoundBuffer;
struct __pyx_obj_4sfml_5audio_SoundStream;
struct __pyx_obj_4sfml_5audio_Music;
struct __pyx_obj_4sfml_5audio_Chunk;
struct __pyx_opt_args_4sfml_5audio_wrap_soundbuffer;

/* "sfml/audio.pyx":215
 * 			return wrap_time(p)
 * 
 * cdef SoundBuffer wrap_soundbuffer(sf.SoundBuffer *p, bint delete_this=True):             # <<<<<<<<<<<<<<
 * 	cdef SoundBuffer r = SoundBuffer.__new__(SoundBuffer)
 * 	r.p_this = p
 */
struct __pyx_opt_args_4sfml_5audio_wrap_soundbuffer {
  int __pyx_n;
  int delete_this;
};

/* "sfml/audio.pyx":222
 * 
 * 
 * cdef class SoundSource:             # <<<<<<<<<<<<<<
 * 	STOPPED = sf.soundsource.Stopped
 * 	PAUSED = sf.soundsource.Paused
 */
struct __pyx_obj_4sfml_5audio_SoundSource {
  PyObject_HEAD
  sf::SoundSource *p_soundsource;
};


/* "sfml/audio.pyx":432
 * 
 * 
 * cdef class SoundRecorder:             # <<<<<<<<<<<<<<
 * 	cdef sf.SoundRecorder *p_soundrecorder
 * 
 */
struct __pyx_obj_4sfml_5audio_SoundRecorder {
  PyObject_HEAD
  sf::SoundRecorder *p_soundrecorder;
};


/* "sfml/audio.pyx":277
 * 
 * 
 * cdef class Sound(SoundSource):             # <<<<<<<<<<<<<<
 * 	cdef sf.Sound *p_this
 * 	cdef SoundBuffer   m_buffer
 */
struct __pyx_obj_4sfml_5audio_Sound {
  struct __pyx_obj_4sfml_5audio_SoundSource __pyx_base;
  sf::Sound *p_this;
  struct __pyx_obj_4sfml_5audio_SoundBuffer *m_buffer;
};


/* "sfml/audio.pyx":469
 * 		pass
 * 
 * cdef class SoundBufferRecorder(SoundRecorder):             # <<<<<<<<<<<<<<
 * 	cdef sf.SoundBufferRecorder *p_this
 * 	cdef SoundBuffer                 m_buffer
 */
struct __pyx_obj_4sfml_5audio_SoundBufferRecorder {
  struct __pyx_obj_4sfml_5audio_SoundRecorder __pyx_base;
  sf::SoundBufferRecorder *p_this;
  struct __pyx_obj_4sfml_5audio_SoundBuffer *m_buffer;
};


/* "sfml/audio.pyx":47
 * 
 * 
 * cdef class Listener:             # <<<<<<<<<<<<<<
 * 	def __init__(self):
 * 		NotImplementedError("This class is not meant to be instanciated!")
 */
struct __pyx_obj_4sfml_5audio_Listener {
  PyObject_HEAD
};


/* "sfml/audio.pyx":141
 * 	return r
 * 
 * cdef class SoundBuffer:             # <<<<<<<<<<<<<<
 * 	cdef sf.SoundBuffer *p_this
 * 	cdef bint                delete_this
 */
struct __pyx_obj_4sfml_5audio_SoundBuffer {
  PyObject_HEAD
  sf::SoundBuffer *p_this;
  int delete_this;
};


/* "sfml/audio.pyx":331
 * 
 * 
 * cdef class SoundStream(SoundSource):             # <<<<<<<<<<<<<<
 * 	cdef sf.SoundStream *p_soundstream
 * 
 */
struct __pyx_obj_4sfml_5audio_SoundStream {
  struct __pyx_obj_4sfml_5audio_SoundSource __pyx_base;
  sf::SoundStream *p_soundstream;
};


/* "sfml/audio.pyx":386
 * 	def on_seek(self, time_offset): pass
 * 
 * cdef class Music(SoundStream):             # <<<<<<<<<<<<<<
 * 	cdef sf.Music *p_this
 * 
 */
struct __pyx_obj_4sfml_5audio_Music {
  struct __pyx_obj_4sfml_5audio_SoundStream __pyx_base;
  sf::Music *p_this;
};


/* "sfml/audio.pyx":79
 * 		sf.listener.setDirection(x, y, z)
 * 
 * cdef class Chunk:             # <<<<<<<<<<<<<<
 * 	cdef Int16* m_samples
 * 	cdef size_t m_sampleCount
 */
struct __pyx_obj_4sfml_5audio_Chunk {
  PyObject_HEAD
  sf::Int16 *m_samples;
  size_t m_sampleCount;
  int delete_this;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t, Py_ssize_t); /* proto */

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t); /* proto */

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name); /*proto*/

static CYTHON_INLINE sf::Int16 __Pyx_PyInt_from_py_sf__Int16(PyObject *);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Int16(sf::Int16);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp.time' */

/* Module declarations from 'libcpp.style' */

/* Module declarations from 'libcpp.event' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.videomode' */

/* Module declarations from 'libcpp.keyboard' */

/* Module declarations from 'libcpp.joystick' */

/* Module declarations from 'libcpp.mouse' */

/* Module declarations from 'libcpp.blendmode' */

/* Module declarations from 'libcpp.primitivetype' */

/* Module declarations from 'libcpp.texture' */

/* Module declarations from 'libcpp.shader' */

/* Module declarations from 'libcpp.text' */

/* Module declarations from 'libcpp.renderstates' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.listener' */

/* Module declarations from 'libcpp.soundsource' */

/* Module declarations from 'libcpp.soundrecorder' */

/* Module declarations from 'libcpp.ipaddress' */

/* Module declarations from 'libcpp.socket' */

/* Module declarations from 'libcpp.udpsocket' */

/* Module declarations from 'libcpp.ftp.response' */

/* Module declarations from 'libcpp.ftp' */

/* Module declarations from 'libcpp.http.request' */

/* Module declarations from 'libcpp.http.response' */

/* Module declarations from 'libcpp.http' */

/* Module declarations from 'libcpp.sfml' */

/* Module declarations from 'sfml.system' */

/* Module declarations from 'pysfml.system' */
static PyTypeObject *__pyx_ptype_6pysfml_6system_Time = 0;
static PyTypeObject *__pyx_ptype_6pysfml_6system_Vector2 = 0;
static PyTypeObject *__pyx_ptype_6pysfml_6system_Vector3 = 0;
static CYTHON_INLINE struct PyVector3Object *__pyx_f_6pysfml_6system_to_vector3(sf::Vector3f *); /*proto*/

/* Module declarations from 'sfml.audio' */
static PyTypeObject *__pyx_ptype_4sfml_5audio_Listener = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_Chunk = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_SoundBuffer = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_SoundSource = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_Sound = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_SoundStream = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_Music = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_SoundRecorder = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_SoundBufferRecorder = 0;
static struct PyTimeObject *__pyx_f_4sfml_5audio_wrap_time(sf::Time *); /*proto*/
static PyObject *__pyx_f_4sfml_5audio_create_chunk(void); /*proto*/
static sf::Int16 *__pyx_f_4sfml_5audio_terminate_chunk(PyObject *); /*proto*/
static PyObject *__pyx_f_4sfml_5audio_wrap_chunk(sf::Int16 *, unsigned int, int); /*proto*/
static struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_f_4sfml_5audio_wrap_soundbuffer(sf::SoundBuffer *, struct __pyx_opt_args_4sfml_5audio_wrap_soundbuffer *__pyx_optional_args); /*proto*/
static struct __pyx_obj_4sfml_5audio_Music *__pyx_f_4sfml_5audio_wrap_music(sf::Music *); /*proto*/
#define __Pyx_MODULE_NAME "sfml.audio"
int __pyx_module_is_main_sfml__audio = 0;

/* Implementation of 'sfml.audio' */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_UserWarning;
static PyObject *__pyx_builtin_IOError;
static int __pyx_pf_4sfml_5audio_8Listener___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Listener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_8Listener_2get_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_8Listener_4set_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls, float __pyx_v_volume); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_8Listener_6get_position(CYTHON_UNUSED PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_8Listener_8set_position(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_8Listener_10get_direction(CYTHON_UNUSED PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_8Listener_12set_direction(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_direction); /* proto */
static int __pyx_pf_4sfml_5audio_5Chunk___cinit__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self); /* proto */
static void __pyx_pf_4sfml_5audio_5Chunk_2__dealloc__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_4sfml_5audio_5Chunk_4__len__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Chunk_6__getitem__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self, size_t __pyx_v_key); /* proto */
static int __pyx_pf_4sfml_5audio_5Chunk_8__setitem__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self, size_t __pyx_v_key, sf::Int16 __pyx_v_other); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Chunk_4data___get__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5Chunk_4data_2__set__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self, PyObject *__pyx_v_bdata); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static void __pyx_pf_4sfml_5audio_11SoundBuffer_2__dealloc__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_4__repr__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_6__str__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_8from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_10from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_12from_samples(CYTHON_UNUSED PyObject *__pyx_v_cls, struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_samples, unsigned int __pyx_v_channel_count, unsigned int __pyx_v_sample_rate); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_14to_file(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_7samples___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_13channel_count___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_8duration___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundSource___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_5pitch___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundSource_5pitch_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_pitch); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_6volume___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundSource_6volume_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_volume); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_8position___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundSource_8position_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_20relative_to_listener___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundSource_20relative_to_listener_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, int __pyx_v_relative); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_12min_distance___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundSource_12min_distance_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_distance); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_11attenuation___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundSource_11attenuation_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_attenuation); /* proto */
static int __pyx_pf_4sfml_5audio_5Sound___init__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_buffer); /* proto */
static void __pyx_pf_4sfml_5audio_5Sound_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_4__repr__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_6play(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_8pause(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_10stop(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_6buffer___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5Sound_6buffer_2__set__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_buffer); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_4loop___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5Sound_4loop_2__set__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, int __pyx_v_loop); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5Sound_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, struct PyTimeObject *__pyx_v_time_offset); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Sound_6status___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundStream___init__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_2play(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_4pause(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_6stop(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_13channel_count___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_6status___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundStream_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, struct PyTimeObject *__pyx_v_time_offset); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_4loop___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_11SoundStream_4loop_2__set__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, int __pyx_v_loop); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_8initialize(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, unsigned int __pyx_v_channel_count, unsigned int __pyx_v_sample_rate); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_10on_get_data(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_12on_seek(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_time_offset); /* proto */
static int __pyx_pf_4sfml_5audio_5Music___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Music *__pyx_v_self); /* proto */
static void __pyx_pf_4sfml_5audio_5Music_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Music *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Music_4from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Music_6from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5Music_8duration___get__(struct __pyx_obj_4sfml_5audio_Music *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_13SoundRecorder___init__(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self); /* proto */
static void __pyx_pf_4sfml_5audio_13SoundRecorder_2__dealloc__(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_4start(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self, unsigned int __pyx_v_sample_rate); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_6stop(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_8is_available(CYTHON_UNUSED PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_10on_start(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_12on_process_samples(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_chunk); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_14on_stop(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_19SoundBufferRecorder___init__(struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *__pyx_v_self); /* proto */
static void __pyx_pf_4sfml_5audio_19SoundBufferRecorder_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_19SoundBufferRecorder_6buffer___get__(struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_4sfml_5audio_Listener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_Chunk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_SoundBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_SoundSource(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_Sound(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_SoundStream(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_Music(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_SoundRecorder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sfml_5audio_SoundBufferRecorder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_1[] = "This class is not meant to be instanciated!";
static char __pyx_k_3[] = "Chunk data lenght must be even as it represents a 16bit array";
static char __pyx_k_5[] = "Use specific methods";
static char __pyx_k_7[] = "UTF-8";
static char __pyx_k_10[] = "This class is not meant to be used directly";
static char __pyx_k_12[] = "sf.Sound()";
static char __pyx_k_13[] = "SoundStream is abstract";
static char __pyx_k_15[] = "Use specific constructor";
static char __pyx_k_18[] = "SoundRecorder is abstract";
static char __pyx_k__PAUSED[] = "PAUSED";
static char __pyx_k__buffer[] = "buffer";
static char __pyx_k__encode[] = "encode";
static char __pyx_k__IOError[] = "IOError";
static char __pyx_k__PLAYING[] = "PLAYING";
static char __pyx_k__STOPPED[] = "STOPPED";
static char __pyx_k__samples[] = "samples";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k____class__[] = "__class__";
static char __pyx_k__from_file[] = "from_file";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__UserWarning[] = "UserWarning";
static char __pyx_k__from_memory[] = "from_memory";
static char __pyx_k__sample_rate[] = "sample_rate";
static char __pyx_k__from_samples[] = "from_samples";
static char __pyx_k__get_position[] = "get_position";
static char __pyx_k__is_available[] = "is_available";
static char __pyx_k__set_position[] = "set_position";
static char __pyx_k__channel_count[] = "channel_count";
static char __pyx_k__get_direction[] = "get_direction";
static char __pyx_k__set_direction[] = "set_direction";
static char __pyx_k__get_global_volume[] = "get_global_volume";
static char __pyx_k__set_global_volume[] = "set_global_volume";
static char __pyx_k__NotImplementedError[] = "NotImplementedError";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_n_s__IOError;
static PyObject *__pyx_n_s__NotImplementedError;
static PyObject *__pyx_n_s__PAUSED;
static PyObject *__pyx_n_s__PLAYING;
static PyObject *__pyx_n_s__STOPPED;
static PyObject *__pyx_n_s__UserWarning;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____class__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__buffer;
static PyObject *__pyx_n_s__channel_count;
static PyObject *__pyx_n_s__encode;
static PyObject *__pyx_n_s__from_file;
static PyObject *__pyx_n_s__from_memory;
static PyObject *__pyx_n_s__from_samples;
static PyObject *__pyx_n_s__get_direction;
static PyObject *__pyx_n_s__get_global_volume;
static PyObject *__pyx_n_s__get_position;
static PyObject *__pyx_n_s__is_available;
static PyObject *__pyx_n_s__sample_rate;
static PyObject *__pyx_n_s__samples;
static PyObject *__pyx_n_s__set_direction;
static PyObject *__pyx_n_s__set_global_volume;
static PyObject *__pyx_n_s__set_position;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_19;

/* "sfml/audio.pyx":41
 * from pysfml.system cimport to_vector3
 * 
 * cdef Time wrap_time(sf.Time* p):             # <<<<<<<<<<<<<<
 * 	cdef Time r = Time.__new__(Time)
 * 	r.p_this = p
 */

static struct PyTimeObject *__pyx_f_4sfml_5audio_wrap_time(sf::Time *__pyx_v_p) {
  struct PyTimeObject *__pyx_v_r = 0;
  struct PyTimeObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_time", 0);

  /* "sfml/audio.pyx":42
 * 
 * cdef Time wrap_time(sf.Time* p):
 * 	cdef Time r = Time.__new__(Time)             # <<<<<<<<<<<<<<
 * 	r.p_this = p
 * 	return r
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)((PyObject*)__pyx_ptype_6pysfml_6system_Time)), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pysfml_6system_Time)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = ((struct PyTimeObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio.pyx":43
 * cdef Time wrap_time(sf.Time* p):
 * 	cdef Time r = Time.__new__(Time)
 * 	r.p_this = p             # <<<<<<<<<<<<<<
 * 	return r
 * 
 */
  __pyx_v_r->p_this = __pyx_v_p;

  /* "sfml/audio.pyx":44
 * 	cdef Time r = Time.__new__(Time)
 * 	r.p_this = p
 * 	return r             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = ((struct PyTimeObject *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.wrap_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_8Listener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_8Listener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_8Listener___init__(((struct __pyx_obj_4sfml_5audio_Listener *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":48
 * 
 * cdef class Listener:
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		NotImplementedError("This class is not meant to be instanciated!")
 * 
 */

static int __pyx_pf_4sfml_5audio_8Listener___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Listener *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":49
 * cdef class Listener:
 * 	def __init__(self):
 * 		NotImplementedError("This class is not meant to be instanciated!")             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Listener.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_8Listener_3get_global_volume(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_8Listener_3get_global_volume(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_volume (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_8Listener_2get_global_volume(((PyObject*)__pyx_v_cls));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":52
 * 
 * 	@classmethod
 * 	def get_global_volume(cls):             # <<<<<<<<<<<<<<
 * 		return sf.listener.getGlobalVolume()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_8Listener_2get_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_global_volume", 0);

  /* "sfml/audio.pyx":53
 * 	@classmethod
 * 	def get_global_volume(cls):
 * 		return sf.listener.getGlobalVolume()             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(sf::Listener::getGlobalVolume()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Listener.get_global_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_8Listener_5set_global_volume(PyObject *__pyx_v_cls, PyObject *__pyx_arg_volume); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_8Listener_5set_global_volume(PyObject *__pyx_v_cls, PyObject *__pyx_arg_volume) {
  float __pyx_v_volume;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_global_volume (wrapper)", 0);
  assert(__pyx_arg_volume); {
    __pyx_v_volume = __pyx_PyFloat_AsFloat(__pyx_arg_volume); if (unlikely((__pyx_v_volume == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.Listener.set_global_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_8Listener_4set_global_volume(((PyObject*)__pyx_v_cls), ((float)__pyx_v_volume));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":56
 * 
 * 	@classmethod
 * 	def set_global_volume(cls, float volume):             # <<<<<<<<<<<<<<
 * 		sf.listener.setGlobalVolume(volume)
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_8Listener_4set_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls, float __pyx_v_volume) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_global_volume", 0);

  /* "sfml/audio.pyx":57
 * 	@classmethod
 * 	def set_global_volume(cls, float volume):
 * 		sf.listener.setGlobalVolume(volume)             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  sf::Listener::setGlobalVolume(__pyx_v_volume);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_8Listener_7get_position(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_8Listener_7get_position(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_position (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_8Listener_6get_position(((PyObject*)__pyx_v_cls));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":60
 * 
 * 	@classmethod
 * 	def get_position(cls):             # <<<<<<<<<<<<<<
 * 		cdef Vector3f v = sf.listener.getPosition()
 * 		return to_vector3(&v)
 */

static PyObject *__pyx_pf_4sfml_5audio_8Listener_6get_position(CYTHON_UNUSED PyObject *__pyx_v_cls) {
  sf::Vector3f __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_position", 0);

  /* "sfml/audio.pyx":61
 * 	@classmethod
 * 	def get_position(cls):
 * 		cdef Vector3f v = sf.listener.getPosition()             # <<<<<<<<<<<<<<
 * 		return to_vector3(&v)
 * 
 */
  __pyx_v_v = sf::Listener::getPosition();

  /* "sfml/audio.pyx":62
 * 	def get_position(cls):
 * 		cdef Vector3f v = sf.listener.getPosition()
 * 		return to_vector3(&v)             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pysfml_6system_to_vector3((&__pyx_v_v))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Listener.get_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_8Listener_9set_position(PyObject *__pyx_v_cls, PyObject *__pyx_v_position); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_8Listener_9set_position(PyObject *__pyx_v_cls, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_position (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_8Listener_8set_position(((PyObject*)__pyx_v_cls), ((PyObject *)__pyx_v_position));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":65
 * 
 * 	@classmethod
 * 	def set_position(cls, position):             # <<<<<<<<<<<<<<
 * 		x, y, z = position
 * 		sf.listener.setPosition(x, y, z)
 */

static PyObject *__pyx_pf_4sfml_5audio_8Listener_8set_position(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_position) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_position", 0);

  /* "sfml/audio.pyx":66
 * 	@classmethod
 * 	def set_position(cls, position):
 * 		x, y, z = position             # <<<<<<<<<<<<<<
 * 		sf.listener.setPosition(x, y, z)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_position))) || (PyList_CheckExact(__pyx_v_position))) {
    PyObject* sequence = __pyx_v_position;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_position); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_z = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "sfml/audio.pyx":67
 * 	def set_position(cls, position):
 * 		x, y, z = position
 * 		sf.listener.setPosition(x, y, z)             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_y); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_z); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  sf::Listener::setPosition(__pyx_t_6, __pyx_t_7, __pyx_t_8);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.audio.Listener.set_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_8Listener_11get_direction(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_8Listener_11get_direction(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_direction (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_8Listener_10get_direction(((PyObject*)__pyx_v_cls));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":70
 * 
 * 	@classmethod
 * 	def get_direction(cls):             # <<<<<<<<<<<<<<
 * 		cdef Vector3f v = sf.listener.getDirection()
 * 		return to_vector3(&v)
 */

static PyObject *__pyx_pf_4sfml_5audio_8Listener_10get_direction(CYTHON_UNUSED PyObject *__pyx_v_cls) {
  sf::Vector3f __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_direction", 0);

  /* "sfml/audio.pyx":71
 * 	@classmethod
 * 	def get_direction(cls):
 * 		cdef Vector3f v = sf.listener.getDirection()             # <<<<<<<<<<<<<<
 * 		return to_vector3(&v)
 * 
 */
  __pyx_v_v = sf::Listener::getDirection();

  /* "sfml/audio.pyx":72
 * 	def get_direction(cls):
 * 		cdef Vector3f v = sf.listener.getDirection()
 * 		return to_vector3(&v)             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pysfml_6system_to_vector3((&__pyx_v_v))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Listener.get_direction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_8Listener_13set_direction(PyObject *__pyx_v_cls, PyObject *__pyx_v_direction); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_8Listener_13set_direction(PyObject *__pyx_v_cls, PyObject *__pyx_v_direction) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_direction (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_8Listener_12set_direction(((PyObject*)__pyx_v_cls), ((PyObject *)__pyx_v_direction));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":75
 * 
 * 	@classmethod
 * 	def set_direction(cls, direction):             # <<<<<<<<<<<<<<
 * 		x, y, z = direction
 * 		sf.listener.setDirection(x, y, z)
 */

static PyObject *__pyx_pf_4sfml_5audio_8Listener_12set_direction(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_direction) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_direction", 0);

  /* "sfml/audio.pyx":76
 * 	@classmethod
 * 	def set_direction(cls, direction):
 * 		x, y, z = direction             # <<<<<<<<<<<<<<
 * 		sf.listener.setDirection(x, y, z)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_direction))) || (PyList_CheckExact(__pyx_v_direction))) {
    PyObject* sequence = __pyx_v_direction;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_direction); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_z = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "sfml/audio.pyx":77
 * 	def set_direction(cls, direction):
 * 		x, y, z = direction
 * 		sf.listener.setDirection(x, y, z)             # <<<<<<<<<<<<<<
 * 
 * cdef class Chunk:
 */
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_y); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_z); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  sf::Listener::setDirection(__pyx_t_6, __pyx_t_7, __pyx_t_8);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.audio.Listener.set_direction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Chunk_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5Chunk_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_5Chunk___cinit__(((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":84
 * 	cdef bint   delete_this
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.m_samples = NULL
 * 		self.m_sampleCount = 0
 */

static int __pyx_pf_4sfml_5audio_5Chunk___cinit__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sfml/audio.pyx":85
 * 
 * 	def __cinit__(self):
 * 		self.m_samples = NULL             # <<<<<<<<<<<<<<
 * 		self.m_sampleCount = 0
 * 		self.delete_this = False
 */
  __pyx_v_self->m_samples = NULL;

  /* "sfml/audio.pyx":86
 * 	def __cinit__(self):
 * 		self.m_samples = NULL
 * 		self.m_sampleCount = 0             # <<<<<<<<<<<<<<
 * 		self.delete_this = False
 * 
 */
  __pyx_v_self->m_sampleCount = 0;

  /* "sfml/audio.pyx":87
 * 		self.m_samples = NULL
 * 		self.m_sampleCount = 0
 * 		self.delete_this = False             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_v_self->delete_this = 0;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_5Chunk_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_5Chunk_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_5Chunk_2__dealloc__(((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio.pyx":89
 * 		self.delete_this = False
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self.delete_this:
 * 			free(self.m_samples)
 */

static void __pyx_pf_4sfml_5audio_5Chunk_2__dealloc__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio.pyx":90
 * 
 * 	def __dealloc__(self):
 * 		if self.delete_this:             # <<<<<<<<<<<<<<
 * 			free(self.m_samples)
 * 
 */
  if (__pyx_v_self->delete_this) {

    /* "sfml/audio.pyx":91
 * 	def __dealloc__(self):
 * 		if self.delete_this:
 * 			free(self.m_samples)             # <<<<<<<<<<<<<<
 * 
 * 	def __len__(self):
 */
    free(__pyx_v_self->m_samples);
    goto __pyx_L3;
  }
  __pyx_L3:;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static Py_ssize_t __pyx_pw_4sfml_5audio_5Chunk_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_4sfml_5audio_5Chunk_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Chunk_4__len__(((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":93
 * 			free(self.m_samples)
 * 
 * 	def __len__(self):             # <<<<<<<<<<<<<<
 * 		return self.m_sampleCount
 * 
 */

static Py_ssize_t __pyx_pf_4sfml_5audio_5Chunk_4__len__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "sfml/audio.pyx":94
 * 
 * 	def __len__(self):
 * 		return self.m_sampleCount             # <<<<<<<<<<<<<<
 * 
 * 	def __getitem__(self, size_t key):
 */
  __pyx_r = __pyx_v_self->m_sampleCount;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Chunk_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_key); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Chunk_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_key) {
  size_t __pyx_v_key;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_key); {
    __pyx_v_key = __Pyx_PyInt_AsSize_t(__pyx_arg_key); if (unlikely((__pyx_v_key == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.Chunk.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5Chunk_6__getitem__(((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_self), ((size_t)__pyx_v_key));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":96
 * 		return self.m_sampleCount
 * 
 * 	def __getitem__(self, size_t key):             # <<<<<<<<<<<<<<
 * 		return self.m_samples[key]
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Chunk_6__getitem__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self, size_t __pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "sfml/audio.pyx":97
 * 
 * 	def __getitem__(self, size_t key):
 * 		return self.m_samples[key]             # <<<<<<<<<<<<<<
 * 
 * 	def __setitem__(self, size_t key, Int16 other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_sf__Int16((__pyx_v_self->m_samples[__pyx_v_key])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Chunk.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Chunk_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_key, PyObject *__pyx_arg_other); /*proto*/
static int __pyx_pw_4sfml_5audio_5Chunk_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_key, PyObject *__pyx_arg_other) {
  size_t __pyx_v_key;
  sf::Int16 __pyx_v_other;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_key); {
    __pyx_v_key = __Pyx_PyInt_AsSize_t(__pyx_arg_key); if (unlikely((__pyx_v_key == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  assert(__pyx_arg_other); {
    __pyx_v_other = __Pyx_PyInt_from_py_sf__Int16(__pyx_arg_other); if (unlikely((__pyx_v_other == (sf::Int16)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.Chunk.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5Chunk_8__setitem__(((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_self), ((size_t)__pyx_v_key), ((sf::Int16)__pyx_v_other));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":99
 * 		return self.m_samples[key]
 * 
 * 	def __setitem__(self, size_t key, Int16 other):             # <<<<<<<<<<<<<<
 * 		self.m_samples[key] = other
 * 
 */

static int __pyx_pf_4sfml_5audio_5Chunk_8__setitem__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self, size_t __pyx_v_key, sf::Int16 __pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "sfml/audio.pyx":100
 * 
 * 	def __setitem__(self, size_t key, Int16 other):
 * 		self.m_samples[key] = other             # <<<<<<<<<<<<<<
 * 
 * 	property data:
 */
  (__pyx_v_self->m_samples[__pyx_v_key]) = __pyx_v_other;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Chunk_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Chunk_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Chunk_4data___get__(((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":103
 * 
 * 	property data:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return (<char*>self.m_samples)[:len(self)*2]
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Chunk_4data___get__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":104
 * 	property data:
 * 		def __get__(self):
 * 			return (<char*>self.m_samples)[:len(self)*2]             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, bdata):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(((char *)__pyx_v_self->m_samples) + 0, (__pyx_t_1 * 2) - 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.Chunk.data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Chunk_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_bdata); /*proto*/
static int __pyx_pw_4sfml_5audio_5Chunk_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_bdata) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Chunk_4data_2__set__(((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_bdata));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":106
 * 			return (<char*>self.m_samples)[:len(self)*2]
 * 
 * 		def __set__(self, bdata):             # <<<<<<<<<<<<<<
 * 			cdef char* data = <bytes>bdata
 * 
 */

static int __pyx_pf_4sfml_5audio_5Chunk_4data_2__set__(struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_self, PyObject *__pyx_v_bdata) {
  char *__pyx_v_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":107
 * 
 * 		def __set__(self, bdata):
 * 			cdef char* data = <bytes>bdata             # <<<<<<<<<<<<<<
 * 
 * 			if len(bdata) % 2:
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_bdata); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "sfml/audio.pyx":109
 * 			cdef char* data = <bytes>bdata
 * 
 * 			if len(bdata) % 2:             # <<<<<<<<<<<<<<
 * 				raise ValueError("Chunk data lenght must be even as it represents a 16bit array")
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_bdata); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_mod_Py_ssize_t(__pyx_t_2, 2);
  if (__pyx_t_3) {

    /* "sfml/audio.pyx":110
 * 
 * 			if len(bdata) % 2:
 * 				raise ValueError("Chunk data lenght must be even as it represents a 16bit array")             # <<<<<<<<<<<<<<
 * 
 * 			if self.delete_this:
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio.pyx":112
 * 				raise ValueError("Chunk data lenght must be even as it represents a 16bit array")
 * 
 * 			if self.delete_this:             # <<<<<<<<<<<<<<
 * 				free(self.m_samples)
 * 				self.m_sampleCount = 0
 */
  if (__pyx_v_self->delete_this) {

    /* "sfml/audio.pyx":113
 * 
 * 			if self.delete_this:
 * 				free(self.m_samples)             # <<<<<<<<<<<<<<
 * 				self.m_sampleCount = 0
 * 
 */
    free(__pyx_v_self->m_samples);

    /* "sfml/audio.pyx":114
 * 			if self.delete_this:
 * 				free(self.m_samples)
 * 				self.m_sampleCount = 0             # <<<<<<<<<<<<<<
 * 
 * 			self.m_samples = <Int16*>malloc(len(bdata))
 */
    __pyx_v_self->m_sampleCount = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "sfml/audio.pyx":116
 * 				self.m_sampleCount = 0
 * 
 * 			self.m_samples = <Int16*>malloc(len(bdata))             # <<<<<<<<<<<<<<
 * 			memcpy(self.m_samples, data, len(bdata))
 * 			self.m_sampleCount = len(bdata) // 2
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_bdata); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->m_samples = ((sf::Int16 *)malloc(__pyx_t_3));

  /* "sfml/audio.pyx":117
 * 
 * 			self.m_samples = <Int16*>malloc(len(bdata))
 * 			memcpy(self.m_samples, data, len(bdata))             # <<<<<<<<<<<<<<
 * 			self.m_sampleCount = len(bdata) // 2
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_bdata); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  memcpy(__pyx_v_self->m_samples, __pyx_v_data, __pyx_t_3);

  /* "sfml/audio.pyx":118
 * 			self.m_samples = <Int16*>malloc(len(bdata))
 * 			memcpy(self.m_samples, data, len(bdata))
 * 			self.m_sampleCount = len(bdata) // 2             # <<<<<<<<<<<<<<
 * 
 * 			self.delete_this = True
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_bdata); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->m_sampleCount = __Pyx_div_Py_ssize_t(__pyx_t_3, 2);

  /* "sfml/audio.pyx":120
 * 			self.m_sampleCount = len(bdata) // 2
 * 
 * 			self.delete_this = True             # <<<<<<<<<<<<<<
 * 
 * cdef api object create_chunk():
 */
  __pyx_v_self->delete_this = 1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.audio.Chunk.data.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":122
 * 			self.delete_this = True
 * 
 * cdef api object create_chunk():             # <<<<<<<<<<<<<<
 * 	cdef Chunk r = Chunk.__new__(Chunk)
 * 	r.m_samples = NULL
 */

static PyObject *__pyx_f_4sfml_5audio_create_chunk(void) {
  struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_chunk", 0);

  /* "sfml/audio.pyx":123
 * 
 * cdef api object create_chunk():
 * 	cdef Chunk r = Chunk.__new__(Chunk)             # <<<<<<<<<<<<<<
 * 	r.m_samples = NULL
 * 	r.m_sampleCount = 0
 */
  __pyx_t_1 = __pyx_tp_new_4sfml_5audio_Chunk(((PyTypeObject *)((PyObject*)__pyx_ptype_4sfml_5audio_Chunk)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_Chunk)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = ((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio.pyx":124
 * cdef api object create_chunk():
 * 	cdef Chunk r = Chunk.__new__(Chunk)
 * 	r.m_samples = NULL             # <<<<<<<<<<<<<<
 * 	r.m_sampleCount = 0
 * 	r.delete_this = False
 */
  __pyx_v_r->m_samples = NULL;

  /* "sfml/audio.pyx":125
 * 	cdef Chunk r = Chunk.__new__(Chunk)
 * 	r.m_samples = NULL
 * 	r.m_sampleCount = 0             # <<<<<<<<<<<<<<
 * 	r.delete_this = False
 * 	return r
 */
  __pyx_v_r->m_sampleCount = 0;

  /* "sfml/audio.pyx":126
 * 	r.m_samples = NULL
 * 	r.m_sampleCount = 0
 * 	r.delete_this = False             # <<<<<<<<<<<<<<
 * 	return r
 * 
 */
  __pyx_v_r->delete_this = 0;

  /* "sfml/audio.pyx":127
 * 	r.m_sampleCount = 0
 * 	r.delete_this = False
 * 	return r             # <<<<<<<<<<<<<<
 * 
 * cdef api Int16* terminate_chunk(chunk):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.create_chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":129
 * 	return r
 * 
 * cdef api Int16* terminate_chunk(chunk):             # <<<<<<<<<<<<<<
 * 	cdef Chunk p = <Chunk>chunk
 * 	p.delete_this = False
 */

static sf::Int16 *__pyx_f_4sfml_5audio_terminate_chunk(PyObject *__pyx_v_chunk) {
  struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_p = 0;
  sf::Int16 *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("terminate_chunk", 0);

  /* "sfml/audio.pyx":130
 * 
 * cdef api Int16* terminate_chunk(chunk):
 * 	cdef Chunk p = <Chunk>chunk             # <<<<<<<<<<<<<<
 * 	p.delete_this = False
 * 	return p.m_samples
 */
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_chunk)));
  __pyx_v_p = ((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_v_chunk);

  /* "sfml/audio.pyx":131
 * cdef api Int16* terminate_chunk(chunk):
 * 	cdef Chunk p = <Chunk>chunk
 * 	p.delete_this = False             # <<<<<<<<<<<<<<
 * 	return p.m_samples
 * 
 */
  __pyx_v_p->delete_this = 0;

  /* "sfml/audio.pyx":132
 * 	cdef Chunk p = <Chunk>chunk
 * 	p.delete_this = False
 * 	return p.m_samples             # <<<<<<<<<<<<<<
 * 
 * cdef api object wrap_chunk(Int16* samples, unsigned int sample_count, bint delete):
 */
  __pyx_r = __pyx_v_p->m_samples;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":134
 * 	return p.m_samples
 * 
 * cdef api object wrap_chunk(Int16* samples, unsigned int sample_count, bint delete):             # <<<<<<<<<<<<<<
 * 	cdef Chunk r = Chunk.__new__(Chunk)
 * 	r.m_samples = samples
 */

static PyObject *__pyx_f_4sfml_5audio_wrap_chunk(sf::Int16 *__pyx_v_samples, unsigned int __pyx_v_sample_count, int __pyx_v_delete) {
  struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_chunk", 0);

  /* "sfml/audio.pyx":135
 * 
 * cdef api object wrap_chunk(Int16* samples, unsigned int sample_count, bint delete):
 * 	cdef Chunk r = Chunk.__new__(Chunk)             # <<<<<<<<<<<<<<
 * 	r.m_samples = samples
 * 	r.m_sampleCount = sample_count
 */
  __pyx_t_1 = __pyx_tp_new_4sfml_5audio_Chunk(((PyTypeObject *)((PyObject*)__pyx_ptype_4sfml_5audio_Chunk)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_Chunk)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = ((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio.pyx":136
 * cdef api object wrap_chunk(Int16* samples, unsigned int sample_count, bint delete):
 * 	cdef Chunk r = Chunk.__new__(Chunk)
 * 	r.m_samples = samples             # <<<<<<<<<<<<<<
 * 	r.m_sampleCount = sample_count
 * 	r.delete_this = delete
 */
  __pyx_v_r->m_samples = __pyx_v_samples;

  /* "sfml/audio.pyx":137
 * 	cdef Chunk r = Chunk.__new__(Chunk)
 * 	r.m_samples = samples
 * 	r.m_sampleCount = sample_count             # <<<<<<<<<<<<<<
 * 	r.delete_this = delete
 * 	return r
 */
  __pyx_v_r->m_sampleCount = __pyx_v_sample_count;

  /* "sfml/audio.pyx":138
 * 	r.m_samples = samples
 * 	r.m_sampleCount = sample_count
 * 	r.delete_this = delete             # <<<<<<<<<<<<<<
 * 	return r
 * 
 */
  __pyx_v_r->delete_this = __pyx_v_delete;

  /* "sfml/audio.pyx":139
 * 	r.m_sampleCount = sample_count
 * 	r.delete_this = delete
 * 	return r             # <<<<<<<<<<<<<<
 * 
 * cdef class SoundBuffer:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.wrap_chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer___init__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":145
 * 	cdef bint                delete_this
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		raise UserWarning("Use specific methods")
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":146
 * 
 * 	def __init__(self):
 * 		raise UserWarning("Use specific methods")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_UserWarning, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_11SoundBuffer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_11SoundBuffer_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_11SoundBuffer_2__dealloc__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio.pyx":148
 * 		raise UserWarning("Use specific methods")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self.delete_this: del self.p_this
 * 
 */

static void __pyx_pf_4sfml_5audio_11SoundBuffer_2__dealloc__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio.pyx":149
 * 
 * 	def __dealloc__(self):
 * 		if self.delete_this: del self.p_this             # <<<<<<<<<<<<<<
 * 
 * 	def __repr__(self): pass
 */
  if (__pyx_v_self->delete_this) {
    delete __pyx_v_self->p_this;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_4__repr__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":151
 * 		if self.delete_this: del self.p_this
 * 
 * 	def __repr__(self): pass             # <<<<<<<<<<<<<<
 * 	def __str__(self): pass
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_4__repr__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_6__str__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":152
 * 
 * 	def __repr__(self): pass
 * 	def __str__(self): pass             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_6__str__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__", 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_9from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_9from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_8from_file(((PyObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":155
 * 
 * 	@classmethod
 * 	def from_file(cls, filename):             # <<<<<<<<<<<<<<
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 		cdef char* encoded_filename
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_8from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  sf::SoundBuffer *__pyx_v_p;
  char *__pyx_v_encoded_filename;
  PyObject *__pyx_v_encoded_filename_temporary = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_file", 0);

  /* "sfml/audio.pyx":156
 * 	@classmethod
 * 	def from_file(cls, filename):
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()             # <<<<<<<<<<<<<<
 * 		cdef char* encoded_filename
 * 
 */
  __pyx_v_p = new sf::SoundBuffer();

  /* "sfml/audio.pyx":159
 * 		cdef char* encoded_filename
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		encoded_filename = encoded_filename_temporary
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_encoded_filename_temporary = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "sfml/audio.pyx":160
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')
 * 		encoded_filename = encoded_filename_temporary             # <<<<<<<<<<<<<<
 * 
 * 		if p.loadFromFile(encoded_filename): return wrap_soundbuffer(p)
 */
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_encoded_filename_temporary); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_encoded_filename = __pyx_t_3;

  /* "sfml/audio.pyx":162
 * 		encoded_filename = encoded_filename_temporary
 * 
 * 		if p.loadFromFile(encoded_filename): return wrap_soundbuffer(p)             # <<<<<<<<<<<<<<
 * 
 * 		del p
 */
  __pyx_t_4 = __pyx_v_p->loadFromFile(__pyx_v_encoded_filename);
  if (__pyx_t_4) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_soundbuffer(__pyx_v_p, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio.pyx":164
 * 		if p.loadFromFile(encoded_filename): return wrap_soundbuffer(p)
 * 
 * 		del p             # <<<<<<<<<<<<<<
 * 		raise IOError(popLastErrorMessage())
 * 
 */
  delete __pyx_v_p;

  /* "sfml/audio.pyx":165
 * 
 * 		del p
 * 		raise IOError(popLastErrorMessage())             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __pyx_t_2 = popLastErrorMessage(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encoded_filename_temporary);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_11from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_11from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_memory (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_10from_memory(((PyObject*)__pyx_v_cls), ((PyObject*)__pyx_v_data));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":168
 * 
 * 	@classmethod
 * 	def from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_10from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  sf::SoundBuffer *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_memory", 0);

  /* "sfml/audio.pyx":169
 * 	@classmethod
 * 	def from_memory(cls, bytes data):
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()             # <<<<<<<<<<<<<<
 * 
 * 		if p.loadFromMemory(<char*>data, len(data)): return wrap_soundbuffer(p)
 */
  __pyx_v_p = new sf::SoundBuffer();

  /* "sfml/audio.pyx":171
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 
 * 		if p.loadFromMemory(<char*>data, len(data)): return wrap_soundbuffer(p)             # <<<<<<<<<<<<<<
 * 
 * 		del p
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_p->loadFromMemory(((char *)__pyx_t_1), __pyx_t_2);
  if (__pyx_t_3) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_soundbuffer(__pyx_v_p, NULL)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio.pyx":173
 * 		if p.loadFromMemory(<char*>data, len(data)): return wrap_soundbuffer(p)
 * 
 * 		del p             # <<<<<<<<<<<<<<
 * 		raise IOError(popLastErrorMessage())
 * 
 */
  delete __pyx_v_p;

  /* "sfml/audio.pyx":174
 * 
 * 		del p
 * 		raise IOError(popLastErrorMessage())             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __pyx_t_4 = popLastErrorMessage(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.from_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_13from_samples(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_13from_samples(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_samples = 0;
  unsigned int __pyx_v_channel_count;
  unsigned int __pyx_v_sample_rate;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_samples (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__samples,&__pyx_n_s__channel_count,&__pyx_n_s__sample_rate,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__samples)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_samples", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_rate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_samples", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_samples") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_samples = ((struct __pyx_obj_4sfml_5audio_Chunk *)values[0]);
    __pyx_v_channel_count = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_channel_count == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sample_rate = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_sample_rate == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_samples", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.from_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_samples), __pyx_ptype_4sfml_5audio_Chunk, 1, "samples", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_12from_samples(((PyObject*)__pyx_v_cls), __pyx_v_samples, __pyx_v_channel_count, __pyx_v_sample_rate);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":177
 * 
 * 	@classmethod
 * 	def from_samples(cls, Chunk samples, unsigned int channel_count, unsigned int sample_rate):             # <<<<<<<<<<<<<<
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_12from_samples(CYTHON_UNUSED PyObject *__pyx_v_cls, struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_samples, unsigned int __pyx_v_channel_count, unsigned int __pyx_v_sample_rate) {
  sf::SoundBuffer *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_samples", 0);

  /* "sfml/audio.pyx":178
 * 	@classmethod
 * 	def from_samples(cls, Chunk samples, unsigned int channel_count, unsigned int sample_rate):
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()             # <<<<<<<<<<<<<<
 * 
 * 		if p.loadFromSamples(samples.m_samples, samples.m_sampleCount, channel_count, sample_rate):
 */
  __pyx_v_p = new sf::SoundBuffer();

  /* "sfml/audio.pyx":180
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 
 * 		if p.loadFromSamples(samples.m_samples, samples.m_sampleCount, channel_count, sample_rate):             # <<<<<<<<<<<<<<
 * 			return wrap_soundbuffer(p)
 * 
 */
  __pyx_t_1 = __pyx_v_p->loadFromSamples(__pyx_v_samples->m_samples, __pyx_v_samples->m_sampleCount, __pyx_v_channel_count, __pyx_v_sample_rate);
  if (__pyx_t_1) {

    /* "sfml/audio.pyx":181
 * 
 * 		if p.loadFromSamples(samples.m_samples, samples.m_sampleCount, channel_count, sample_rate):
 * 			return wrap_soundbuffer(p)             # <<<<<<<<<<<<<<
 * 
 * 		del p
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_soundbuffer(__pyx_v_p, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio.pyx":183
 * 			return wrap_soundbuffer(p)
 * 
 * 		del p             # <<<<<<<<<<<<<<
 * 		raise IOError(popLastErrorMessage())
 * 
 */
  delete __pyx_v_p;

  /* "sfml/audio.pyx":184
 * 
 * 		del p
 * 		raise IOError(popLastErrorMessage())             # <<<<<<<<<<<<<<
 * 
 * 	def to_file(self, filename):
 */
  __pyx_t_2 = popLastErrorMessage(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.from_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_15to_file(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_15to_file(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_file (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_14to_file(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":186
 * 		raise IOError(popLastErrorMessage())
 * 
 * 	def to_file(self, filename):             # <<<<<<<<<<<<<<
 * 		cdef char* encoded_filename
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_14to_file(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_encoded_filename;
  PyObject *__pyx_v_encoded_filename_temporary = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_file", 0);

  /* "sfml/audio.pyx":189
 * 		cdef char* encoded_filename
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		encoded_filename = encoded_filename_temporary
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_encoded_filename_temporary = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "sfml/audio.pyx":190
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')
 * 		encoded_filename = encoded_filename_temporary             # <<<<<<<<<<<<<<
 * 
 * 		self.p_this.saveToFile(encoded_filename)
 */
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_encoded_filename_temporary); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_encoded_filename = __pyx_t_3;

  /* "sfml/audio.pyx":192
 * 		encoded_filename = encoded_filename_temporary
 * 
 * 		self.p_this.saveToFile(encoded_filename)             # <<<<<<<<<<<<<<
 * 
 * 	property samples:
 */
  __pyx_v_self->p_this->saveToFile(__pyx_v_encoded_filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encoded_filename_temporary);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_7samples_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_7samples_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_7samples___get__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":195
 * 
 * 	property samples:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			cdef Chunk r = Chunk.__new__(Chunk)
 * 			r.m_samples = <Int16*>self.p_this.getSamples()
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_7samples___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  struct __pyx_obj_4sfml_5audio_Chunk *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":196
 * 	property samples:
 * 		def __get__(self):
 * 			cdef Chunk r = Chunk.__new__(Chunk)             # <<<<<<<<<<<<<<
 * 			r.m_samples = <Int16*>self.p_this.getSamples()
 * 			r.m_sampleCount = self.p_this.getSampleCount()
 */
  __pyx_t_1 = __pyx_tp_new_4sfml_5audio_Chunk(((PyTypeObject *)((PyObject*)__pyx_ptype_4sfml_5audio_Chunk)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_Chunk)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = ((struct __pyx_obj_4sfml_5audio_Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio.pyx":197
 * 		def __get__(self):
 * 			cdef Chunk r = Chunk.__new__(Chunk)
 * 			r.m_samples = <Int16*>self.p_this.getSamples()             # <<<<<<<<<<<<<<
 * 			r.m_sampleCount = self.p_this.getSampleCount()
 * 			return r
 */
  __pyx_v_r->m_samples = ((sf::Int16 *)__pyx_v_self->p_this->getSamples());

  /* "sfml/audio.pyx":198
 * 			cdef Chunk r = Chunk.__new__(Chunk)
 * 			r.m_samples = <Int16*>self.p_this.getSamples()
 * 			r.m_sampleCount = self.p_this.getSampleCount()             # <<<<<<<<<<<<<<
 * 			return r
 * 
 */
  __pyx_v_r->m_sampleCount = __pyx_v_self->p_this->getSampleCount();

  /* "sfml/audio.pyx":199
 * 			r.m_samples = <Int16*>self.p_this.getSamples()
 * 			r.m_sampleCount = self.p_this.getSampleCount()
 * 			return r             # <<<<<<<<<<<<<<
 * 
 * 	property sample_rate:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.samples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_11sample_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_11sample_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_11sample_rate___get__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":202
 * 
 * 	property sample_rate:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_this.getSampleRate()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":203
 * 	property sample_rate:
 * 		def __get__(self):
 * 			return self.p_this.getSampleRate()             # <<<<<<<<<<<<<<
 * 
 * 	property channel_count:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->p_this->getSampleRate()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.sample_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_13channel_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_13channel_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_13channel_count___get__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":206
 * 
 * 	property channel_count:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_this.getChannelCount()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_13channel_count___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":207
 * 	property channel_count:
 * 		def __get__(self):
 * 			return self.p_this.getChannelCount()             # <<<<<<<<<<<<<<
 * 
 * 	property duration:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->p_this->getChannelCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.channel_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_8duration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundBuffer_8duration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundBuffer_8duration___get__(((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":210
 * 
 * 	property duration:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getDuration()
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundBuffer_8duration___get__(struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_self) {
  sf::Time *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":211
 * 	property duration:
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()             # <<<<<<<<<<<<<<
 * 			p[0] = self.p_this.getDuration()
 * 			return wrap_time(p)
 */
  __pyx_v_p = new sf::Time();

  /* "sfml/audio.pyx":212
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getDuration()             # <<<<<<<<<<<<<<
 * 			return wrap_time(p)
 * 
 */
  (__pyx_v_p[0]) = __pyx_v_self->p_this->getDuration();

  /* "sfml/audio.pyx":213
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getDuration()
 * 			return wrap_time(p)             # <<<<<<<<<<<<<<
 * 
 * cdef SoundBuffer wrap_soundbuffer(sf.SoundBuffer *p, bint delete_this=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_time(__pyx_v_p)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundBuffer.duration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":215
 * 			return wrap_time(p)
 * 
 * cdef SoundBuffer wrap_soundbuffer(sf.SoundBuffer *p, bint delete_this=True):             # <<<<<<<<<<<<<<
 * 	cdef SoundBuffer r = SoundBuffer.__new__(SoundBuffer)
 * 	r.p_this = p
 */

static struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_f_4sfml_5audio_wrap_soundbuffer(sf::SoundBuffer *__pyx_v_p, struct __pyx_opt_args_4sfml_5audio_wrap_soundbuffer *__pyx_optional_args) {
  int __pyx_v_delete_this = ((int)1);
  struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_r = 0;
  struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_soundbuffer", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_delete_this = __pyx_optional_args->delete_this;
    }
  }

  /* "sfml/audio.pyx":216
 * 
 * cdef SoundBuffer wrap_soundbuffer(sf.SoundBuffer *p, bint delete_this=True):
 * 	cdef SoundBuffer r = SoundBuffer.__new__(SoundBuffer)             # <<<<<<<<<<<<<<
 * 	r.p_this = p
 * 	r.delete_this = delete_this
 */
  __pyx_t_1 = __pyx_tp_new_4sfml_5audio_SoundBuffer(((PyTypeObject *)((PyObject*)__pyx_ptype_4sfml_5audio_SoundBuffer)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_SoundBuffer)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio.pyx":217
 * cdef SoundBuffer wrap_soundbuffer(sf.SoundBuffer *p, bint delete_this=True):
 * 	cdef SoundBuffer r = SoundBuffer.__new__(SoundBuffer)
 * 	r.p_this = p             # <<<<<<<<<<<<<<
 * 	r.delete_this = delete_this
 * 	return r
 */
  __pyx_v_r->p_this = __pyx_v_p;

  /* "sfml/audio.pyx":218
 * 	cdef SoundBuffer r = SoundBuffer.__new__(SoundBuffer)
 * 	r.p_this = p
 * 	r.delete_this = delete_this             # <<<<<<<<<<<<<<
 * 	return r
 * 
 */
  __pyx_v_r->delete_this = __pyx_v_delete_this;

  /* "sfml/audio.pyx":219
 * 	r.p_this = p
 * 	r.delete_this = delete_this
 * 	return r             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.wrap_soundbuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundSource_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundSource_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource___init__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":229
 * 	cdef sf.SoundSource *p_soundsource
 * 
 * 	def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 		raise UserWarning("This class is not meant to be used directly")
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundSource___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":230
 * 
 * 	def __init__(self, *args, **kwargs):
 * 		raise UserWarning("This class is not meant to be used directly")             # <<<<<<<<<<<<<<
 * 
 * 	property pitch:
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_UserWarning, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundSource.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_5pitch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_5pitch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_5pitch___get__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":233
 * 
 * 	property pitch:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundsource.getPitch()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_5pitch___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":234
 * 	property pitch:
 * 		def __get__(self):
 * 			return self.p_soundsource.getPitch()             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, float pitch):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->p_soundsource->getPitch()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundSource.pitch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundSource_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pitch); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundSource_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pitch) {
  float __pyx_v_pitch;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_pitch); {
    __pyx_v_pitch = __pyx_PyFloat_AsFloat(__pyx_arg_pitch); if (unlikely((__pyx_v_pitch == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundSource.pitch.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_5pitch_2__set__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_pitch));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":236
 * 			return self.p_soundsource.getPitch()
 * 
 * 		def __set__(self, float pitch):             # <<<<<<<<<<<<<<
 * 			self.p_soundsource.setPitch(pitch)
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundSource_5pitch_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_pitch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":237
 * 
 * 		def __set__(self, float pitch):
 * 			self.p_soundsource.setPitch(pitch)             # <<<<<<<<<<<<<<
 * 
 * 	property volume:
 */
  __pyx_v_self->p_soundsource->setPitch(__pyx_v_pitch);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_6volume_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_6volume_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_6volume___get__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":240
 * 
 * 	property volume:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundsource.getVolume()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_6volume___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":241
 * 	property volume:
 * 		def __get__(self):
 * 			return self.p_soundsource.getVolume()             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, float volume):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->p_soundsource->getVolume()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundSource.volume.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundSource_6volume_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_volume); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundSource_6volume_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_volume) {
  float __pyx_v_volume;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_volume); {
    __pyx_v_volume = __pyx_PyFloat_AsFloat(__pyx_arg_volume); if (unlikely((__pyx_v_volume == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundSource.volume.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_6volume_2__set__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_volume));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":243
 * 			return self.p_soundsource.getVolume()
 * 
 * 		def __set__(self, float volume):             # <<<<<<<<<<<<<<
 * 			self.p_soundsource.setVolume(volume)
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundSource_6volume_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_volume) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":244
 * 
 * 		def __set__(self, float volume):
 * 			self.p_soundsource.setVolume(volume)             # <<<<<<<<<<<<<<
 * 
 * 	property position:
 */
  __pyx_v_self->p_soundsource->setVolume(__pyx_v_volume);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_8position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_8position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_8position___get__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":247
 * 
 * 	property position:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			cdef Vector3f v = self.p_soundsource.getPosition()
 * 			return to_vector3(&v)
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_8position___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self) {
  sf::Vector3f __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":248
 * 	property position:
 * 		def __get__(self):
 * 			cdef Vector3f v = self.p_soundsource.getPosition()             # <<<<<<<<<<<<<<
 * 			return to_vector3(&v)
 * 
 */
  __pyx_v_v = __pyx_v_self->p_soundsource->getPosition();

  /* "sfml/audio.pyx":249
 * 		def __get__(self):
 * 			cdef Vector3f v = self.p_soundsource.getPosition()
 * 			return to_vector3(&v)             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, position):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pysfml_6system_to_vector3((&__pyx_v_v))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundSource.position.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundSource_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_position); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundSource_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_position) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_8position_2__set__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self), ((PyObject *)__pyx_v_position));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":251
 * 			return to_vector3(&v)
 * 
 * 		def __set__(self, position):             # <<<<<<<<<<<<<<
 * 			x, y, z = position
 * 			self.p_soundsource.setPosition(x, y, z)
 */

static int __pyx_pf_4sfml_5audio_11SoundSource_8position_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":252
 * 
 * 		def __set__(self, position):
 * 			x, y, z = position             # <<<<<<<<<<<<<<
 * 			self.p_soundsource.setPosition(x, y, z)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_position))) || (PyList_CheckExact(__pyx_v_position))) {
    PyObject* sequence = __pyx_v_position;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_position); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_z = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "sfml/audio.pyx":253
 * 		def __set__(self, position):
 * 			x, y, z = position
 * 			self.p_soundsource.setPosition(x, y, z)             # <<<<<<<<<<<<<<
 * 
 * 	property relative_to_listener:
 */
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_y); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_z); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->p_soundsource->setPosition(__pyx_t_6, __pyx_t_7, __pyx_t_8);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.audio.SoundSource.position.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_20relative_to_listener_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_20relative_to_listener_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_20relative_to_listener___get__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":256
 * 
 * 	property relative_to_listener:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundsource.isRelativeToListener()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_20relative_to_listener___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":257
 * 	property relative_to_listener:
 * 		def __get__(self):
 * 			return self.p_soundsource.isRelativeToListener()             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, bint relative):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->p_soundsource->isRelativeToListener()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundSource.relative_to_listener.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundSource_20relative_to_listener_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_relative); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundSource_20relative_to_listener_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_relative) {
  int __pyx_v_relative;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_relative); {
    __pyx_v_relative = __Pyx_PyObject_IsTrue(__pyx_arg_relative); if (unlikely((__pyx_v_relative == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundSource.relative_to_listener.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_20relative_to_listener_2__set__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self), ((int)__pyx_v_relative));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":259
 * 			return self.p_soundsource.isRelativeToListener()
 * 
 * 		def __set__(self, bint relative):             # <<<<<<<<<<<<<<
 * 			self.p_soundsource.setRelativeToListener(relative)
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundSource_20relative_to_listener_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, int __pyx_v_relative) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":260
 * 
 * 		def __set__(self, bint relative):
 * 			self.p_soundsource.setRelativeToListener(relative)             # <<<<<<<<<<<<<<
 * 
 * 	property min_distance:
 */
  __pyx_v_self->p_soundsource->setRelativeToListener(__pyx_v_relative);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_12min_distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_12min_distance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_12min_distance___get__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":263
 * 
 * 	property min_distance:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundsource.getMinDistance()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_12min_distance___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":264
 * 	property min_distance:
 * 		def __get__(self):
 * 			return self.p_soundsource.getMinDistance()             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, float distance):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->p_soundsource->getMinDistance()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundSource.min_distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundSource_12min_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_distance); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundSource_12min_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_distance) {
  float __pyx_v_distance;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_distance); {
    __pyx_v_distance = __pyx_PyFloat_AsFloat(__pyx_arg_distance); if (unlikely((__pyx_v_distance == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundSource.min_distance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_12min_distance_2__set__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_distance));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":266
 * 			return self.p_soundsource.getMinDistance()
 * 
 * 		def __set__(self, float distance):             # <<<<<<<<<<<<<<
 * 			self.p_soundsource.setMinDistance(distance)
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundSource_12min_distance_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_distance) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":267
 * 
 * 		def __set__(self, float distance):
 * 			self.p_soundsource.setMinDistance(distance)             # <<<<<<<<<<<<<<
 * 
 * 	property attenuation:
 */
  __pyx_v_self->p_soundsource->setMinDistance(__pyx_v_distance);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_11attenuation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundSource_11attenuation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_11attenuation___get__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":270
 * 
 * 	property attenuation:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundsource.getAttenuation()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundSource_11attenuation___get__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":271
 * 	property attenuation:
 * 		def __get__(self):
 * 			return self.p_soundsource.getAttenuation()             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, float attenuation):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->p_soundsource->getAttenuation()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundSource.attenuation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundSource_11attenuation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_attenuation); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundSource_11attenuation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_attenuation) {
  float __pyx_v_attenuation;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_attenuation); {
    __pyx_v_attenuation = __pyx_PyFloat_AsFloat(__pyx_arg_attenuation); if (unlikely((__pyx_v_attenuation == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundSource.attenuation.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundSource_11attenuation_2__set__(((struct __pyx_obj_4sfml_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_attenuation));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":273
 * 			return self.p_soundsource.getAttenuation()
 * 
 * 		def __set__(self, float attenuation):             # <<<<<<<<<<<<<<
 * 			self.p_soundsource.setAttenuation(attenuation)
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundSource_11attenuation_2__set__(struct __pyx_obj_4sfml_5audio_SoundSource *__pyx_v_self, float __pyx_v_attenuation) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":274
 * 
 * 		def __set__(self, float attenuation):
 * 			self.p_soundsource.setAttenuation(attenuation)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->p_soundsource->setAttenuation(__pyx_v_attenuation);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Sound_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5Sound_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_buffer = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__buffer,0};
    PyObject* values[1] = {0};

    /* "sfml/audio.pyx":281
 * 	cdef SoundBuffer   m_buffer
 * 
 * 	def __init__(self, SoundBuffer buffer=None):             # <<<<<<<<<<<<<<
 * 		self.p_this = new sf.Sound()
 * 		self.p_soundsource = <sf.SoundSource*>self.p_this
 */
    values[0] = (PyObject *)((struct __pyx_obj_4sfml_5audio_SoundBuffer *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buffer);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buffer = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.Sound.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_4sfml_5audio_SoundBuffer, 1, "buffer", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound___init__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self), __pyx_v_buffer);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sfml_5audio_5Sound___init__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":282
 * 
 * 	def __init__(self, SoundBuffer buffer=None):
 * 		self.p_this = new sf.Sound()             # <<<<<<<<<<<<<<
 * 		self.p_soundsource = <sf.SoundSource*>self.p_this
 * 
 */
  __pyx_v_self->p_this = new sf::Sound();

  /* "sfml/audio.pyx":283
 * 	def __init__(self, SoundBuffer buffer=None):
 * 		self.p_this = new sf.Sound()
 * 		self.p_soundsource = <sf.SoundSource*>self.p_this             # <<<<<<<<<<<<<<
 * 
 * 		if buffer: self.buffer = buffer
 */
  __pyx_v_self->__pyx_base.p_soundsource = ((sf::SoundSource *)__pyx_v_self->p_this);

  /* "sfml/audio.pyx":285
 * 		self.p_soundsource = <sf.SoundSource*>self.p_this
 * 
 * 		if buffer: self.buffer = buffer             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_buffer)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__buffer, ((PyObject *)__pyx_v_buffer)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.audio.Sound.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_5Sound_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_5Sound_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_5Sound_2__dealloc__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio.pyx":287
 * 		if buffer: self.buffer = buffer
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self.p_this
 * 
 */

static void __pyx_pf_4sfml_5audio_5Sound_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio.pyx":288
 * 
 * 	def __dealloc__(self):
 * 		del self.p_this             # <<<<<<<<<<<<<<
 * 
 * 	def __repr__(self):
 */
  delete __pyx_v_self->p_this;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_4__repr__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":290
 * 		del self.p_this
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return "sf.Sound()"
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_4__repr__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "sfml/audio.pyx":291
 * 
 * 	def __repr__(self):
 * 		return "sf.Sound()"             # <<<<<<<<<<<<<<
 * 
 * 	def play(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_12));
  __pyx_r = ((PyObject *)__pyx_kp_s_12);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_7play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_7play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_6play(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":293
 * 		return "sf.Sound()"
 * 
 * 	def play(self):             # <<<<<<<<<<<<<<
 * 		self.p_this.play()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_6play(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play", 0);

  /* "sfml/audio.pyx":294
 * 
 * 	def play(self):
 * 		self.p_this.play()             # <<<<<<<<<<<<<<
 * 
 * 	def pause(self):
 */
  __pyx_v_self->p_this->play();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_9pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_9pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_8pause(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":296
 * 		self.p_this.play()
 * 
 * 	def pause(self):             # <<<<<<<<<<<<<<
 * 		self.p_this.pause()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_8pause(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause", 0);

  /* "sfml/audio.pyx":297
 * 
 * 	def pause(self):
 * 		self.p_this.pause()             # <<<<<<<<<<<<<<
 * 
 * 	def stop(self):
 */
  __pyx_v_self->p_this->pause();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_11stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_11stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_10stop(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":299
 * 		self.p_this.pause()
 * 
 * 	def stop(self):             # <<<<<<<<<<<<<<
 * 		self.p_this.stop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_10stop(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop", 0);

  /* "sfml/audio.pyx":300
 * 
 * 	def stop(self):
 * 		self.p_this.stop()             # <<<<<<<<<<<<<<
 * 
 * 	property buffer:
 */
  __pyx_v_self->p_this->stop();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_6buffer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_6buffer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_6buffer___get__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":303
 * 
 * 	property buffer:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.m_buffer
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_6buffer___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":304
 * 	property buffer:
 * 		def __get__(self):
 * 			return self.m_buffer             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, SoundBuffer buffer):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->m_buffer));
  __pyx_r = ((PyObject *)__pyx_v_self->m_buffer);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Sound_6buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_buffer); /*proto*/
static int __pyx_pw_4sfml_5audio_5Sound_6buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_buffer) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_4sfml_5audio_SoundBuffer, 1, "buffer", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_6buffer_2__set__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self), ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_v_buffer));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":306
 * 			return self.m_buffer
 * 
 * 		def __set__(self, SoundBuffer buffer):             # <<<<<<<<<<<<<<
 * 			self.p_this.setBuffer(buffer.p_this[0])
 * 			self.m_buffer = buffer
 */

static int __pyx_pf_4sfml_5audio_5Sound_6buffer_2__set__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_SoundBuffer *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":307
 * 
 * 		def __set__(self, SoundBuffer buffer):
 * 			self.p_this.setBuffer(buffer.p_this[0])             # <<<<<<<<<<<<<<
 * 			self.m_buffer = buffer
 * 
 */
  __pyx_v_self->p_this->setBuffer((__pyx_v_buffer->p_this[0]));

  /* "sfml/audio.pyx":308
 * 		def __set__(self, SoundBuffer buffer):
 * 			self.p_this.setBuffer(buffer.p_this[0])
 * 			self.m_buffer = buffer             # <<<<<<<<<<<<<<
 * 
 * 	property loop:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_buffer));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_buffer));
  __Pyx_GOTREF(__pyx_v_self->m_buffer);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->m_buffer));
  __pyx_v_self->m_buffer = __pyx_v_buffer;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_4loop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_4loop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_4loop___get__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":311
 * 
 * 	property loop:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_this.getLoop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_4loop___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":312
 * 	property loop:
 * 		def __get__(self):
 * 			return self.p_this.getLoop()             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, bint loop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->p_this->getLoop()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Sound.loop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Sound_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_loop); /*proto*/
static int __pyx_pw_4sfml_5audio_5Sound_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_loop) {
  int __pyx_v_loop;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_loop); {
    __pyx_v_loop = __Pyx_PyObject_IsTrue(__pyx_arg_loop); if (unlikely((__pyx_v_loop == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.Sound.loop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_4loop_2__set__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self), ((int)__pyx_v_loop));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":314
 * 			return self.p_this.getLoop()
 * 
 * 		def __set__(self, bint loop):             # <<<<<<<<<<<<<<
 * 			self.p_this.setLoop(loop)
 * 
 */

static int __pyx_pf_4sfml_5audio_5Sound_4loop_2__set__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, int __pyx_v_loop) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":315
 * 
 * 		def __set__(self, bint loop):
 * 			self.p_this.setLoop(loop)             # <<<<<<<<<<<<<<
 * 
 * 	property playing_offset:
 */
  __pyx_v_self->p_this->setLoop(__pyx_v_loop);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_14playing_offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_14playing_offset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_14playing_offset___get__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":318
 * 
 * 	property playing_offset:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getPlayingOffset()
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  sf::Time *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":319
 * 	property playing_offset:
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()             # <<<<<<<<<<<<<<
 * 			p[0] = self.p_this.getPlayingOffset()
 * 			return wrap_time(p)
 */
  __pyx_v_p = new sf::Time();

  /* "sfml/audio.pyx":320
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getPlayingOffset()             # <<<<<<<<<<<<<<
 * 			return wrap_time(p)
 * 
 */
  (__pyx_v_p[0]) = __pyx_v_self->p_this->getPlayingOffset();

  /* "sfml/audio.pyx":321
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getPlayingOffset()
 * 			return wrap_time(p)             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, Time time_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_time(__pyx_v_p)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Sound.playing_offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Sound_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_time_offset); /*proto*/
static int __pyx_pw_4sfml_5audio_5Sound_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_time_offset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_offset), __pyx_ptype_6pysfml_6system_Time, 1, "time_offset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_14playing_offset_2__set__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self), ((struct PyTimeObject *)__pyx_v_time_offset));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":323
 * 			return wrap_time(p)
 * 
 * 		def __set__(self, Time time_offset):             # <<<<<<<<<<<<<<
 * 			self.p_this.setPlayingOffset(time_offset.p_this[0])
 * 
 */

static int __pyx_pf_4sfml_5audio_5Sound_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self, struct PyTimeObject *__pyx_v_time_offset) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":324
 * 
 * 		def __set__(self, Time time_offset):
 * 			self.p_this.setPlayingOffset(time_offset.p_this[0])             # <<<<<<<<<<<<<<
 * 
 * 	property status:
 */
  __pyx_v_self->p_this->setPlayingOffset((__pyx_v_time_offset->p_this[0]));

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Sound_6status_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Sound_6status_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Sound_6status___get__(((struct __pyx_obj_4sfml_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":327
 * 
 * 	property status:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_this.getStatus()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Sound_6status___get__(struct __pyx_obj_4sfml_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":328
 * 	property status:
 * 		def __get__(self):
 * 			return self.p_this.getStatus()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->p_this->getStatus()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Sound.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundStream_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundStream_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream___init__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":334
 * 	cdef sf.SoundStream *p_soundstream
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		if self.__class__ == SoundStream:
 * 			raise NotImplementedError("SoundStream is abstract")
 */

static int __pyx_pf_4sfml_5audio_11SoundStream___init__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":335
 * 
 * 	def __init__(self):
 * 		if self.__class__ == SoundStream:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("SoundStream is abstract")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_SoundStream)), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "sfml/audio.pyx":336
 * 	def __init__(self):
 * 		if self.__class__ == SoundStream:
 * 			raise NotImplementedError("SoundStream is abstract")             # <<<<<<<<<<<<<<
 * 
 * 		elif self.__class__ not in [Music]:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "sfml/audio.pyx":338
 * 			raise NotImplementedError("SoundStream is abstract")
 * 
 * 		elif self.__class__ not in [Music]:             # <<<<<<<<<<<<<<
 * 			self.p_soundstream = <sf.SoundStream*> new DerivableSoundStream(<void*>self)
 * 			self.p_soundsource = <sf.SoundSource*>self.p_soundstream
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_Music)), Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((int)__pyx_t_3);
  if (__pyx_t_4) {

    /* "sfml/audio.pyx":339
 * 
 * 		elif self.__class__ not in [Music]:
 * 			self.p_soundstream = <sf.SoundStream*> new DerivableSoundStream(<void*>self)             # <<<<<<<<<<<<<<
 * 			self.p_soundsource = <sf.SoundSource*>self.p_soundstream
 * 
 */
    __pyx_v_self->p_soundstream = ((sf::SoundStream *)new DerivableSoundStream(((void *)__pyx_v_self)));

    /* "sfml/audio.pyx":340
 * 		elif self.__class__ not in [Music]:
 * 			self.p_soundstream = <sf.SoundStream*> new DerivableSoundStream(<void*>self)
 * 			self.p_soundsource = <sf.SoundSource*>self.p_soundstream             # <<<<<<<<<<<<<<
 * 
 * 	def play(self):
 */
    __pyx_v_self->__pyx_base.p_soundsource = ((sf::SoundSource *)__pyx_v_self->p_soundstream);
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.SoundStream.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_3play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_3play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_2play(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":342
 * 			self.p_soundsource = <sf.SoundSource*>self.p_soundstream
 * 
 * 	def play(self):             # <<<<<<<<<<<<<<
 * 		self.p_soundstream.play()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_2play(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play", 0);

  /* "sfml/audio.pyx":343
 * 
 * 	def play(self):
 * 		self.p_soundstream.play()             # <<<<<<<<<<<<<<
 * 
 * 	def pause(self):
 */
  __pyx_v_self->p_soundstream->play();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_5pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_5pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_4pause(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":345
 * 		self.p_soundstream.play()
 * 
 * 	def pause(self):             # <<<<<<<<<<<<<<
 * 		self.p_soundstream.pause()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_4pause(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause", 0);

  /* "sfml/audio.pyx":346
 * 
 * 	def pause(self):
 * 		self.p_soundstream.pause()             # <<<<<<<<<<<<<<
 * 
 * 	def stop(self):
 */
  __pyx_v_self->p_soundstream->pause();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_6stop(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":348
 * 		self.p_soundstream.pause()
 * 
 * 	def stop(self):             # <<<<<<<<<<<<<<
 * 		self.p_soundstream.stop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_6stop(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop", 0);

  /* "sfml/audio.pyx":349
 * 
 * 	def stop(self):
 * 		self.p_soundstream.stop()             # <<<<<<<<<<<<<<
 * 
 * 	property channel_count:
 */
  __pyx_v_self->p_soundstream->stop();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_13channel_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_13channel_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_13channel_count___get__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":352
 * 
 * 	property channel_count:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundstream.getChannelCount()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_13channel_count___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":353
 * 	property channel_count:
 * 		def __get__(self):
 * 			return self.p_soundstream.getChannelCount()             # <<<<<<<<<<<<<<
 * 
 * 	property sample_rate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->p_soundstream->getChannelCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundStream.channel_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_11sample_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_11sample_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_11sample_rate___get__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":356
 * 
 * 	property sample_rate:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundstream.getSampleRate()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":357
 * 	property sample_rate:
 * 		def __get__(self):
 * 			return self.p_soundstream.getSampleRate()             # <<<<<<<<<<<<<<
 * 
 * 	property status:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->p_soundstream->getSampleRate()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundStream.sample_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_6status_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_6status_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_6status___get__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":360
 * 
 * 	property status:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundstream.getStatus()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_6status___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":361
 * 	property status:
 * 		def __get__(self):
 * 			return self.p_soundstream.getStatus()             # <<<<<<<<<<<<<<
 * 
 * 	property playing_offset:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->p_soundstream->getStatus()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundStream.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_14playing_offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_14playing_offset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_14playing_offset___get__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":364
 * 
 * 	property playing_offset:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_soundstream.getPlayingOffset()
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  sf::Time *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":365
 * 	property playing_offset:
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()             # <<<<<<<<<<<<<<
 * 			p[0] = self.p_soundstream.getPlayingOffset()
 * 			return wrap_time(p)
 */
  __pyx_v_p = new sf::Time();

  /* "sfml/audio.pyx":366
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_soundstream.getPlayingOffset()             # <<<<<<<<<<<<<<
 * 			return wrap_time(p)
 * 
 */
  (__pyx_v_p[0]) = __pyx_v_self->p_soundstream->getPlayingOffset();

  /* "sfml/audio.pyx":367
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_soundstream.getPlayingOffset()
 * 			return wrap_time(p)             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, Time time_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_time(__pyx_v_p)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundStream.playing_offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundStream_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_time_offset); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundStream_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_time_offset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_offset), __pyx_ptype_6pysfml_6system_Time, 1, "time_offset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_14playing_offset_2__set__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self), ((struct PyTimeObject *)__pyx_v_time_offset));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":369
 * 			return wrap_time(p)
 * 
 * 		def __set__(self, Time time_offset):             # <<<<<<<<<<<<<<
 * 			self.p_soundstream.setPlayingOffset(time_offset.p_this[0])
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundStream_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, struct PyTimeObject *__pyx_v_time_offset) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":370
 * 
 * 		def __set__(self, Time time_offset):
 * 			self.p_soundstream.setPlayingOffset(time_offset.p_this[0])             # <<<<<<<<<<<<<<
 * 
 * 	property loop:
 */
  __pyx_v_self->p_soundstream->setPlayingOffset((__pyx_v_time_offset->p_this[0]));

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_4loop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_4loop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_4loop___get__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":373
 * 
 * 	property loop:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundstream.getLoop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_4loop___get__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":374
 * 	property loop:
 * 		def __get__(self):
 * 			return self.p_soundstream.getLoop()             # <<<<<<<<<<<<<<
 * 
 * 		def __set__(self, bint loop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->p_soundstream->getLoop()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundStream.loop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_11SoundStream_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_loop); /*proto*/
static int __pyx_pw_4sfml_5audio_11SoundStream_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_loop) {
  int __pyx_v_loop;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_loop); {
    __pyx_v_loop = __Pyx_PyObject_IsTrue(__pyx_arg_loop); if (unlikely((__pyx_v_loop == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundStream.loop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_4loop_2__set__(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self), ((int)__pyx_v_loop));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":376
 * 			return self.p_soundstream.getLoop()
 * 
 * 		def __set__(self, bint loop):             # <<<<<<<<<<<<<<
 * 			self.p_soundstream.setLoop(loop)
 * 
 */

static int __pyx_pf_4sfml_5audio_11SoundStream_4loop_2__set__(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, int __pyx_v_loop) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio.pyx":377
 * 
 * 		def __set__(self, bint loop):
 * 			self.p_soundstream.setLoop(loop)             # <<<<<<<<<<<<<<
 * 
 * 	def initialize(self, unsigned int channel_count, unsigned int sample_rate):
 */
  __pyx_v_self->p_soundstream->setLoop(__pyx_v_loop);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_9initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_9initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_channel_count;
  unsigned int __pyx_v_sample_rate;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__channel_count,&__pyx_n_s__sample_rate,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channel_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_rate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_channel_count = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_channel_count == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sample_rate = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_sample_rate == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundStream.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_8initialize(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self), __pyx_v_channel_count, __pyx_v_sample_rate);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":379
 * 			self.p_soundstream.setLoop(loop)
 * 
 * 	def initialize(self, unsigned int channel_count, unsigned int sample_rate):             # <<<<<<<<<<<<<<
 * 		if self.__class__ not in [Music]:
 * 			(<DerivableSoundStream*>self.p_soundstream).initialize(channel_count, sample_rate)
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_8initialize(struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, unsigned int __pyx_v_channel_count, unsigned int __pyx_v_sample_rate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "sfml/audio.pyx":380
 * 
 * 	def initialize(self, unsigned int channel_count, unsigned int sample_rate):
 * 		if self.__class__ not in [Music]:             # <<<<<<<<<<<<<<
 * 			(<DerivableSoundStream*>self.p_soundstream).initialize(channel_count, sample_rate)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_Music)), Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((int)__pyx_t_3);
  if (__pyx_t_4) {

    /* "sfml/audio.pyx":381
 * 	def initialize(self, unsigned int channel_count, unsigned int sample_rate):
 * 		if self.__class__ not in [Music]:
 * 			(<DerivableSoundStream*>self.p_soundstream).initialize(channel_count, sample_rate)             # <<<<<<<<<<<<<<
 * 
 * 	def on_get_data(self, data): pass
 */
    ((DerivableSoundStream *)__pyx_v_self->p_soundstream)->initialize(__pyx_v_channel_count, __pyx_v_sample_rate);
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.SoundStream.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_11on_get_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_11on_get_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_get_data (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_10on_get_data(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self), ((PyObject *)__pyx_v_data));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":383
 * 			(<DerivableSoundStream*>self.p_soundstream).initialize(channel_count, sample_rate)
 * 
 * 	def on_get_data(self, data): pass             # <<<<<<<<<<<<<<
 * 	def on_seek(self, time_offset): pass
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_10on_get_data(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_get_data", 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_13on_seek(PyObject *__pyx_v_self, PyObject *__pyx_v_time_offset); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_11SoundStream_13on_seek(PyObject *__pyx_v_self, PyObject *__pyx_v_time_offset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_seek (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_11SoundStream_12on_seek(((struct __pyx_obj_4sfml_5audio_SoundStream *)__pyx_v_self), ((PyObject *)__pyx_v_time_offset));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":384
 * 
 * 	def on_get_data(self, data): pass
 * 	def on_seek(self, time_offset): pass             # <<<<<<<<<<<<<<
 * 
 * cdef class Music(SoundStream):
 */

static PyObject *__pyx_pf_4sfml_5audio_11SoundStream_12on_seek(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundStream *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_time_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_seek", 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5Music_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5Music_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_5Music___init__(((struct __pyx_obj_4sfml_5audio_Music *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":389
 * 	cdef sf.Music *p_this
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		raise UserWarning("Use specific constructor")
 * 
 */

static int __pyx_pf_4sfml_5audio_5Music___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Music *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":390
 * 
 * 	def __init__(self):
 * 		raise UserWarning("Use specific constructor")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_UserWarning, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Music.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_5Music_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_5Music_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_5Music_2__dealloc__(((struct __pyx_obj_4sfml_5audio_Music *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio.pyx":392
 * 		raise UserWarning("Use specific constructor")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self.p_this
 * 
 */

static void __pyx_pf_4sfml_5audio_5Music_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_Music *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio.pyx":393
 * 
 * 	def __dealloc__(self):
 * 		del self.p_this             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  delete __pyx_v_self->p_this;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Music_5from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Music_5from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Music_4from_file(((PyObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":396
 * 
 * 	@classmethod
 * 	def from_file(cls, filename):             # <<<<<<<<<<<<<<
 * 		cdef sf.Music *p = new sf.Music()
 * 		cdef char* encoded_filename
 */

static PyObject *__pyx_pf_4sfml_5audio_5Music_4from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  sf::Music *__pyx_v_p;
  char *__pyx_v_encoded_filename;
  PyObject *__pyx_v_encoded_filename_temporary = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_file", 0);

  /* "sfml/audio.pyx":397
 * 	@classmethod
 * 	def from_file(cls, filename):
 * 		cdef sf.Music *p = new sf.Music()             # <<<<<<<<<<<<<<
 * 		cdef char* encoded_filename
 * 
 */
  __pyx_v_p = new sf::Music();

  /* "sfml/audio.pyx":400
 * 		cdef char* encoded_filename
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		encoded_filename = encoded_filename_temporary
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_encoded_filename_temporary = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "sfml/audio.pyx":401
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')
 * 		encoded_filename = encoded_filename_temporary             # <<<<<<<<<<<<<<
 * 
 * 		if p.openFromFile(encoded_filename): return wrap_music(p)
 */
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_encoded_filename_temporary); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_encoded_filename = __pyx_t_3;

  /* "sfml/audio.pyx":403
 * 		encoded_filename = encoded_filename_temporary
 * 
 * 		if p.openFromFile(encoded_filename): return wrap_music(p)             # <<<<<<<<<<<<<<
 * 
 * 		del p
 */
  __pyx_t_4 = __pyx_v_p->openFromFile(__pyx_v_encoded_filename);
  if (__pyx_t_4) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_music(__pyx_v_p)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio.pyx":405
 * 		if p.openFromFile(encoded_filename): return wrap_music(p)
 * 
 * 		del p             # <<<<<<<<<<<<<<
 * 		raise IOError(popLastErrorMessage())
 * 
 */
  delete __pyx_v_p;

  /* "sfml/audio.pyx":406
 * 
 * 		del p
 * 		raise IOError(popLastErrorMessage())             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __pyx_t_2 = popLastErrorMessage(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.Music.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encoded_filename_temporary);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Music_7from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Music_7from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_memory (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5Music_6from_memory(((PyObject*)__pyx_v_cls), ((PyObject*)__pyx_v_data));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":409
 * 
 * 	@classmethod
 * 	def from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 * 		cdef sf.Music *p = new sf.Music()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5Music_6from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  sf::Music *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_memory", 0);

  /* "sfml/audio.pyx":410
 * 	@classmethod
 * 	def from_memory(cls, bytes data):
 * 		cdef sf.Music *p = new sf.Music()             # <<<<<<<<<<<<<<
 * 
 * 		if p.openFromMemory(<char*>data, len(data)): return wrap_music(p)
 */
  __pyx_v_p = new sf::Music();

  /* "sfml/audio.pyx":412
 * 		cdef sf.Music *p = new sf.Music()
 * 
 * 		if p.openFromMemory(<char*>data, len(data)): return wrap_music(p)             # <<<<<<<<<<<<<<
 * 
 * 		del p
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_p->openFromMemory(((char *)__pyx_t_1), __pyx_t_2);
  if (__pyx_t_3) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_music(__pyx_v_p)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio.pyx":414
 * 		if p.openFromMemory(<char*>data, len(data)): return wrap_music(p)
 * 
 * 		del p             # <<<<<<<<<<<<<<
 * 		raise IOError(popLastErrorMessage())
 * 
 */
  delete __pyx_v_p;

  /* "sfml/audio.pyx":415
 * 
 * 		del p
 * 		raise IOError(popLastErrorMessage())             # <<<<<<<<<<<<<<
 * 
 * 	property duration:
 */
  __pyx_t_4 = popLastErrorMessage(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sfml.audio.Music.from_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5Music_8duration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5Music_8duration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5Music_8duration___get__(((struct __pyx_obj_4sfml_5audio_Music *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":418
 * 
 * 	property duration:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getDuration()
 */

static PyObject *__pyx_pf_4sfml_5audio_5Music_8duration___get__(struct __pyx_obj_4sfml_5audio_Music *__pyx_v_self) {
  sf::Time *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":419
 * 	property duration:
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()             # <<<<<<<<<<<<<<
 * 			p[0] = self.p_this.getDuration()
 * 			return wrap_time(p)
 */
  __pyx_v_p = new sf::Time();

  /* "sfml/audio.pyx":420
 * 		def __get__(self):
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getDuration()             # <<<<<<<<<<<<<<
 * 			return wrap_time(p)
 * 
 */
  (__pyx_v_p[0]) = __pyx_v_self->p_this->getDuration();

  /* "sfml/audio.pyx":421
 * 			cdef sf.Time* p = new sf.Time()
 * 			p[0] = self.p_this.getDuration()
 * 			return wrap_time(p)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_time(__pyx_v_p)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.Music.duration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":424
 * 
 * 
 * cdef Music wrap_music(sf.Music *p):             # <<<<<<<<<<<<<<
 * 	cdef Music r = Music.__new__(Music)
 * 	r.p_this = p
 */

static struct __pyx_obj_4sfml_5audio_Music *__pyx_f_4sfml_5audio_wrap_music(sf::Music *__pyx_v_p) {
  struct __pyx_obj_4sfml_5audio_Music *__pyx_v_r = 0;
  struct __pyx_obj_4sfml_5audio_Music *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_music", 0);

  /* "sfml/audio.pyx":425
 * 
 * cdef Music wrap_music(sf.Music *p):
 * 	cdef Music r = Music.__new__(Music)             # <<<<<<<<<<<<<<
 * 	r.p_this = p
 * 	r.p_soundstream = <sf.SoundStream*>p
 */
  __pyx_t_1 = __pyx_tp_new_4sfml_5audio_Music(((PyTypeObject *)((PyObject*)__pyx_ptype_4sfml_5audio_Music)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_Music)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = ((struct __pyx_obj_4sfml_5audio_Music *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio.pyx":426
 * cdef Music wrap_music(sf.Music *p):
 * 	cdef Music r = Music.__new__(Music)
 * 	r.p_this = p             # <<<<<<<<<<<<<<
 * 	r.p_soundstream = <sf.SoundStream*>p
 * 	r.p_soundsource = <sf.SoundSource*>p
 */
  __pyx_v_r->p_this = __pyx_v_p;

  /* "sfml/audio.pyx":427
 * 	cdef Music r = Music.__new__(Music)
 * 	r.p_this = p
 * 	r.p_soundstream = <sf.SoundStream*>p             # <<<<<<<<<<<<<<
 * 	r.p_soundsource = <sf.SoundSource*>p
 * 	return r
 */
  __pyx_v_r->__pyx_base.p_soundstream = ((sf::SoundStream *)__pyx_v_p);

  /* "sfml/audio.pyx":428
 * 	r.p_this = p
 * 	r.p_soundstream = <sf.SoundStream*>p
 * 	r.p_soundsource = <sf.SoundSource*>p             # <<<<<<<<<<<<<<
 * 	return r
 * 
 */
  __pyx_v_r->__pyx_base.__pyx_base.p_soundsource = ((sf::SoundSource *)__pyx_v_p);

  /* "sfml/audio.pyx":429
 * 	r.p_soundstream = <sf.SoundStream*>p
 * 	r.p_soundsource = <sf.SoundSource*>p
 * 	return r             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_4sfml_5audio_Music *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.wrap_music", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_13SoundRecorder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_13SoundRecorder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder___init__(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":435
 * 	cdef sf.SoundRecorder *p_soundrecorder
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		if self.__class__ == SoundRecorder:
 * 			raise NotImplementedError("SoundRecorder is abstract")
 */

static int __pyx_pf_4sfml_5audio_13SoundRecorder___init__(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":436
 * 
 * 	def __init__(self):
 * 		if self.__class__ == SoundRecorder:             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("SoundRecorder is abstract")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_SoundRecorder)), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "sfml/audio.pyx":437
 * 	def __init__(self):
 * 		if self.__class__ == SoundRecorder:
 * 			raise NotImplementedError("SoundRecorder is abstract")             # <<<<<<<<<<<<<<
 * 
 * 		elif self.__class__ is not SoundBufferRecorder:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "sfml/audio.pyx":439
 * 			raise NotImplementedError("SoundRecorder is abstract")
 * 
 * 		elif self.__class__ is not SoundBufferRecorder:             # <<<<<<<<<<<<<<
 * 			self.p_soundrecorder = <sf.SoundRecorder*>new DerivableSoundRecorder(<void*>self)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_SoundBufferRecorder)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "sfml/audio.pyx":440
 * 
 * 		elif self.__class__ is not SoundBufferRecorder:
 * 			self.p_soundrecorder = <sf.SoundRecorder*>new DerivableSoundRecorder(<void*>self)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
    __pyx_v_self->p_soundrecorder = ((sf::SoundRecorder *)new DerivableSoundRecorder(((void *)__pyx_v_self)));
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.SoundRecorder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_13SoundRecorder_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_13SoundRecorder_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_13SoundRecorder_2__dealloc__(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio.pyx":442
 * 			self.p_soundrecorder = <sf.SoundRecorder*>new DerivableSoundRecorder(<void*>self)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self.__class__ is SoundRecorder:
 * 			del self.p_soundrecorder
 */

static void __pyx_pf_4sfml_5audio_13SoundRecorder_2__dealloc__(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio.pyx":443
 * 
 * 	def __dealloc__(self):
 * 		if self.__class__ is SoundRecorder:             # <<<<<<<<<<<<<<
 * 			del self.p_soundrecorder
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_SoundRecorder)));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "sfml/audio.pyx":444
 * 	def __dealloc__(self):
 * 		if self.__class__ is SoundRecorder:
 * 			del self.p_soundrecorder             # <<<<<<<<<<<<<<
 * 
 * 	def start(self, unsigned int sample_rate=44100):
 */
    delete __pyx_v_self->p_soundrecorder;
    goto __pyx_L3;
  }
  __pyx_L3:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundRecorder.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_5start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_5start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_sample_rate;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sample_rate,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_rate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "start") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_sample_rate = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_sample_rate == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sample_rate = ((unsigned int)44100);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.SoundRecorder.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder_4start(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self), __pyx_v_sample_rate);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":446
 * 			del self.p_soundrecorder
 * 
 * 	def start(self, unsigned int sample_rate=44100):             # <<<<<<<<<<<<<<
 * 		self.p_soundrecorder.start(sample_rate)
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_4start(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self, unsigned int __pyx_v_sample_rate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start", 0);

  /* "sfml/audio.pyx":447
 * 
 * 	def start(self, unsigned int sample_rate=44100):
 * 		self.p_soundrecorder.start(sample_rate)             # <<<<<<<<<<<<<<
 * 
 * 	def stop(self):
 */
  __pyx_v_self->p_soundrecorder->start(__pyx_v_sample_rate);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder_6stop(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":449
 * 		self.p_soundrecorder.start(sample_rate)
 * 
 * 	def stop(self):             # <<<<<<<<<<<<<<
 * 		with nogil: self.p_soundrecorder.stop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_6stop(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop", 0);

  /* "sfml/audio.pyx":450
 * 
 * 	def stop(self):
 * 		with nogil: self.p_soundrecorder.stop()             # <<<<<<<<<<<<<<
 * 
 * 	property sample_rate:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {
        __pyx_v_self->p_soundrecorder->stop();
      }
      /*finally:*/ {
        #ifdef WITH_THREAD
        Py_BLOCK_THREADS
        #endif
      }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_11sample_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_11sample_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder_11sample_rate___get__(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":453
 * 
 * 	property sample_rate:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.p_soundrecorder.getSampleRate()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":454
 * 	property sample_rate:
 * 		def __get__(self):
 * 			return self.p_soundrecorder.getSampleRate()             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->p_soundrecorder->getSampleRate()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundRecorder.sample_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_9is_available(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_9is_available(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_available (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder_8is_available(((PyObject*)__pyx_v_cls));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":457
 * 
 * 	@classmethod
 * 	def is_available(cls):             # <<<<<<<<<<<<<<
 * 		return sf.soundrecorder.isAvailable()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_8is_available(CYTHON_UNUSED PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_available", 0);

  /* "sfml/audio.pyx":458
 * 	@classmethod
 * 	def is_available(cls):
 * 		return sf.soundrecorder.isAvailable()             # <<<<<<<<<<<<<<
 * 
 * 	def on_start(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(sf::SoundRecorder::isAvailable()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundRecorder.is_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_11on_start(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_11on_start(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_start (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder_10on_start(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":460
 * 		return sf.soundrecorder.isAvailable()
 * 
 * 	def on_start(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_10on_start(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_start", 0);

  /* "sfml/audio.pyx":461
 * 
 * 	def on_start(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * 	def on_process_samples(self, chunk):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundRecorder.on_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_13on_process_samples(PyObject *__pyx_v_self, PyObject *__pyx_v_chunk); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_13on_process_samples(PyObject *__pyx_v_self, PyObject *__pyx_v_chunk) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_process_samples (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder_12on_process_samples(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self), ((PyObject *)__pyx_v_chunk));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":463
 * 		return True
 * 
 * 	def on_process_samples(self, chunk):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_12on_process_samples(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_chunk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_process_samples", 0);

  /* "sfml/audio.pyx":464
 * 
 * 	def on_process_samples(self, chunk):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * 	def on_stop(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundRecorder.on_process_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_15on_stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_13SoundRecorder_15on_stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_stop (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_13SoundRecorder_14on_stop(((struct __pyx_obj_4sfml_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":466
 * 		return True
 * 
 * 	def on_stop(self):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_13SoundRecorder_14on_stop(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundRecorder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_stop", 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_19SoundBufferRecorder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_19SoundBufferRecorder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_19SoundBufferRecorder___init__(((struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":473
 * 	cdef SoundBuffer                 m_buffer
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.p_this = new sf.SoundBufferRecorder()
 * 		self.p_soundrecorder = <sf.SoundRecorder*>self.p_this
 */

static int __pyx_pf_4sfml_5audio_19SoundBufferRecorder___init__(struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4sfml_5audio_wrap_soundbuffer __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio.pyx":474
 * 
 * 	def __init__(self):
 * 		self.p_this = new sf.SoundBufferRecorder()             # <<<<<<<<<<<<<<
 * 		self.p_soundrecorder = <sf.SoundRecorder*>self.p_this
 * 
 */
  __pyx_v_self->p_this = new sf::SoundBufferRecorder();

  /* "sfml/audio.pyx":475
 * 	def __init__(self):
 * 		self.p_this = new sf.SoundBufferRecorder()
 * 		self.p_soundrecorder = <sf.SoundRecorder*>self.p_this             # <<<<<<<<<<<<<<
 * 
 * 		self.m_buffer = wrap_soundbuffer(<sf.SoundBuffer*>&self.p_this.getBuffer(), False)
 */
  __pyx_v_self->__pyx_base.p_soundrecorder = ((sf::SoundRecorder *)__pyx_v_self->p_this);

  /* "sfml/audio.pyx":477
 * 		self.p_soundrecorder = <sf.SoundRecorder*>self.p_this
 * 
 * 		self.m_buffer = wrap_soundbuffer(<sf.SoundBuffer*>&self.p_this.getBuffer(), False)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.delete_this = 0;
  __pyx_t_1 = ((PyObject *)__pyx_f_4sfml_5audio_wrap_soundbuffer(((sf::SoundBuffer *)(&__pyx_v_self->p_this->getBuffer())), &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->m_buffer);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->m_buffer));
  __pyx_v_self->m_buffer = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.SoundBufferRecorder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_19SoundBufferRecorder_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_19SoundBufferRecorder_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_19SoundBufferRecorder_2__dealloc__(((struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio.pyx":479
 * 		self.m_buffer = wrap_soundbuffer(<sf.SoundBuffer*>&self.p_this.getBuffer(), False)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self.p_this
 * 
 */

static void __pyx_pf_4sfml_5audio_19SoundBufferRecorder_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio.pyx":480
 * 
 * 	def __dealloc__(self):
 * 		del self.p_this             # <<<<<<<<<<<<<<
 * 
 * 	property buffer:
 */
  delete __pyx_v_self->p_this;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_19SoundBufferRecorder_6buffer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_19SoundBufferRecorder_6buffer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_19SoundBufferRecorder_6buffer___get__(((struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio.pyx":483
 * 
 * 	property buffer:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			return self.m_buffer
 */

static PyObject *__pyx_pf_4sfml_5audio_19SoundBufferRecorder_6buffer___get__(struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio.pyx":484
 * 	property buffer:
 * 		def __get__(self):
 * 			return self.m_buffer             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->m_buffer));
  __pyx_r = ((PyObject *)__pyx_v_self->m_buffer);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysfml/system.pxd":18
 * 		cdef sf.Time *p_this
 * 
 * cdef inline object wrap_time(sf.Time* p):             # <<<<<<<<<<<<<<
 * 	cdef Time r = Time.__new__(Time)
 * 	r.p_this = p
 */

static CYTHON_INLINE PyObject *__pyx_f_6pysfml_6system_wrap_time(sf::Time *__pyx_v_p) {
  struct PyTimeObject *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_time", 0);

  /* "pysfml/system.pxd":19
 * 
 * cdef inline object wrap_time(sf.Time* p):
 * 	cdef Time r = Time.__new__(Time)             # <<<<<<<<<<<<<<
 * 	r.p_this = p
 * 	return r
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)((PyObject*)__pyx_ptype_6pysfml_6system_Time)), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pysfml_6system_Time)))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_r = ((struct PyTimeObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysfml/system.pxd":20
 * cdef inline object wrap_time(sf.Time* p):
 * 	cdef Time r = Time.__new__(Time)
 * 	r.p_this = p             # <<<<<<<<<<<<<<
 * 	return r
 * 
 */
  __pyx_v_r->p_this = __pyx_v_p;

  /* "pysfml/system.pxd":21
 * 	cdef Time r = Time.__new__(Time)
 * 	r.p_this = p
 * 	return r             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "pysfml/system.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysfml.system.wrap_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysfml/system.pxd":33
 * 		cdef public object z
 * 
 * cdef inline sf.Vector2i to_vector2i(vector):             # <<<<<<<<<<<<<<
 * 	x, y = vector
 * 	return sf.Vector2i(x, y)
 */

static CYTHON_INLINE sf::Vector2i __pyx_f_6pysfml_6system_to_vector2i(PyObject *__pyx_v_vector) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  sf::Vector2i __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_vector2i", 0);

  /* "pysfml/system.pxd":34
 * 
 * cdef inline sf.Vector2i to_vector2i(vector):
 * 	x, y = vector             # <<<<<<<<<<<<<<
 * 	return sf.Vector2i(x, y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_vector))) || (PyList_CheckExact(__pyx_v_vector))) {
    PyObject* sequence = __pyx_v_vector;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_vector); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pysfml/system.pxd":35
 * cdef inline sf.Vector2i to_vector2i(vector):
 * 	x, y = vector
 * 	return sf.Vector2i(x, y)             # <<<<<<<<<<<<<<
 * 
 * cdef inline sf.Vector2u to_vector2u(vector):
 */
  __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_y); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = sf::Vector2i(__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pysfml.system.to_vector2i", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysfml/system.pxd":37
 * 	return sf.Vector2i(x, y)
 * 
 * cdef inline sf.Vector2u to_vector2u(vector):             # <<<<<<<<<<<<<<
 * 	w, h = vector
 * 	return sf.Vector2u(w, h)
 */

static CYTHON_INLINE sf::Vector2u __pyx_f_6pysfml_6system_to_vector2u(PyObject *__pyx_v_vector) {
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_h = NULL;
  sf::Vector2u __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  unsigned int __pyx_t_5;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_vector2u", 0);

  /* "pysfml/system.pxd":38
 * 
 * cdef inline sf.Vector2u to_vector2u(vector):
 * 	w, h = vector             # <<<<<<<<<<<<<<
 * 	return sf.Vector2u(w, h)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_vector))) || (PyList_CheckExact(__pyx_v_vector))) {
    PyObject* sequence = __pyx_v_vector;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_vector); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_w = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_h = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pysfml/system.pxd":39
 * cdef inline sf.Vector2u to_vector2u(vector):
 * 	w, h = vector
 * 	return sf.Vector2u(w, h)             # <<<<<<<<<<<<<<
 * 
 * cdef inline sf.Vector2f to_vector2f(vector):
 */
  __pyx_t_5 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_w); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_h); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = sf::Vector2u(__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pysfml.system.to_vector2u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysfml/system.pxd":41
 * 	return sf.Vector2u(w, h)
 * 
 * cdef inline sf.Vector2f to_vector2f(vector):             # <<<<<<<<<<<<<<
 * 	w, h = vector
 * 	return sf.Vector2f(w, h)
 */

static CYTHON_INLINE sf::Vector2f __pyx_f_6pysfml_6system_to_vector2f(PyObject *__pyx_v_vector) {
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_h = NULL;
  sf::Vector2f __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  float __pyx_t_5;
  float __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_vector2f", 0);

  /* "pysfml/system.pxd":42
 * 
 * cdef inline sf.Vector2f to_vector2f(vector):
 * 	w, h = vector             # <<<<<<<<<<<<<<
 * 	return sf.Vector2f(w, h)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_vector))) || (PyList_CheckExact(__pyx_v_vector))) {
    PyObject* sequence = __pyx_v_vector;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_vector); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_w = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_h = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pysfml/system.pxd":43
 * cdef inline sf.Vector2f to_vector2f(vector):
 * 	w, h = vector
 * 	return sf.Vector2f(w, h)             # <<<<<<<<<<<<<<
 * 
 * cdef inline sf.Vector3f to_vector3f(vector):
 */
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_w); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_h); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = sf::Vector2f(__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pysfml.system.to_vector2f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysfml/system.pxd":45
 * 	return sf.Vector2f(w, h)
 * 
 * cdef inline sf.Vector3f to_vector3f(vector):             # <<<<<<<<<<<<<<
 * 	w, h, z = vector
 * 	return sf.Vector3f(w, h, z)
 */

static CYTHON_INLINE sf::Vector3f __pyx_f_6pysfml_6system_to_vector3f(PyObject *__pyx_v_vector) {
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_z = NULL;
  sf::Vector3f __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_vector3f", 0);

  /* "pysfml/system.pxd":46
 * 
 * cdef inline sf.Vector3f to_vector3f(vector):
 * 	w, h, z = vector             # <<<<<<<<<<<<<<
 * 	return sf.Vector3f(w, h, z)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_vector))) || (PyList_CheckExact(__pyx_v_vector))) {
    PyObject* sequence = __pyx_v_vector;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else
  {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_vector); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_w = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_h = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_z = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pysfml/system.pxd":47
 * cdef inline sf.Vector3f to_vector3f(vector):
 * 	w, h, z = vector
 * 	return sf.Vector3f(w, h, z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline Vector3 to_vector3(sf.Vector3f* vector):
 */
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_w); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_h); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_z); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = sf::Vector3f(__pyx_t_6, __pyx_t_7, __pyx_t_8);
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pysfml.system.to_vector3f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysfml/system.pxd":49
 * 	return sf.Vector3f(w, h, z)
 * 
 * cdef inline Vector3 to_vector3(sf.Vector3f* vector):             # <<<<<<<<<<<<<<
 * 	return Vector3(vector.x, vector.y, vector.z)
 * 
 */

static CYTHON_INLINE struct PyVector3Object *__pyx_f_6pysfml_6system_to_vector3(sf::Vector3f *__pyx_v_vector) {
  struct PyVector3Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_vector3", 0);

  /* "pysfml/system.pxd":50
 * 
 * cdef inline Vector3 to_vector3(sf.Vector3f* vector):
 * 	return Vector3(vector.x, vector.y, vector.z)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_vector->x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_vector->y); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vector->z); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysfml_6system_Vector3)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = ((struct PyVector3Object *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = ((struct PyVector3Object *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pysfml.system.to_vector3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4sfml_5audio_Listener(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_Listener(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_Listener[] = {
  {__Pyx_NAMESTR("get_global_volume"), (PyCFunction)__pyx_pw_4sfml_5audio_8Listener_3get_global_volume, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_global_volume"), (PyCFunction)__pyx_pw_4sfml_5audio_8Listener_5set_global_volume, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_position"), (PyCFunction)__pyx_pw_4sfml_5audio_8Listener_7get_position, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_position"), (PyCFunction)__pyx_pw_4sfml_5audio_8Listener_9set_position, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_direction"), (PyCFunction)__pyx_pw_4sfml_5audio_8Listener_11get_direction, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_direction"), (PyCFunction)__pyx_pw_4sfml_5audio_8Listener_13set_direction, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Listener = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Listener = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Listener = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Listener = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_Listener = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.Listener"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_Listener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_Listener, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Listener, /*tp_as_number*/
  &__pyx_tp_as_sequence_Listener, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Listener, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Listener, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_Listener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_8Listener_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_Listener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_Chunk(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sfml_5audio_5Chunk_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_Chunk(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_5Chunk_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_4sfml_5audio_Chunk(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_4sfml_5audio_Chunk(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5Chunk_9__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5Chunk_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_5Chunk_4data_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5Chunk_data(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5Chunk_4data_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4sfml_5audio_Chunk[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_Chunk[] = {
  {(char *)"data", __pyx_getprop_4sfml_5audio_5Chunk_data, __pyx_setprop_4sfml_5audio_5Chunk_data, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Chunk = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Chunk = {
  __pyx_pw_4sfml_5audio_5Chunk_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_4sfml_5audio_Chunk, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Chunk = {
  __pyx_pw_4sfml_5audio_5Chunk_5__len__, /*mp_length*/
  __pyx_pw_4sfml_5audio_5Chunk_7__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_4sfml_5audio_Chunk, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Chunk = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_Chunk = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.Chunk"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_Chunk), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_Chunk, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Chunk, /*tp_as_number*/
  &__pyx_tp_as_sequence_Chunk, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Chunk, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Chunk, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_Chunk, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_Chunk, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_Chunk, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_SoundBuffer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_SoundBuffer(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_11SoundBuffer_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundBuffer_samples(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundBuffer_7samples_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundBuffer_sample_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundBuffer_11sample_rate_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundBuffer_channel_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundBuffer_13channel_count_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundBuffer_duration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundBuffer_8duration_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_SoundBuffer[] = {
  {__Pyx_NAMESTR("from_file"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundBuffer_9from_file, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("from_memory"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundBuffer_11from_memory, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("from_samples"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundBuffer_13from_samples, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("to_file"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundBuffer_15to_file, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_SoundBuffer[] = {
  {(char *)"samples", __pyx_getprop_4sfml_5audio_11SoundBuffer_samples, 0, 0, 0},
  {(char *)"sample_rate", __pyx_getprop_4sfml_5audio_11SoundBuffer_sample_rate, 0, 0, 0},
  {(char *)"channel_count", __pyx_getprop_4sfml_5audio_11SoundBuffer_channel_count, 0, 0, 0},
  {(char *)"duration", __pyx_getprop_4sfml_5audio_11SoundBuffer_duration, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundBuffer = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundBuffer = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundBuffer = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundBuffer = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_SoundBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.SoundBuffer"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_SoundBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_SoundBuffer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_4sfml_5audio_11SoundBuffer_5__repr__, /*tp_repr*/
  &__pyx_tp_as_number_SoundBuffer, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundBuffer, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundBuffer, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_4sfml_5audio_11SoundBuffer_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundBuffer, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_SoundBuffer, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_SoundBuffer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_11SoundBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_SoundBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_SoundSource(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_SoundSource(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundSource_pitch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundSource_5pitch_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundSource_pitch(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundSource_5pitch_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundSource_volume(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundSource_6volume_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundSource_volume(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundSource_6volume_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundSource_position(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundSource_8position_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundSource_position(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundSource_8position_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundSource_relative_to_listener(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundSource_20relative_to_listener_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundSource_relative_to_listener(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundSource_20relative_to_listener_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundSource_min_distance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundSource_12min_distance_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundSource_min_distance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundSource_12min_distance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundSource_attenuation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundSource_11attenuation_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundSource_attenuation(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundSource_11attenuation_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4sfml_5audio_SoundSource[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_SoundSource[] = {
  {(char *)"pitch", __pyx_getprop_4sfml_5audio_11SoundSource_pitch, __pyx_setprop_4sfml_5audio_11SoundSource_pitch, 0, 0},
  {(char *)"volume", __pyx_getprop_4sfml_5audio_11SoundSource_volume, __pyx_setprop_4sfml_5audio_11SoundSource_volume, 0, 0},
  {(char *)"position", __pyx_getprop_4sfml_5audio_11SoundSource_position, __pyx_setprop_4sfml_5audio_11SoundSource_position, 0, 0},
  {(char *)"relative_to_listener", __pyx_getprop_4sfml_5audio_11SoundSource_relative_to_listener, __pyx_setprop_4sfml_5audio_11SoundSource_relative_to_listener, 0, 0},
  {(char *)"min_distance", __pyx_getprop_4sfml_5audio_11SoundSource_min_distance, __pyx_setprop_4sfml_5audio_11SoundSource_min_distance, 0, 0},
  {(char *)"attenuation", __pyx_getprop_4sfml_5audio_11SoundSource_attenuation, __pyx_setprop_4sfml_5audio_11SoundSource_attenuation, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundSource = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundSource = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundSource = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundSource = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_SoundSource = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.SoundSource"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_SoundSource), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_SoundSource, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundSource, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundSource, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundSource, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundSource, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_SoundSource, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_SoundSource, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_11SoundSource_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_SoundSource, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_Sound(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4sfml_5audio_Sound *p;
  PyObject *o = __pyx_tp_new_4sfml_5audio_SoundSource(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4sfml_5audio_Sound *)o);
  p->m_buffer = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_Sound(PyObject *o) {
  struct __pyx_obj_4sfml_5audio_Sound *p = (struct __pyx_obj_4sfml_5audio_Sound *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_5Sound_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->m_buffer);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_4sfml_5audio_SoundSource(o);
}

static int __pyx_tp_traverse_4sfml_5audio_Sound(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4sfml_5audio_Sound *p = (struct __pyx_obj_4sfml_5audio_Sound *)o;
  e = ((likely(__pyx_ptype_4sfml_5audio_SoundSource)) ? ((__pyx_ptype_4sfml_5audio_SoundSource->tp_traverse) ? __pyx_ptype_4sfml_5audio_SoundSource->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_4sfml_5audio_Sound)); if (e) return e;
  if (p->m_buffer) {
    e = (*v)(((PyObject*)p->m_buffer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4sfml_5audio_Sound(PyObject *o) {
  struct __pyx_obj_4sfml_5audio_Sound *p = (struct __pyx_obj_4sfml_5audio_Sound *)o;
  PyObject* tmp;
  if (likely(__pyx_ptype_4sfml_5audio_SoundSource)) { if (__pyx_ptype_4sfml_5audio_SoundSource->tp_clear) __pyx_ptype_4sfml_5audio_SoundSource->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_4sfml_5audio_Sound);
  tmp = ((PyObject*)p->m_buffer);
  p->m_buffer = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4sfml_5audio_5Sound_buffer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_5Sound_6buffer_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5Sound_buffer(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5Sound_6buffer_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5Sound_loop(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_5Sound_4loop_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5Sound_loop(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5Sound_4loop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5Sound_playing_offset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_5Sound_14playing_offset_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5Sound_playing_offset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5Sound_14playing_offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5Sound_status(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_5Sound_6status_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_Sound[] = {
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pw_4sfml_5audio_5Sound_7play, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pw_4sfml_5audio_5Sound_9pause, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_4sfml_5audio_5Sound_11stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_Sound[] = {
  {(char *)"buffer", __pyx_getprop_4sfml_5audio_5Sound_buffer, __pyx_setprop_4sfml_5audio_5Sound_buffer, 0, 0},
  {(char *)"loop", __pyx_getprop_4sfml_5audio_5Sound_loop, __pyx_setprop_4sfml_5audio_5Sound_loop, 0, 0},
  {(char *)"playing_offset", __pyx_getprop_4sfml_5audio_5Sound_playing_offset, __pyx_setprop_4sfml_5audio_5Sound_playing_offset, 0, 0},
  {(char *)"status", __pyx_getprop_4sfml_5audio_5Sound_status, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Sound = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Sound = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Sound = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Sound = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_Sound = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.Sound"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_Sound), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_Sound, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_4sfml_5audio_5Sound_5__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Sound, /*tp_as_number*/
  &__pyx_tp_as_sequence_Sound, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Sound, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Sound, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4sfml_5audio_Sound, /*tp_traverse*/
  __pyx_tp_clear_4sfml_5audio_Sound, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_Sound, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_Sound, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_5Sound_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_Sound, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_SoundStream(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_5audio_SoundSource(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundStream_channel_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundStream_13channel_count_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundStream_sample_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundStream_11sample_rate_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundStream_status(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundStream_6status_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundStream_playing_offset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundStream_14playing_offset_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundStream_playing_offset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundStream_14playing_offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_11SoundStream_loop(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_11SoundStream_4loop_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_11SoundStream_loop(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_11SoundStream_4loop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4sfml_5audio_SoundStream[] = {
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundStream_3play, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundStream_5pause, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundStream_7stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("initialize"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundStream_9initialize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("on_get_data"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundStream_11on_get_data, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("on_seek"), (PyCFunction)__pyx_pw_4sfml_5audio_11SoundStream_13on_seek, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_SoundStream[] = {
  {(char *)"channel_count", __pyx_getprop_4sfml_5audio_11SoundStream_channel_count, 0, 0, 0},
  {(char *)"sample_rate", __pyx_getprop_4sfml_5audio_11SoundStream_sample_rate, 0, 0, 0},
  {(char *)"status", __pyx_getprop_4sfml_5audio_11SoundStream_status, 0, 0, 0},
  {(char *)"playing_offset", __pyx_getprop_4sfml_5audio_11SoundStream_playing_offset, __pyx_setprop_4sfml_5audio_11SoundStream_playing_offset, 0, 0},
  {(char *)"loop", __pyx_getprop_4sfml_5audio_11SoundStream_loop, __pyx_setprop_4sfml_5audio_11SoundStream_loop, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundStream = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundStream = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundStream = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundStream = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_SoundStream = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.SoundStream"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_SoundStream), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_SoundSource, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundStream, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundStream, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundStream, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundStream, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_SoundStream, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_SoundStream, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_11SoundStream_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_SoundStream, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_Music(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_5audio_SoundStream(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_Music(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_5Music_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_4sfml_5audio_SoundSource(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5Music_duration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_5Music_8duration_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_Music[] = {
  {__Pyx_NAMESTR("from_file"), (PyCFunction)__pyx_pw_4sfml_5audio_5Music_5from_file, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("from_memory"), (PyCFunction)__pyx_pw_4sfml_5audio_5Music_7from_memory, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_Music[] = {
  {(char *)"duration", __pyx_getprop_4sfml_5audio_5Music_duration, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Music = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Music = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Music = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Music = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_Music = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.Music"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_Music), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_Music, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Music, /*tp_as_number*/
  &__pyx_tp_as_sequence_Music, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Music, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Music, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_Music, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_Music, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_5Music_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_Music, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_SoundRecorder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_SoundRecorder(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_13SoundRecorder_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_13SoundRecorder_sample_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_13SoundRecorder_11sample_rate_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_SoundRecorder[] = {
  {__Pyx_NAMESTR("start"), (PyCFunction)__pyx_pw_4sfml_5audio_13SoundRecorder_5start, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_4sfml_5audio_13SoundRecorder_7stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("is_available"), (PyCFunction)__pyx_pw_4sfml_5audio_13SoundRecorder_9is_available, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("on_start"), (PyCFunction)__pyx_pw_4sfml_5audio_13SoundRecorder_11on_start, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("on_process_samples"), (PyCFunction)__pyx_pw_4sfml_5audio_13SoundRecorder_13on_process_samples, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("on_stop"), (PyCFunction)__pyx_pw_4sfml_5audio_13SoundRecorder_15on_stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_SoundRecorder[] = {
  {(char *)"sample_rate", __pyx_getprop_4sfml_5audio_13SoundRecorder_sample_rate, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundRecorder = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundRecorder = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundRecorder = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundRecorder = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_SoundRecorder = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.SoundRecorder"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_SoundRecorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_SoundRecorder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundRecorder, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundRecorder, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundRecorder, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundRecorder, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_SoundRecorder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_SoundRecorder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_13SoundRecorder_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_SoundRecorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_SoundBufferRecorder(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *p;
  PyObject *o = __pyx_tp_new_4sfml_5audio_SoundRecorder(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *)o);
  p->m_buffer = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_SoundBufferRecorder(PyObject *o) {
  struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *p = (struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_19SoundBufferRecorder_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->m_buffer);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_4sfml_5audio_SoundRecorder(o);
}

static int __pyx_tp_traverse_4sfml_5audio_SoundBufferRecorder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *p = (struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *)o;
  e = ((likely(__pyx_ptype_4sfml_5audio_SoundRecorder)) ? ((__pyx_ptype_4sfml_5audio_SoundRecorder->tp_traverse) ? __pyx_ptype_4sfml_5audio_SoundRecorder->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_4sfml_5audio_SoundBufferRecorder)); if (e) return e;
  if (p->m_buffer) {
    e = (*v)(((PyObject*)p->m_buffer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4sfml_5audio_SoundBufferRecorder(PyObject *o) {
  struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *p = (struct __pyx_obj_4sfml_5audio_SoundBufferRecorder *)o;
  PyObject* tmp;
  if (likely(__pyx_ptype_4sfml_5audio_SoundRecorder)) { if (__pyx_ptype_4sfml_5audio_SoundRecorder->tp_clear) __pyx_ptype_4sfml_5audio_SoundRecorder->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_4sfml_5audio_SoundBufferRecorder);
  tmp = ((PyObject*)p->m_buffer);
  p->m_buffer = ((struct __pyx_obj_4sfml_5audio_SoundBuffer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4sfml_5audio_19SoundBufferRecorder_buffer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4sfml_5audio_19SoundBufferRecorder_6buffer_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_SoundBufferRecorder[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_SoundBufferRecorder[] = {
  {(char *)"buffer", __pyx_getprop_4sfml_5audio_19SoundBufferRecorder_buffer, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundBufferRecorder = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundBufferRecorder = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundBufferRecorder = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundBufferRecorder = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_SoundBufferRecorder = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.SoundBufferRecorder"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_SoundBufferRecorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_SoundBufferRecorder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundBufferRecorder, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundBufferRecorder, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundBufferRecorder, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundBufferRecorder, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4sfml_5audio_SoundBufferRecorder, /*tp_traverse*/
  __pyx_tp_clear_4sfml_5audio_SoundBufferRecorder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_SoundBufferRecorder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_SoundBufferRecorder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_19SoundBufferRecorder_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_SoundBufferRecorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("audio"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_n_s__IOError, __pyx_k__IOError, sizeof(__pyx_k__IOError), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplementedError, __pyx_k__NotImplementedError, sizeof(__pyx_k__NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s__PAUSED, __pyx_k__PAUSED, sizeof(__pyx_k__PAUSED), 0, 0, 1, 1},
  {&__pyx_n_s__PLAYING, __pyx_k__PLAYING, sizeof(__pyx_k__PLAYING), 0, 0, 1, 1},
  {&__pyx_n_s__STOPPED, __pyx_k__STOPPED, sizeof(__pyx_k__STOPPED), 0, 0, 1, 1},
  {&__pyx_n_s__UserWarning, __pyx_k__UserWarning, sizeof(__pyx_k__UserWarning), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____class__, __pyx_k____class__, sizeof(__pyx_k____class__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__buffer, __pyx_k__buffer, sizeof(__pyx_k__buffer), 0, 0, 1, 1},
  {&__pyx_n_s__channel_count, __pyx_k__channel_count, sizeof(__pyx_k__channel_count), 0, 0, 1, 1},
  {&__pyx_n_s__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 0, 0, 1, 1},
  {&__pyx_n_s__from_file, __pyx_k__from_file, sizeof(__pyx_k__from_file), 0, 0, 1, 1},
  {&__pyx_n_s__from_memory, __pyx_k__from_memory, sizeof(__pyx_k__from_memory), 0, 0, 1, 1},
  {&__pyx_n_s__from_samples, __pyx_k__from_samples, sizeof(__pyx_k__from_samples), 0, 0, 1, 1},
  {&__pyx_n_s__get_direction, __pyx_k__get_direction, sizeof(__pyx_k__get_direction), 0, 0, 1, 1},
  {&__pyx_n_s__get_global_volume, __pyx_k__get_global_volume, sizeof(__pyx_k__get_global_volume), 0, 0, 1, 1},
  {&__pyx_n_s__get_position, __pyx_k__get_position, sizeof(__pyx_k__get_position), 0, 0, 1, 1},
  {&__pyx_n_s__is_available, __pyx_k__is_available, sizeof(__pyx_k__is_available), 0, 0, 1, 1},
  {&__pyx_n_s__sample_rate, __pyx_k__sample_rate, sizeof(__pyx_k__sample_rate), 0, 0, 1, 1},
  {&__pyx_n_s__samples, __pyx_k__samples, sizeof(__pyx_k__samples), 0, 0, 1, 1},
  {&__pyx_n_s__set_direction, __pyx_k__set_direction, sizeof(__pyx_k__set_direction), 0, 0, 1, 1},
  {&__pyx_n_s__set_global_volume, __pyx_k__set_global_volume, sizeof(__pyx_k__set_global_volume), 0, 0, 1, 1},
  {&__pyx_n_s__set_position, __pyx_k__set_position, sizeof(__pyx_k__set_position), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s__NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_UserWarning = __Pyx_GetBuiltinName(__pyx_n_s__UserWarning); if (!__pyx_builtin_UserWarning) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s__IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "sfml/audio.pyx":49
 * cdef class Listener:
 * 	def __init__(self):
 * 		NotImplementedError("This class is not meant to be instanciated!")             # <<<<<<<<<<<<<<
 * 
 * 	@classmethod
 */
  __pyx_k_tuple_2 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_1)); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "sfml/audio.pyx":110
 * 
 * 			if len(bdata) % 2:
 * 				raise ValueError("Chunk data lenght must be even as it represents a 16bit array")             # <<<<<<<<<<<<<<
 * 
 * 			if self.delete_this:
 */
  __pyx_k_tuple_4 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_3)); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_4);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "sfml/audio.pyx":146
 * 
 * 	def __init__(self):
 * 		raise UserWarning("Use specific methods")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_k_tuple_6 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_5)); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_6);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "sfml/audio.pyx":159
 * 		cdef char* encoded_filename
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		encoded_filename = encoded_filename_temporary
 * 
 */
  __pyx_k_tuple_8 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_8);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "sfml/audio.pyx":189
 * 		cdef char* encoded_filename
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		encoded_filename = encoded_filename_temporary
 * 
 */
  __pyx_k_tuple_9 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_9);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "sfml/audio.pyx":230
 * 
 * 	def __init__(self, *args, **kwargs):
 * 		raise UserWarning("This class is not meant to be used directly")             # <<<<<<<<<<<<<<
 * 
 * 	property pitch:
 */
  __pyx_k_tuple_11 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_11);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "sfml/audio.pyx":336
 * 	def __init__(self):
 * 		if self.__class__ == SoundStream:
 * 			raise NotImplementedError("SoundStream is abstract")             # <<<<<<<<<<<<<<
 * 
 * 		elif self.__class__ not in [Music]:
 */
  __pyx_k_tuple_14 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_13)); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_14);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "sfml/audio.pyx":390
 * 
 * 	def __init__(self):
 * 		raise UserWarning("Use specific constructor")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_k_tuple_16 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_15)); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_16);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "sfml/audio.pyx":400
 * 		cdef char* encoded_filename
 * 
 * 		encoded_filename_temporary = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		encoded_filename = encoded_filename_temporary
 * 
 */
  __pyx_k_tuple_17 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_17);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "sfml/audio.pyx":437
 * 	def __init__(self):
 * 		if self.__class__ == SoundRecorder:
 * 			raise NotImplementedError("SoundRecorder is abstract")             # <<<<<<<<<<<<<<
 * 
 * 		elif self.__class__ is not SoundBufferRecorder:
 */
  __pyx_k_tuple_19 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_18)); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_19);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initaudio(void); /*proto*/
PyMODINIT_FUNC initaudio(void)
#else
PyMODINIT_FUNC PyInit_audio(void); /*proto*/
PyMODINIT_FUNC PyInit_audio(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_audio(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("audio"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "sfml.audio")) {
      if (unlikely(PyDict_SetItemString(modules, "sfml.audio", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_sfml__audio) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("create_chunk", (void (*)(void))__pyx_f_4sfml_5audio_create_chunk, "PyObject *(void)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("terminate_chunk", (void (*)(void))__pyx_f_4sfml_5audio_terminate_chunk, "sf::Int16 *(PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("wrap_chunk", (void (*)(void))__pyx_f_4sfml_5audio_wrap_chunk, "PyObject *(sf::Int16 *, unsigned int, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4sfml_5audio_Listener) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Listener", (PyObject *)&__pyx_type_4sfml_5audio_Listener) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_Listener = &__pyx_type_4sfml_5audio_Listener;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_Chunk) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Chunk", (PyObject *)&__pyx_type_4sfml_5audio_Chunk) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_Chunk = &__pyx_type_4sfml_5audio_Chunk;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_SoundBuffer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundBuffer", (PyObject *)&__pyx_type_4sfml_5audio_SoundBuffer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_SoundBuffer = &__pyx_type_4sfml_5audio_SoundBuffer;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_SoundSource) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundSource", (PyObject *)&__pyx_type_4sfml_5audio_SoundSource) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_SoundSource = &__pyx_type_4sfml_5audio_SoundSource;
  __pyx_type_4sfml_5audio_Sound.tp_base = __pyx_ptype_4sfml_5audio_SoundSource;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_Sound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Sound", (PyObject *)&__pyx_type_4sfml_5audio_Sound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_Sound = &__pyx_type_4sfml_5audio_Sound;
  __pyx_type_4sfml_5audio_SoundStream.tp_base = __pyx_ptype_4sfml_5audio_SoundSource;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_SoundStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundStream", (PyObject *)&__pyx_type_4sfml_5audio_SoundStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_SoundStream = &__pyx_type_4sfml_5audio_SoundStream;
  __pyx_type_4sfml_5audio_Music.tp_base = __pyx_ptype_4sfml_5audio_SoundStream;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_Music) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Music", (PyObject *)&__pyx_type_4sfml_5audio_Music) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_Music = &__pyx_type_4sfml_5audio_Music;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_SoundRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundRecorder", (PyObject *)&__pyx_type_4sfml_5audio_SoundRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_SoundRecorder = &__pyx_type_4sfml_5audio_SoundRecorder;
  __pyx_type_4sfml_5audio_SoundBufferRecorder.tp_base = __pyx_ptype_4sfml_5audio_SoundRecorder;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_SoundBufferRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundBufferRecorder", (PyObject *)&__pyx_type_4sfml_5audio_SoundBufferRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_SoundBufferRecorder = &__pyx_type_4sfml_5audio_SoundBufferRecorder;
  /*--- Type import code ---*/
  __pyx_ptype_6pysfml_6system_Time = __Pyx_ImportType("sfml.system", "Time", sizeof(struct PyTimeObject), 0); if (unlikely(!__pyx_ptype_6pysfml_6system_Time)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysfml_6system_Vector2 = __Pyx_ImportType("sfml.system", "Vector2", sizeof(struct PyVector2Object), 0); if (unlikely(!__pyx_ptype_6pysfml_6system_Vector2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysfml_6system_Vector3 = __Pyx_ImportType("sfml.system", "Vector3", sizeof(struct PyVector3Object), 0); if (unlikely(!__pyx_ptype_6pysfml_6system_Vector3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "sfml/audio.pyx":27
 * 	object popLastErrorMessage()
 * 	int import_sfml__system()
 * import_sfml__system()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "DerivableSoundStream.hpp":
 */
  import_sfml__system();

  /* "sfml/audio.pyx":52
 * 
 * 	@classmethod
 * 	def get_global_volume(cls):             # <<<<<<<<<<<<<<
 * 		return sf.listener.getGlobalVolume()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Listener, __pyx_n_s__get_global_volume); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Listener->tp_dict, __pyx_n_s__get_global_volume, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Listener);

  /* "sfml/audio.pyx":56
 * 
 * 	@classmethod
 * 	def set_global_volume(cls, float volume):             # <<<<<<<<<<<<<<
 * 		sf.listener.setGlobalVolume(volume)
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Listener, __pyx_n_s__set_global_volume); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Listener->tp_dict, __pyx_n_s__set_global_volume, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Listener);

  /* "sfml/audio.pyx":60
 * 
 * 	@classmethod
 * 	def get_position(cls):             # <<<<<<<<<<<<<<
 * 		cdef Vector3f v = sf.listener.getPosition()
 * 		return to_vector3(&v)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Listener, __pyx_n_s__get_position); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Listener->tp_dict, __pyx_n_s__get_position, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Listener);

  /* "sfml/audio.pyx":65
 * 
 * 	@classmethod
 * 	def set_position(cls, position):             # <<<<<<<<<<<<<<
 * 		x, y, z = position
 * 		sf.listener.setPosition(x, y, z)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Listener, __pyx_n_s__set_position); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Listener->tp_dict, __pyx_n_s__set_position, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Listener);

  /* "sfml/audio.pyx":70
 * 
 * 	@classmethod
 * 	def get_direction(cls):             # <<<<<<<<<<<<<<
 * 		cdef Vector3f v = sf.listener.getDirection()
 * 		return to_vector3(&v)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Listener, __pyx_n_s__get_direction); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Listener->tp_dict, __pyx_n_s__get_direction, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Listener);

  /* "sfml/audio.pyx":75
 * 
 * 	@classmethod
 * 	def set_direction(cls, direction):             # <<<<<<<<<<<<<<
 * 		x, y, z = direction
 * 		sf.listener.setDirection(x, y, z)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Listener, __pyx_n_s__set_direction); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Listener->tp_dict, __pyx_n_s__set_direction, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Listener);

  /* "sfml/audio.pyx":155
 * 
 * 	@classmethod
 * 	def from_file(cls, filename):             # <<<<<<<<<<<<<<
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 		cdef char* encoded_filename
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_SoundBuffer, __pyx_n_s__from_file); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_SoundBuffer->tp_dict, __pyx_n_s__from_file, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_SoundBuffer);

  /* "sfml/audio.pyx":168
 * 
 * 	@classmethod
 * 	def from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_SoundBuffer, __pyx_n_s__from_memory); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_SoundBuffer->tp_dict, __pyx_n_s__from_memory, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_SoundBuffer);

  /* "sfml/audio.pyx":177
 * 
 * 	@classmethod
 * 	def from_samples(cls, Chunk samples, unsigned int channel_count, unsigned int sample_rate):             # <<<<<<<<<<<<<<
 * 		cdef sf.SoundBuffer *p = new sf.SoundBuffer()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_SoundBuffer, __pyx_n_s__from_samples); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_SoundBuffer->tp_dict, __pyx_n_s__from_samples, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_SoundBuffer);

  /* "sfml/audio.pyx":223
 * 
 * cdef class SoundSource:
 * 	STOPPED = sf.soundsource.Stopped             # <<<<<<<<<<<<<<
 * 	PAUSED = sf.soundsource.Paused
 * 	PLAYING = sf.soundsource.Playing
 */
  __pyx_t_2 = PyInt_FromLong(sf::SoundSource::Stopped); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_SoundSource->tp_dict, __pyx_n_s__STOPPED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_SoundSource);

  /* "sfml/audio.pyx":224
 * cdef class SoundSource:
 * 	STOPPED = sf.soundsource.Stopped
 * 	PAUSED = sf.soundsource.Paused             # <<<<<<<<<<<<<<
 * 	PLAYING = sf.soundsource.Playing
 * 
 */
  __pyx_t_2 = PyInt_FromLong(sf::SoundSource::Paused); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_SoundSource->tp_dict, __pyx_n_s__PAUSED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_SoundSource);

  /* "sfml/audio.pyx":225
 * 	STOPPED = sf.soundsource.Stopped
 * 	PAUSED = sf.soundsource.Paused
 * 	PLAYING = sf.soundsource.Playing             # <<<<<<<<<<<<<<
 * 
 * 	cdef sf.SoundSource *p_soundsource
 */
  __pyx_t_2 = PyInt_FromLong(sf::SoundSource::Playing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_SoundSource->tp_dict, __pyx_n_s__PLAYING, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_SoundSource);

  /* "sfml/audio.pyx":396
 * 
 * 	@classmethod
 * 	def from_file(cls, filename):             # <<<<<<<<<<<<<<
 * 		cdef sf.Music *p = new sf.Music()
 * 		cdef char* encoded_filename
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Music, __pyx_n_s__from_file); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Music->tp_dict, __pyx_n_s__from_file, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Music);

  /* "sfml/audio.pyx":409
 * 
 * 	@classmethod
 * 	def from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 * 		cdef sf.Music *p = new sf.Music()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_Music, __pyx_n_s__from_memory); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_Music->tp_dict, __pyx_n_s__from_memory, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_Music);

  /* "sfml/audio.pyx":457
 * 
 * 	@classmethod
 * 	def is_available(cls):             # <<<<<<<<<<<<<<
 * 		return sf.soundrecorder.isAvailable()
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_4sfml_5audio_SoundRecorder, __pyx_n_s__is_available); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_SoundRecorder->tp_dict, __pyx_n_s__is_available, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_SoundRecorder);

  /* "sfml/audio.pyx":1
 * #!/usr/bin/env python3             # <<<<<<<<<<<<<<
 * # -*- coding: utf-8 -*-
 * #
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "pysfml/system.pxd":49
 * 	return sf.Vector3f(w, h, z)
 * 
 * cdef inline Vector3 to_vector3(sf.Vector3f* vector):             # <<<<<<<<<<<<<<
 * 	return Vector3(vector.x, vector.y, vector.z)
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init sfml.audio", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init sfml.audio");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        } else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static CYTHON_INLINE sf::Int16 __Pyx_PyInt_from_py_sf__Int16(PyObject* x) {
    const sf::Int16 neg_one = (sf::Int16)-1, const_zero = (sf::Int16)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(sf::Int16) == sizeof(char)) {
        if (is_unsigned)
            return (sf::Int16)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (sf::Int16)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(sf::Int16) == sizeof(short)) {
        if (is_unsigned)
            return (sf::Int16)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (sf::Int16)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(sf::Int16) == sizeof(int)) {
        if (is_unsigned)
            return (sf::Int16)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (sf::Int16)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(sf::Int16) == sizeof(long)) {
        if (is_unsigned)
            return (sf::Int16)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (sf::Int16)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(sf::Int16) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (sf::Int16)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (sf::Int16)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
        #else
        sf::Int16 val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_MAJOR_VERSION < 3
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        #endif
        return (sf::Int16)-1;
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Int16(sf::Int16 val) {
    const sf::Int16 neg_one = (sf::Int16)-1, const_zero = (sf::Int16)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(sf::Int16) == sizeof(char))  ||
        (sizeof(sf::Int16) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(sf::Int16) == sizeof(int)) ||
               (sizeof(sf::Int16) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(sf::Int16) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(sf::Int16),
                                     little, !is_unsigned);
    }
}

static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) { /* cdef classes */
        return PyClassMethod_New(method);
    }
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = __Pyx_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) { /* cdef classes */
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) { /* python classes */
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (PyObject_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "Class-level classmethod() can only be called on "
                 "a method_descriptor or instance method.");
    return NULL;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (r < 0) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       if ((val != (unsigned PY_LONG_LONG)-1) || !PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
