/* Generated by Cython 0.16 on Thu May 10 00:33:30 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif

#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif

#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCFunction_Call PyObject_Call
#else
  #define __Pyx_PyCFunction_Call PyCFunction_Call
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)

  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif

#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif


#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_GET_LENGTH)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__sfml__audio__audio
#define __PYX_HAVE_API__sfml__audio__audio
#include "stdlib.h"
#include <string>
#include "SFML/System.hpp"
#include "SFML/Graphics.hpp"
#include "SFML/Audio.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "audio.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_4sfml_5audio_5audio_SoundSource;
struct __pyx_obj_4sfml_5audio_5audio_SoundStream;
struct __pyx_obj_4sfml_5audio_5audio_Music;
struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder;
struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder;
struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer;
struct __pyx_obj_4sfml_5audio_5audio_Listener;
struct __pyx_obj_4sfml_5audio_5audio_Sound;

/* "declaudio.pxd":102
 *         SoundBuffer& GetBuffer()
 * 
 * ctypedef SoundBuffer const_SoundBuffer "const SoundBuffer"             # <<<<<<<<<<<<<<
 */
typedef sf::SoundBuffer const SoundBuffer;

/* "sfml/audio/audio.pyx":147
 * 
 * 
 * cdef class SoundSource:             # <<<<<<<<<<<<<<
 *     STOPPED = declaudio.sound_source.Stopped
 *     PAUSED = declaudio.sound_source.Paused
 */
struct __pyx_obj_4sfml_5audio_5audio_SoundSource {
  PyObject_HEAD
  sf::SoundSource *thisptr;
};


/* "sfml/audio/audio.pyx":265
 * 
 * 
 * cdef class SoundStream(SoundSource):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == SoundStream:
 */
struct __pyx_obj_4sfml_5audio_5audio_SoundStream {
  struct __pyx_obj_4sfml_5audio_5audio_SoundSource __pyx_base;
};


/* "sfml/audio/audio.pyx":306
 * 
 * 
 * cdef class Music(SoundStream):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         raise NotImplementedError("Use class methods like open_from_file() or open_from_memory() to create Music objects")
 */
struct __pyx_obj_4sfml_5audio_5audio_Music {
  struct __pyx_obj_4sfml_5audio_5audio_SoundStream __pyx_base;
};


/* "sfml/audio/audio.pyx":344
 * 
 * 
 * cdef class SoundRecorder:             # <<<<<<<<<<<<<<
 *     cdef declaudio.SoundRecorder *thisptr
 * 
 */
struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder {
  PyObject_HEAD
  sf::SoundRecorder *thisptr;
};


/* "sfml/audio/audio.pyx":368
 * 
 * 
 * cdef class SoundBufferRecorder(SoundRecorder):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declaudio.SoundRecorder*>new declaudio.SoundBufferRecorder()
 */
struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder {
  struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder __pyx_base;
};


/* "sfml/audio/audio.pyx":54
 * 
 * 
 * cdef class SoundBuffer:             # <<<<<<<<<<<<<<
 *     cdef declaudio.const_SoundBuffer *p_this
 *     cdef bint delete_this
 */
struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer {
  PyObject_HEAD
  const SoundBuffer *p_this;
  int delete_this;
};


/* "sfml/audio/audio.pyx":27
 * 
 * 
 * cdef class Listener:             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         NotImplementedError("This class can't be instanciated!")
 */
struct __pyx_obj_4sfml_5audio_5audio_Listener {
  PyObject_HEAD
};


/* "sfml/audio/audio.pyx":201
 * 
 * 
 * cdef class Sound(SoundSource):             # <<<<<<<<<<<<<<
 *     cdef SoundBuffer buffer
 * 
 */
struct __pyx_obj_4sfml_5audio_5audio_Sound {
  struct __pyx_obj_4sfml_5audio_5audio_SoundSource __pyx_base;
  struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *buffer;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_tp_new(PyObject* type_obj) {
    return (PyObject*) (((PyTypeObject*)(type_obj))->tp_new(
        (PyTypeObject*)(type_obj), __pyx_empty_tuple, NULL));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Uint32(sf::Uint32);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Int16(sf::Int16);

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'declsystem' */

/* Module declarations from 'sfml.audio.listener' */

/* Module declarations from 'sfml.audio.sound_source' */

/* Module declarations from 'sfml.audio.sound_recorder' */

/* Module declarations from 'sfml.audio.declaudio' */

/* Module declarations from 'sfml.audio.audio' */
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_Listener = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_SoundBuffer = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_SoundSource = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_Sound = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_SoundStream = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_Music = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_SoundRecorder = 0;
static PyTypeObject *__pyx_ptype_4sfml_5audio_5audio_SoundBufferRecorder = 0;
static struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_f_4sfml_5audio_5audio_wrap_sound_buffer_instance(sf::SoundBuffer *, int); /*proto*/
static struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_f_4sfml_5audio_5audio_wrap_music_instance(sf::Music *); /*proto*/
#define __Pyx_MODULE_NAME "sfml.audio.audio"
int __pyx_module_is_main_sfml__audio__audio = 0;

/* Implementation of 'sfml.audio.audio' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_NotImplemented;
static int __pyx_pf_4sfml_5audio_5audio_8Listener___cinit__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Listener *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_8Listener_2get_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_8Listener_4set_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls, float __pyx_v_volume); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_8Listener_6set_position(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundBuffer___init__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self); /* proto */
static void __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_2__dealloc__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_14channels_count___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_8duration___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_7samples___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_13samples_count___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_4load_from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_6load_from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_8load_from_samples(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_samples, unsigned int __pyx_v_channels_count, unsigned int __pyx_v_sample_rate); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_10save_to_file(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self, char *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_5pitch___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_5pitch_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_6volume___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_6volume_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_8position___get__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_8position_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_20relative_to_listener___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_12min_distance___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_12min_distance_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_11attenuation___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_11attenuation_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_5Sound___cinit__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_buffer); /* proto */
static void __pyx_pf_4sfml_5audio_5audio_5Sound_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_6buffer___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_5Sound_6buffer_2__set__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_4loop___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_5Sound_4loop_2__set__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_5Sound_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_6status___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_4pause(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_6play(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_8stop(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundStream___cinit__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_14channels_count___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_6status___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundStream_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_4loop___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_11SoundStream_4loop_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_2play(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_4pause(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_6stop(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_5Music___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_v_self); /* proto */
static void __pyx_pf_4sfml_5audio_5audio_5Music_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Music_8duration___get__(struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Music_4open_from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, char *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_5Music_6open_from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_13SoundRecorder___cinit__(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_4sfml_5audio_5audio_13SoundRecorder_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_4start(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self, unsigned int __pyx_v_sampleRate); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_6stop(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_8is_available(CYTHON_UNUSED PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self); /* proto */
static int __pyx_pf_4sfml_5audio_5audio_19SoundBufferRecorder___cinit__(struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4sfml_5audio_5audio_19SoundBufferRecorder_2get_buffer(struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder *__pyx_v_self); /* proto */
static char __pyx_k_1[] = "This class can't be instanciated!";
static char __pyx_k_3[] = "Use static methods like load_from_file to create SoundBuffer instances";
static char __pyx_k_5[] = "UTF-8";
static char __pyx_k_7[] = "SoundStream is abstract";
static char __pyx_k_9[] = "Use class methods like open_from_file() or open_from_memory() to create Music objects";
static char __pyx_k_11[] = "SoundRecorder is abstract";
static char __pyx_k_13[] = "sfml.audio.audio";
static char __pyx_k__x[] = "x";
static char __pyx_k__y[] = "y";
static char __pyx_k__z[] = "z";
static char __pyx_k__range[] = "range";
static char __pyx_k__PAUSED[] = "PAUSED";
static char __pyx_k__buffer[] = "buffer";
static char __pyx_k__encode[] = "encode";
static char __pyx_k__PLAYING[] = "PLAYING";
static char __pyx_k__STOPPED[] = "STOPPED";
static char __pyx_k__samples[] = "samples";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k____class__[] = "__class__";
static char __pyx_k__sampleRate[] = "sampleRate";
static char __pyx_k__sample_rate[] = "sample_rate";
static char __pyx_k__is_available[] = "is_available";
static char __pyx_k__set_position[] = "set_position";
static char __pyx_k__SFMLException[] = "SFMLException";
static char __pyx_k__NotImplemented[] = "NotImplemented";
static char __pyx_k__channels_count[] = "channels_count";
static char __pyx_k__load_from_file[] = "load_from_file";
static char __pyx_k__open_from_file[] = "open_from_file";
static char __pyx_k__load_from_memory[] = "load_from_memory";
static char __pyx_k__open_from_memory[] = "open_from_memory";
static char __pyx_k__get_global_volume[] = "get_global_volume";
static char __pyx_k__load_from_samples[] = "load_from_samples";
static char __pyx_k__set_global_volume[] = "set_global_volume";
static char __pyx_k__NotImplementedError[] = "NotImplementedError";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_n_s_13;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__NotImplemented;
static PyObject *__pyx_n_s__NotImplementedError;
static PyObject *__pyx_n_s__PAUSED;
static PyObject *__pyx_n_s__PLAYING;
static PyObject *__pyx_n_s__SFMLException;
static PyObject *__pyx_n_s__STOPPED;
static PyObject *__pyx_n_s____class__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__buffer;
static PyObject *__pyx_n_s__channels_count;
static PyObject *__pyx_n_s__encode;
static PyObject *__pyx_n_s__get_global_volume;
static PyObject *__pyx_n_s__is_available;
static PyObject *__pyx_n_s__load_from_file;
static PyObject *__pyx_n_s__load_from_memory;
static PyObject *__pyx_n_s__load_from_samples;
static PyObject *__pyx_n_s__open_from_file;
static PyObject *__pyx_n_s__open_from_memory;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__sampleRate;
static PyObject *__pyx_n_s__sample_rate;
static PyObject *__pyx_n_s__samples;
static PyObject *__pyx_n_s__set_global_volume;
static PyObject *__pyx_n_s__set_position;
static PyObject *__pyx_n_s__x;
static PyObject *__pyx_n_s__y;
static PyObject *__pyx_n_s__z;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_12;

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_8Listener_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_8Listener_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_8Listener___cinit__(((struct __pyx_obj_4sfml_5audio_5audio_Listener *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":28
 * 
 * cdef class Listener:
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         NotImplementedError("This class can't be instanciated!")
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_8Listener___cinit__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Listener *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sfml/audio/audio.pyx":29
 * cdef class Listener:
 *     def __cinit__(self, *args, **kwargs):
 *         NotImplementedError("This class can't be instanciated!")             # <<<<<<<<<<<<<<
 * 
 *     ## The six following static method should be static properties.
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.Listener.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_8Listener_3get_global_volume(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_8Listener_3get_global_volume(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_volume (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_8Listener_2get_global_volume(((PyObject*)__pyx_v_cls));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":33
 *     ## The six following static method should be static properties.
 *     @classmethod
 *     def get_global_volume(cls):             # <<<<<<<<<<<<<<
 *         return declaudio.listener.GetGlobalVolume()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_8Listener_2get_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_global_volume", 0);

  /* "sfml/audio/audio.pyx":34
 *     @classmethod
 *     def get_global_volume(cls):
 *         return declaudio.listener.GetGlobalVolume()             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(sf::Listener::GetGlobalVolume()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.Listener.get_global_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_8Listener_5set_global_volume(PyObject *__pyx_v_cls, PyObject *__pyx_arg_volume); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_8Listener_5set_global_volume(PyObject *__pyx_v_cls, PyObject *__pyx_arg_volume) {
  float __pyx_v_volume;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_global_volume (wrapper)", 0);
  assert(__pyx_arg_volume); {
    __pyx_v_volume = __pyx_PyFloat_AsFloat(__pyx_arg_volume); if (unlikely((__pyx_v_volume == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.Listener.set_global_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_8Listener_4set_global_volume(((PyObject*)__pyx_v_cls), ((float)__pyx_v_volume));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":37
 * 
 *     @classmethod
 *     def set_global_volume(cls, float volume):             # <<<<<<<<<<<<<<
 *         declaudio.listener.SetGlobalVolume(volume)
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_8Listener_4set_global_volume(CYTHON_UNUSED PyObject *__pyx_v_cls, float __pyx_v_volume) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_global_volume", 0);

  /* "sfml/audio/audio.pyx":38
 *     @classmethod
 *     def set_global_volume(cls, float volume):
 *         declaudio.listener.SetGlobalVolume(volume)             # <<<<<<<<<<<<<<
 * 
 *     #@classmethod
 */
  sf::Listener::SetGlobalVolume(__pyx_v_volume);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_8Listener_7set_position(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_8Listener_7set_position(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_z = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__z,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_position (wrapper)", 0);
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_position", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__z);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_position", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_position") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_z = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_position", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.Listener.set_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_8Listener_6set_position(((PyObject*)__pyx_v_cls), __pyx_v_x, __pyx_v_y, __pyx_v_z);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":44
 * 
 *     @classmethod
 *     def set_position(cls, x, y, z):             # <<<<<<<<<<<<<<
 *         declaudio.listener.SetPosition(x, y, z)
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_8Listener_6set_position(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_position", 0);

  /* "sfml/audio/audio.pyx":45
 *     @classmethod
 *     def set_position(cls, x, y, z):
 *         declaudio.listener.SetPosition(x, y, z)             # <<<<<<<<<<<<<<
 * 
 *     ##@classmethod
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_y); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_z); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  sf::Listener::SetPosition(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.audio.audio.Listener.set_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer___init__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":58
 *     cdef bint delete_this
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delete_this = True
 *         raise NotImplementedError("Use static methods like load_from_file to create SoundBuffer instances")
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundBuffer___init__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio/audio.pyx":59
 * 
 *     def __init__(self):
 *         self.delete_this = True             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Use static methods like load_from_file to create SoundBuffer instances")
 * 
 */
  __pyx_v_self->delete_this = 1;

  /* "sfml/audio/audio.pyx":60
 *     def __init__(self):
 *         self.delete_this = True
 *         raise NotImplementedError("Use static methods like load_from_file to create SoundBuffer instances")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_2__dealloc__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio/audio.pyx":62
 *         raise NotImplementedError("Use static methods like load_from_file to create SoundBuffer instances")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_this:
 *             del self.p_this
 */

static void __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_2__dealloc__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio/audio.pyx":63
 * 
 *     def __dealloc__(self):
 *         if self.delete_this:             # <<<<<<<<<<<<<<
 *             del self.p_this
 * 
 */
  if (__pyx_v_self->delete_this) {

    /* "sfml/audio/audio.pyx":64
 *     def __dealloc__(self):
 *         if self.delete_this:
 *             del self.p_this             # <<<<<<<<<<<<<<
 * 
 *     property channels_count:
 */
    delete __pyx_v_self->p_this;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_14channels_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_14channels_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_14channels_count___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":67
 * 
 *     property channels_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.p_this.GetChannelsCount()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_14channels_count___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":68
 *     property channels_count:
 *         def __get__(self):
 *             return self.p_this.GetChannelsCount()             # <<<<<<<<<<<<<<
 * 
 *     property duration:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->p_this->GetChannelsCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.channels_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_8duration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_8duration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_8duration___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":71
 * 
 *     property duration:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.p_this.GetDuration()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_8duration___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":72
 *     property duration:
 *         def __get__(self):
 *             return self.p_this.GetDuration()             # <<<<<<<<<<<<<<
 * 
 *     property sample_rate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_sf__Uint32(__pyx_v_self->p_this->GetDuration()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.duration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_11sample_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_11sample_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_11sample_rate___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":75
 * 
 *     property sample_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.p_this.GetSampleRate()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":76
 *     property sample_rate:
 *         def __get__(self):
 *             return self.p_this.GetSampleRate()             # <<<<<<<<<<<<<<
 * 
 *     property samples:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->p_this->GetSampleRate()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.sample_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_7samples_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_7samples_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_7samples___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":79
 * 
 *     property samples:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef declaudio.Int16 *p = <declaudio.Int16*>self.p_this.GetSamples()
 *             cdef unsigned int i
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_7samples___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self) {
  sf::Int16 *__pyx_v_p;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":80
 *     property samples:
 *         def __get__(self):
 *             cdef declaudio.Int16 *p = <declaudio.Int16*>self.p_this.GetSamples()             # <<<<<<<<<<<<<<
 *             cdef unsigned int i
 *             ret = []
 */
  __pyx_v_p = ((sf::Int16 *)__pyx_v_self->p_this->GetSamples());

  /* "sfml/audio/audio.pyx":82
 *             cdef declaudio.Int16 *p = <declaudio.Int16*>self.p_this.GetSamples()
 *             cdef unsigned int i
 *             ret = []             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.p_this.GetSamplesCount()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "sfml/audio/audio.pyx":84
 *             ret = []
 * 
 *             for i in range(self.p_this.GetSamplesCount()):             # <<<<<<<<<<<<<<
 *                 ret.append(int(p[i]))
 * 
 */
  __pyx_t_2 = __pyx_v_self->p_this->GetSamplesCount();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "sfml/audio/audio.pyx":85
 * 
 *             for i in range(self.p_this.GetSamplesCount()):
 *                 ret.append(int(p[i]))             # <<<<<<<<<<<<<<
 * 
 *             return ret
 */
    __pyx_t_1 = __Pyx_PyInt_to_py_sf__Int16((__pyx_v_p[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_5 = PyList_Append(__pyx_v_ret, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "sfml/audio/audio.pyx":87
 *                 ret.append(int(p[i]))
 * 
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *     property samples_count:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.samples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_13samples_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_13samples_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_13samples_count___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":90
 * 
 *     property samples_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.p_this.GetSamplesCount()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_13samples_count___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":91
 *     property samples_count:
 *         def __get__(self):
 *             return self.p_this.GetSamplesCount()             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->p_this->GetSamplesCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.samples_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_5load_from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_5load_from_file(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_4load_from_file(((PyObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":94
 * 
 *     @classmethod
 *     def load_from_file(cls, filename):             # <<<<<<<<<<<<<<
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_4load_from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  sf::SoundBuffer *__pyx_v_p;
  PyObject *__pyx_v_bFilename = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_from_file", 0);

  /* "sfml/audio/audio.pyx":95
 *     @classmethod
 *     def load_from_file(cls, filename):
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()             # <<<<<<<<<<<<<<
 * 
 *         bFilename = filename.encode('UTF-8')
 */
  __pyx_v_p = new sf::SoundBuffer();

  /* "sfml/audio/audio.pyx":97
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()
 * 
 *         bFilename = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if p.LoadFromFile(bFilename):
 *             return wrap_sound_buffer_instance(p, True)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bFilename = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "sfml/audio/audio.pyx":98
 * 
 *         bFilename = filename.encode('UTF-8')
 *         if p.LoadFromFile(bFilename):             # <<<<<<<<<<<<<<
 *             return wrap_sound_buffer_instance(p, True)
 * 
 */
  __pyx_t_3 = PyBytes_AsString(__pyx_v_bFilename); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_v_p->LoadFromFile(__pyx_t_3);
  if (__pyx_t_4) {

    /* "sfml/audio/audio.pyx":99
 *         bFilename = filename.encode('UTF-8')
 *         if p.LoadFromFile(bFilename):
 *             return wrap_sound_buffer_instance(p, True)             # <<<<<<<<<<<<<<
 * 
 *         raise SFMLException()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4sfml_5audio_5audio_wrap_sound_buffer_instance(__pyx_v_p, 1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio/audio.pyx":101
 *             return wrap_sound_buffer_instance(p, True)
 * 
 *         raise SFMLException()             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__SFMLException); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.load_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bFilename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_7load_from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_7load_from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_from_memory (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_6load_from_memory(((PyObject*)__pyx_v_cls), ((PyObject*)__pyx_v_data));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":104
 * 
 *     @classmethod
 *     def load_from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_6load_from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  sf::SoundBuffer *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_from_memory", 0);

  /* "sfml/audio/audio.pyx":105
 *     @classmethod
 *     def load_from_memory(cls, bytes data):
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()             # <<<<<<<<<<<<<<
 * 
 *         if p.LoadFromMemory(<char*>data, len(data)):
 */
  __pyx_v_p = new sf::SoundBuffer();

  /* "sfml/audio/audio.pyx":107
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()
 * 
 *         if p.LoadFromMemory(<char*>data, len(data)):             # <<<<<<<<<<<<<<
 *             return wrap_sound_buffer_instance(p, True)
 * 
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); 
  __pyx_t_3 = __pyx_v_p->LoadFromMemory(((char *)__pyx_t_1), __pyx_t_2);
  if (__pyx_t_3) {

    /* "sfml/audio/audio.pyx":108
 * 
 *         if p.LoadFromMemory(<char*>data, len(data)):
 *             return wrap_sound_buffer_instance(p, True)             # <<<<<<<<<<<<<<
 * 
 *         raise SFMLException()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = ((PyObject *)__pyx_f_4sfml_5audio_5audio_wrap_sound_buffer_instance(__pyx_v_p, 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio/audio.pyx":110
 *             return wrap_sound_buffer_instance(p, True)
 * 
 *         raise SFMLException()             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__SFMLException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_5, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.load_from_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_9load_from_samples(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_9load_from_samples(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_samples = 0;
  unsigned int __pyx_v_channels_count;
  unsigned int __pyx_v_sample_rate;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__samples,&__pyx_n_s__channels_count,&__pyx_n_s__sample_rate,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_from_samples (wrapper)", 0);
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__samples);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__channels_count);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load_from_samples", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_rate);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load_from_samples", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_from_samples") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_samples = ((PyObject*)values[0]);
    __pyx_v_channels_count = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_channels_count == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sample_rate = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_sample_rate == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_from_samples", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.load_from_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_samples), (&PyList_Type), 1, "samples", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_8load_from_samples(((PyObject*)__pyx_v_cls), __pyx_v_samples, __pyx_v_channels_count, __pyx_v_sample_rate);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":113
 * 
 *     @classmethod
 *     def load_from_samples(cls, list samples, unsigned int channels_count, unsigned int sample_rate):             # <<<<<<<<<<<<<<
 *         cdef declaudio.SoundBuffer *p_sb = new declaudio.SoundBuffer()
 *         cdef declaudio.Int16 *p_samples = <declaudio.Int16*>malloc(len(samples) * sizeof(declaudio.Int16))
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_8load_from_samples(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_samples, unsigned int __pyx_v_channels_count, unsigned int __pyx_v_sample_rate) {
  sf::SoundBuffer *__pyx_v_p_sb;
  sf::Int16 *__pyx_v_p_samples;
  sf::Int16 *__pyx_v_p_temp;
  PyObject *__pyx_v_sample = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_from_samples", 0);

  /* "sfml/audio/audio.pyx":114
 *     @classmethod
 *     def load_from_samples(cls, list samples, unsigned int channels_count, unsigned int sample_rate):
 *         cdef declaudio.SoundBuffer *p_sb = new declaudio.SoundBuffer()             # <<<<<<<<<<<<<<
 *         cdef declaudio.Int16 *p_samples = <declaudio.Int16*>malloc(len(samples) * sizeof(declaudio.Int16))
 *         cdef declaudio.Int16 *p_temp = NULL
 */
  __pyx_v_p_sb = new sf::SoundBuffer();

  /* "sfml/audio/audio.pyx":115
 *     def load_from_samples(cls, list samples, unsigned int channels_count, unsigned int sample_rate):
 *         cdef declaudio.SoundBuffer *p_sb = new declaudio.SoundBuffer()
 *         cdef declaudio.Int16 *p_samples = <declaudio.Int16*>malloc(len(samples) * sizeof(declaudio.Int16))             # <<<<<<<<<<<<<<
 *         cdef declaudio.Int16 *p_temp = NULL
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_samples) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyList_GET_SIZE(((PyObject *)__pyx_v_samples)); 
  __pyx_v_p_samples = ((sf::Int16 *)malloc((__pyx_t_1 * (sizeof(sf::Int16)))));

  /* "sfml/audio/audio.pyx":116
 *         cdef declaudio.SoundBuffer *p_sb = new declaudio.SoundBuffer()
 *         cdef declaudio.Int16 *p_samples = <declaudio.Int16*>malloc(len(samples) * sizeof(declaudio.Int16))
 *         cdef declaudio.Int16 *p_temp = NULL             # <<<<<<<<<<<<<<
 * 
 *         if p_samples == NULL:
 */
  __pyx_v_p_temp = NULL;

  /* "sfml/audio/audio.pyx":118
 *         cdef declaudio.Int16 *p_temp = NULL
 * 
 *         if p_samples == NULL:             # <<<<<<<<<<<<<<
 *             raise SFMLException()
 *         else:
 */
  __pyx_t_2 = (__pyx_v_p_samples == NULL);
  if (__pyx_t_2) {

    /* "sfml/audio/audio.pyx":119
 * 
 *         if p_samples == NULL:
 *             raise SFMLException()             # <<<<<<<<<<<<<<
 *         else:
 *             p_temp = p_samples
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__SFMLException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "sfml/audio/audio.pyx":121
 *             raise SFMLException()
 *         else:
 *             p_temp = p_samples             # <<<<<<<<<<<<<<
 * 
 *             for sample in samples:
 */
    __pyx_v_p_temp = __pyx_v_p_samples;

    /* "sfml/audio/audio.pyx":123
 *             p_temp = p_samples
 * 
 *             for sample in samples:             # <<<<<<<<<<<<<<
 *                 p_temp[0] = <int>sample
 *                 preinc(p_temp)
 */
    if (unlikely(((PyObject *)__pyx_v_samples) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_4 = ((PyObject *)__pyx_v_samples); __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    for (;;) {
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
      __Pyx_XDECREF(__pyx_v_sample);
      __pyx_v_sample = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "sfml/audio/audio.pyx":124
 * 
 *             for sample in samples:
 *                 p_temp[0] = <int>sample             # <<<<<<<<<<<<<<
 *                 preinc(p_temp)
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_sample); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_p_temp[0]) = ((int)__pyx_t_5);

      /* "sfml/audio/audio.pyx":125
 *             for sample in samples:
 *                 p_temp[0] = <int>sample
 *                 preinc(p_temp)             # <<<<<<<<<<<<<<
 * 
 *             if p_sb.LoadFromSamples(p_samples, len(samples), channels_count, sample_rate):
 */
      (++__pyx_v_p_temp);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "sfml/audio/audio.pyx":127
 *                 preinc(p_temp)
 * 
 *             if p_sb.LoadFromSamples(p_samples, len(samples), channels_count, sample_rate):             # <<<<<<<<<<<<<<
 *                 free(p_samples)
 *                 return wrap_sound_buffer_instance(p_sb, True)
 */
    if (unlikely(((PyObject *)__pyx_v_samples) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = PyList_GET_SIZE(((PyObject *)__pyx_v_samples)); 
    __pyx_t_2 = __pyx_v_p_sb->LoadFromSamples(__pyx_v_p_samples, __pyx_t_1, __pyx_v_channels_count, __pyx_v_sample_rate);
    if (__pyx_t_2) {

      /* "sfml/audio/audio.pyx":128
 * 
 *             if p_sb.LoadFromSamples(p_samples, len(samples), channels_count, sample_rate):
 *                 free(p_samples)             # <<<<<<<<<<<<<<
 *                 return wrap_sound_buffer_instance(p_sb, True)
 *             else:
 */
      free(__pyx_v_p_samples);

      /* "sfml/audio/audio.pyx":129
 *             if p_sb.LoadFromSamples(p_samples, len(samples), channels_count, sample_rate):
 *                 free(p_samples)
 *                 return wrap_sound_buffer_instance(p_sb, True)             # <<<<<<<<<<<<<<
 *             else:
 *                 free(p_samples)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = ((PyObject *)__pyx_f_4sfml_5audio_5audio_wrap_sound_buffer_instance(__pyx_v_p_sb, 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "sfml/audio/audio.pyx":131
 *                 return wrap_sound_buffer_instance(p_sb, True)
 *             else:
 *                 free(p_samples)             # <<<<<<<<<<<<<<
 *                 raise SFMLException()
 * 
 */
      free(__pyx_v_p_samples);

      /* "sfml/audio/audio.pyx":132
 *             else:
 *                 free(p_samples)
 *                 raise SFMLException()             # <<<<<<<<<<<<<<
 * 
 *     def save_to_file(self, char* filename):
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__SFMLException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L6:;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.load_from_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sample);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_11save_to_file(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_11save_to_file(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_to_file (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundBuffer.save_to_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundBuffer_10save_to_file(((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_self), ((char *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":134
 *                 raise SFMLException()
 * 
 *     def save_to_file(self, char* filename):             # <<<<<<<<<<<<<<
 *         self.p_this.SaveToFile(filename)
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundBuffer_10save_to_file(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_self, char *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_to_file", 0);

  /* "sfml/audio/audio.pyx":135
 * 
 *     def save_to_file(self, char* filename):
 *         self.p_this.SaveToFile(filename)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->p_this->SaveToFile(__pyx_v_filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":138
 * 
 * 
 * cdef SoundBuffer wrap_sound_buffer_instance(declaudio.SoundBuffer *instance, bint delete_this):             # <<<<<<<<<<<<<<
 *     cdef SoundBuffer ret = SoundBuffer.__new__(SoundBuffer)
 * 
 */

static struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_f_4sfml_5audio_5audio_wrap_sound_buffer_instance(sf::SoundBuffer *__pyx_v_instance, int __pyx_v_delete_this) {
  struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_ret = 0;
  struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_sound_buffer_instance", 0);

  /* "sfml/audio/audio.pyx":139
 * 
 * cdef SoundBuffer wrap_sound_buffer_instance(declaudio.SoundBuffer *instance, bint delete_this):
 *     cdef SoundBuffer ret = SoundBuffer.__new__(SoundBuffer)             # <<<<<<<<<<<<<<
 * 
 *     ret.p_this = instance
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_5audio_SoundBuffer)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio/audio.pyx":141
 *     cdef SoundBuffer ret = SoundBuffer.__new__(SoundBuffer)
 * 
 *     ret.p_this = instance             # <<<<<<<<<<<<<<
 *     ret.delete_this = delete_this
 * 
 */
  __pyx_v_ret->p_this = __pyx_v_instance;

  /* "sfml/audio/audio.pyx":142
 * 
 *     ret.p_this = instance
 *     ret.delete_this = delete_this             # <<<<<<<<<<<<<<
 * 
 *     return ret
 */
  __pyx_v_ret->delete_this = __pyx_v_delete_this;

  /* "sfml/audio/audio.pyx":144
 *     ret.delete_this = delete_this
 * 
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.wrap_sound_buffer_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_5pitch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_5pitch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_5pitch___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":155
 * 
 *     property pitch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetPitch()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_5pitch___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":156
 *     property pitch:
 *         def __get__(self):
 *             return self.thisptr.GetPitch()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetPitch()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.pitch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.pitch.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_5pitch_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":158
 *             return self.thisptr.GetPitch()
 * 
 *         def __set__(self, float value):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetPitch(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_5pitch_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":159
 * 
 *         def __set__(self, float value):
 *             self.thisptr.SetPitch(value)             # <<<<<<<<<<<<<<
 * 
 *     property volume:
 */
  __pyx_v_self->thisptr->SetPitch(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_6volume_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_6volume_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_6volume___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":162
 * 
 *     property volume:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetVolume()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_6volume___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":163
 *     property volume:
 *         def __get__(self):
 *             return self.thisptr.GetVolume()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetVolume()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.volume.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_6volume_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_6volume_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.volume.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_6volume_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":165
 *             return self.thisptr.GetVolume()
 * 
 *         def __set__(self, float value):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetVolume(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_6volume_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":166
 * 
 *         def __set__(self, float value):
 *             self.thisptr.SetVolume(value)             # <<<<<<<<<<<<<<
 * 
 *     property position:
 */
  __pyx_v_self->thisptr->SetVolume(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_8position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_8position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_8position___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":169
 * 
 *     property position:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *             #cdef declaudio.Vector3f pos = self.thisptr.GetPosition()
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_8position___get__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":170
 *     property position:
 *         def __get__(self):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *             #cdef declaudio.Vector3f pos = self.thisptr.GetPosition()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_8position_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self), ((PyObject*)__pyx_v_value));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":175
 *             #return (pos.x, pos.y, pos.z)
 * 
 *         def __set__(self, tuple value):             # <<<<<<<<<<<<<<
 *             x, y, z = value
 *             self.thisptr.SetPosition(x, y, z)
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_8position_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  float __pyx_t_5;
  float __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":176
 * 
 *         def __set__(self, tuple value):
 *             x, y, z = value             # <<<<<<<<<<<<<<
 *             self.thisptr.SetPosition(x, y, z)
 * 
 */
  if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_value)))) {
    PyObject* sequence = ((PyObject *)__pyx_v_value);
    if (unlikely(PyTuple_GET_SIZE(sequence) != 3)) {
      if (PyTuple_GET_SIZE(sequence) > 3) __Pyx_RaiseTooManyValuesError(3);
      else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
  } else {
    __Pyx_UnpackTupleError(((PyObject *)__pyx_v_value), 3);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_z = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "sfml/audio/audio.pyx":177
 *         def __set__(self, tuple value):
 *             x, y, z = value
 *             self.thisptr.SetPosition(x, y, z)             # <<<<<<<<<<<<<<
 * 
 *     property relative_to_listener:
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_y); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_z); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr->SetPosition(__pyx_t_4, __pyx_t_5, __pyx_t_6);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.position.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_20relative_to_listener___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":180
 * 
 *     property relative_to_listener:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.IsRelativeToListener()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_20relative_to_listener___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":181
 *     property relative_to_listener:
 *         def __get__(self):
 *             return self.thisptr.IsRelativeToListener()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->IsRelativeToListener()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.relative_to_listener.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.relative_to_listener.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self), ((int)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":183
 *             return self.thisptr.IsRelativeToListener()
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetRelativeToListener(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":184
 * 
 *         def __set__(self, bint value):
 *             self.thisptr.SetRelativeToListener(value)             # <<<<<<<<<<<<<<
 * 
 *     property min_distance:
 */
  __pyx_v_self->thisptr->SetRelativeToListener(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_12min_distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_12min_distance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_12min_distance___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":187
 * 
 *     property min_distance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetMinDistance()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_12min_distance___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":188
 *     property min_distance:
 *         def __get__(self):
 *             return self.thisptr.GetMinDistance()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetMinDistance()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.min_distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_12min_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_12min_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.min_distance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_12min_distance_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":190
 *             return self.thisptr.GetMinDistance()
 * 
 *         def __set__(self, float value):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetMinDistance(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_12min_distance_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":191
 * 
 *         def __set__(self, float value):
 *             self.thisptr.SetMinDistance(value)             # <<<<<<<<<<<<<<
 * 
 *     property attenuation:
 */
  __pyx_v_self->thisptr->SetMinDistance(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_11attenuation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundSource_11attenuation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_11attenuation___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":194
 * 
 *     property attenuation:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetAttenuation()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundSource_11attenuation___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":195
 *     property attenuation:
 *         def __get__(self):
 *             return self.thisptr.GetAttenuation()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetAttenuation()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.attenuation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_11attenuation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundSource_11attenuation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundSource.attenuation.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundSource_11attenuation_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundSource *)__pyx_v_self), ((float)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":197
 *             return self.thisptr.GetAttenuation()
 * 
 *         def __set__(self, float value):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetAttenuation(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundSource_11attenuation_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundSource *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":198
 * 
 *         def __set__(self, float value):
 *             self.thisptr.SetAttenuation(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->SetAttenuation(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_5Sound_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_5Sound_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_buffer = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__buffer,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    PyObject* values[1] = {0};

    /* "sfml/audio/audio.pyx":204
 *     cdef SoundBuffer buffer
 * 
 *     def __cinit__(self, SoundBuffer buffer=None):             # <<<<<<<<<<<<<<
 *         if buffer is None:
 *             self.thisptr = <declaudio.SoundSource*>new declaudio.Sound()
 */
    values[0] = (PyObject *)((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__buffer);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buffer = ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.Sound.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_4sfml_5audio_5audio_SoundBuffer, 1, "buffer", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound___cinit__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self), __pyx_v_buffer);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sfml_5audio_5audio_5Sound___cinit__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sfml/audio/audio.pyx":205
 * 
 *     def __cinit__(self, SoundBuffer buffer=None):
 *         if buffer is None:             # <<<<<<<<<<<<<<
 *             self.thisptr = <declaudio.SoundSource*>new declaudio.Sound()
 *             self.buffer = None
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_buffer) == Py_None);
  if (__pyx_t_1) {

    /* "sfml/audio/audio.pyx":206
 *     def __cinit__(self, SoundBuffer buffer=None):
 *         if buffer is None:
 *             self.thisptr = <declaudio.SoundSource*>new declaudio.Sound()             # <<<<<<<<<<<<<<
 *             self.buffer = None
 *         else:
 */
    __pyx_v_self->__pyx_base.thisptr = ((sf::SoundSource *)new sf::Sound());

    /* "sfml/audio/audio.pyx":207
 *         if buffer is None:
 *             self.thisptr = <declaudio.SoundSource*>new declaudio.Sound()
 *             self.buffer = None             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = <declaudio.SoundSource*>new declaudio.Sound(buffer.p_this[0])
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->buffer);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer));
    __pyx_v_self->buffer = ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)Py_None);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "sfml/audio/audio.pyx":209
 *             self.buffer = None
 *         else:
 *             self.thisptr = <declaudio.SoundSource*>new declaudio.Sound(buffer.p_this[0])             # <<<<<<<<<<<<<<
 *             self.buffer = buffer
 * 
 */
    __pyx_v_self->__pyx_base.thisptr = ((sf::SoundSource *)new sf::Sound((__pyx_v_buffer->p_this[0])));

    /* "sfml/audio/audio.pyx":210
 *         else:
 *             self.thisptr = <declaudio.SoundSource*>new declaudio.Sound(buffer.p_this[0])
 *             self.buffer = buffer             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_buffer));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_buffer));
    __Pyx_GOTREF(__pyx_v_self->buffer);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer));
    __pyx_v_self->buffer = __pyx_v_buffer;
  }
  __pyx_L3:;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_5audio_5Sound_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_5audio_5Sound_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_5audio_5Sound_2__dealloc__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio/audio.pyx":212
 *             self.buffer = buffer
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_4sfml_5audio_5audio_5Sound_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio/audio.pyx":213
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property buffer:
 */
  delete __pyx_v_self->__pyx_base.thisptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_6buffer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_6buffer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_6buffer___get__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":216
 * 
 *     property buffer:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.buffer
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_6buffer___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":217
 *     property buffer:
 *         def __get__(self):
 *             return self.buffer             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, SoundBuffer value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->buffer));
  __pyx_r = ((PyObject *)__pyx_v_self->buffer);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_5Sound_6buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_5Sound_6buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_4sfml_5audio_5audio_SoundBuffer, 1, "value", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_6buffer_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self), ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_v_value));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":219
 *             return self.buffer
 * 
 *         def __set__(self, SoundBuffer value):             # <<<<<<<<<<<<<<
 *             self.buffer = value
 *             (<declaudio.Sound*>self.thisptr).SetBuffer(value.p_this[0])
 */

static int __pyx_pf_4sfml_5audio_5audio_5Sound_6buffer_2__set__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":220
 * 
 *         def __set__(self, SoundBuffer value):
 *             self.buffer = value             # <<<<<<<<<<<<<<
 *             (<declaudio.Sound*>self.thisptr).SetBuffer(value.p_this[0])
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_value));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_value));
  __Pyx_GOTREF(__pyx_v_self->buffer);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer));
  __pyx_v_self->buffer = __pyx_v_value;

  /* "sfml/audio/audio.pyx":221
 *         def __set__(self, SoundBuffer value):
 *             self.buffer = value
 *             (<declaudio.Sound*>self.thisptr).SetBuffer(value.p_this[0])             # <<<<<<<<<<<<<<
 * 
 *     property loop:
 */
  ((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->SetBuffer((__pyx_v_value->p_this[0]));

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_4loop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_4loop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_4loop___get__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":224
 * 
 *     property loop:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declaudio.Sound*>self.thisptr).GetLoop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_4loop___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":225
 *     property loop:
 *         def __get__(self):
 *             return (<declaudio.Sound*>self.thisptr).GetLoop()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->GetLoop()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.Sound.loop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_5Sound_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_5Sound_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.Sound.loop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_4loop_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self), ((int)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":227
 *             return (<declaudio.Sound*>self.thisptr).GetLoop()
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             (<declaudio.Sound*>self.thisptr).SetLoop(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_5Sound_4loop_2__set__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":228
 * 
 *         def __set__(self, bint value):
 *             (<declaudio.Sound*>self.thisptr).SetLoop(value)             # <<<<<<<<<<<<<<
 * 
 *     property playing_offset:
 */
  ((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->SetLoop(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_14playing_offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_14playing_offset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_14playing_offset___get__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":231
 * 
 *     property playing_offset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declaudio.Sound*>self.thisptr).GetPlayingOffset()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":232
 *     property playing_offset:
 *         def __get__(self):
 *             return (<declaudio.Sound*>self.thisptr).GetPlayingOffset()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_sf__Uint32(((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->GetPlayingOffset()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.Sound.playing_offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_5Sound_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_5Sound_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.Sound.playing_offset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_14playing_offset_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self), ((int)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":234
 *             return (<declaudio.Sound*>self.thisptr).GetPlayingOffset()
 * 
 *         def __set__(self, int value):             # <<<<<<<<<<<<<<
 *             (<declaudio.Sound*>self.thisptr).SetPlayingOffset(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_5Sound_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":235
 * 
 *         def __set__(self, int value):
 *             (<declaudio.Sound*>self.thisptr).SetPlayingOffset(value)             # <<<<<<<<<<<<<<
 * 
 *     property status:
 */
  ((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->SetPlayingOffset(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_6status_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_6status_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_6status___get__(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":238
 * 
 *     property status:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <int>(<declaudio.Sound*>self.thisptr).GetStatus()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_6status___get__(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":239
 *     property status:
 *         def __get__(self):
 *             return <int>(<declaudio.Sound*>self.thisptr).GetStatus()             # <<<<<<<<<<<<<<
 * 
 *     def pause(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((int)((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->GetStatus())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.Sound.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_5pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_5pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_4pause(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":241
 *             return <int>(<declaudio.Sound*>self.thisptr).GetStatus()
 * 
 *     def pause(self):             # <<<<<<<<<<<<<<
 *         (<declaudio.Sound*>self.thisptr).Pause()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_4pause(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause", 0);

  /* "sfml/audio/audio.pyx":242
 * 
 *     def pause(self):
 *         (<declaudio.Sound*>self.thisptr).Pause()             # <<<<<<<<<<<<<<
 * 
 *     def play(self):
 */
  ((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->Pause();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_7play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_7play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_6play(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":244
 *         (<declaudio.Sound*>self.thisptr).Pause()
 * 
 *     def play(self):             # <<<<<<<<<<<<<<
 *         (<declaudio.Sound*>self.thisptr).Play()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_6play(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play", 0);

  /* "sfml/audio/audio.pyx":245
 * 
 *     def play(self):
 *         (<declaudio.Sound*>self.thisptr).Play()             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */
  ((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->Play();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_9stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Sound_9stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Sound_8stop(((struct __pyx_obj_4sfml_5audio_5audio_Sound *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":247
 *         (<declaudio.Sound*>self.thisptr).Play()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         (<declaudio.Sound*>self.thisptr).Stop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Sound_8stop(struct __pyx_obj_4sfml_5audio_5audio_Sound *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop", 0);

  /* "sfml/audio/audio.pyx":248
 * 
 *     def stop(self):
 *         (<declaudio.Sound*>self.thisptr).Stop()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((sf::Sound *)__pyx_v_self->__pyx_base.thisptr)->Stop();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundStream_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundStream_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream___cinit__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":266
 * 
 * cdef class SoundStream(SoundSource):
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if self.__class__ == SoundStream:
 *             raise NotImplementedError("SoundStream is abstract")
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundStream___cinit__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sfml/audio/audio.pyx":267
 * cdef class SoundStream(SoundSource):
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == SoundStream:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("SoundStream is abstract")
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_5audio_SoundStream)), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "sfml/audio/audio.pyx":268
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == SoundStream:
 *             raise NotImplementedError("SoundStream is abstract")             # <<<<<<<<<<<<<<
 * 
 *     property channels_count:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_14channels_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_14channels_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_14channels_count___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":271
 * 
 *     property channels_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declaudio.SoundStream*>self.thisptr).GetChannelsCount()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_14channels_count___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":272
 *     property channels_count:
 *         def __get__(self):
 *             return (<declaudio.SoundStream*>self.thisptr).GetChannelsCount()             # <<<<<<<<<<<<<<
 * 
 *     property sample_rate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->GetChannelsCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.channels_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_11sample_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_11sample_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_11sample_rate___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":275
 * 
 *     property sample_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declaudio.SoundStream*>self.thisptr).GetSampleRate()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":276
 *     property sample_rate:
 *         def __get__(self):
 *             return (<declaudio.SoundStream*>self.thisptr).GetSampleRate()             # <<<<<<<<<<<<<<
 * 
 *     property status:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->GetSampleRate()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.sample_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_6status_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_6status_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_6status___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":279
 * 
 *     property status:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <int>(<declaudio.SoundStream*>self.thisptr).GetStatus()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_6status___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":280
 *     property status:
 *         def __get__(self):
 *             return <int>(<declaudio.SoundStream*>self.thisptr).GetStatus()             # <<<<<<<<<<<<<<
 * 
 *     property playing_offset:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((int)((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->GetStatus())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_14playing_offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_14playing_offset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_14playing_offset___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":283
 * 
 *     property playing_offset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declaudio.SoundStream*>self.thisptr).GetPlayingOffset()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_14playing_offset___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":284
 *     property playing_offset:
 *         def __get__(self):
 *             return (<declaudio.SoundStream*>self.thisptr).GetPlayingOffset()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_sf__Uint32(((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->GetPlayingOffset()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.playing_offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundStream_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundStream_14playing_offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.playing_offset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_14playing_offset_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self), ((int)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":286
 *             return (<declaudio.SoundStream*>self.thisptr).GetPlayingOffset()
 * 
 *         def __set__(self, int value):             # <<<<<<<<<<<<<<
 *             (<declaudio.SoundStream*>self.thisptr).SetPlayingOffset(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundStream_14playing_offset_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":287
 * 
 *         def __set__(self, int value):
 *             (<declaudio.SoundStream*>self.thisptr).SetPlayingOffset(value)             # <<<<<<<<<<<<<<
 * 
 *     property loop:
 */
  ((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->SetPlayingOffset(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_4loop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_4loop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_4loop___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":290
 * 
 *     property loop:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declaudio.SoundStream*>self.thisptr).GetLoop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_4loop___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":291
 *     property loop:
 *         def __get__(self):
 *             return (<declaudio.SoundStream*>self.thisptr).GetLoop()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, bint value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->GetLoop()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.loop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_11SoundStream_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_11SoundStream_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundStream.loop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_4loop_2__set__(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self), ((int)__pyx_v_value));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":293
 *             return (<declaudio.SoundStream*>self.thisptr).GetLoop()
 * 
 *         def __set__(self, bint value):             # <<<<<<<<<<<<<<
 *             (<declaudio.SoundStream*>self.thisptr).SetLoop(value)
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_11SoundStream_4loop_2__set__(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "sfml/audio/audio.pyx":294
 * 
 *         def __set__(self, bint value):
 *             (<declaudio.SoundStream*>self.thisptr).SetLoop(value)             # <<<<<<<<<<<<<<
 * 
 *     def play(self):
 */
  ((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->SetLoop(__pyx_v_value);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_3play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_3play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_2play(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":296
 *             (<declaudio.SoundStream*>self.thisptr).SetLoop(value)
 * 
 *     def play(self):             # <<<<<<<<<<<<<<
 *         (<declaudio.SoundStream*>self.thisptr).Play()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_2play(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play", 0);

  /* "sfml/audio/audio.pyx":297
 * 
 *     def play(self):
 *         (<declaudio.SoundStream*>self.thisptr).Play()             # <<<<<<<<<<<<<<
 * 
 *     def pause(self):
 */
  ((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->Play();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_5pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_5pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_4pause(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":299
 *         (<declaudio.SoundStream*>self.thisptr).Play()
 * 
 *     def pause(self):             # <<<<<<<<<<<<<<
 *         (<declaudio.SoundStream*>self.thisptr).Pause()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_4pause(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause", 0);

  /* "sfml/audio/audio.pyx":300
 * 
 *     def pause(self):
 *         (<declaudio.SoundStream*>self.thisptr).Pause()             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */
  ((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->Pause();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_11SoundStream_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_11SoundStream_6stop(((struct __pyx_obj_4sfml_5audio_5audio_SoundStream *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":302
 *         (<declaudio.SoundStream*>self.thisptr).Pause()
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         (<declaudio.SoundStream*>self.thisptr).Stop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_11SoundStream_6stop(struct __pyx_obj_4sfml_5audio_5audio_SoundStream *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop", 0);

  /* "sfml/audio/audio.pyx":303
 * 
 *     def stop(self):
 *         (<declaudio.SoundStream*>self.thisptr).Stop()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((sf::SoundStream *)__pyx_v_self->__pyx_base.thisptr)->Stop();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_5Music_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_5Music_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Music___init__(((struct __pyx_obj_4sfml_5audio_5audio_Music *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":307
 * 
 * cdef class Music(SoundStream):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Use class methods like open_from_file() or open_from_memory() to create Music objects")
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_5Music___init__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "sfml/audio/audio.pyx":308
 * cdef class Music(SoundStream):
 *     def __init__(self):
 *         raise NotImplementedError("Use class methods like open_from_file() or open_from_memory() to create Music objects")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.Music.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_5audio_5Music_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_5audio_5Music_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_5audio_5Music_2__dealloc__(((struct __pyx_obj_4sfml_5audio_5audio_Music *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio/audio.pyx":310
 *         raise NotImplementedError("Use class methods like open_from_file() or open_from_memory() to create Music objects")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_4sfml_5audio_5audio_5Music_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio/audio.pyx":311
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property duration:
 */
  delete __pyx_v_self->__pyx_base.__pyx_base.thisptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Music_8duration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Music_8duration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Music_8duration___get__(((struct __pyx_obj_4sfml_5audio_5audio_Music *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":314
 * 
 *     property duration:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declaudio.Music*>self.thisptr).GetDuration()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Music_8duration___get__(struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":315
 *     property duration:
 *         def __get__(self):
 *             return (<declaudio.Music*>self.thisptr).GetDuration()             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_sf__Uint32(((sf::Music *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->GetDuration()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.Music.duration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Music_5open_from_file(PyObject *__pyx_v_cls, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Music_5open_from_file(PyObject *__pyx_v_cls, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_from_file (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.Music.open_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Music_4open_from_file(((PyObject*)__pyx_v_cls), ((char *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":318
 * 
 *     @classmethod
 *     def open_from_file(cls, char* filename):             # <<<<<<<<<<<<<<
 *         cdef declaudio.Music *p = new declaudio.Music()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Music_4open_from_file(CYTHON_UNUSED PyObject *__pyx_v_cls, char *__pyx_v_filename) {
  sf::Music *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_from_file", 0);

  /* "sfml/audio/audio.pyx":319
 *     @classmethod
 *     def open_from_file(cls, char* filename):
 *         cdef declaudio.Music *p = new declaudio.Music()             # <<<<<<<<<<<<<<
 * 
 *         if p.OpenFromFile(filename):
 */
  __pyx_v_p = new sf::Music();

  /* "sfml/audio/audio.pyx":321
 *         cdef declaudio.Music *p = new declaudio.Music()
 * 
 *         if p.OpenFromFile(filename):             # <<<<<<<<<<<<<<
 *             return wrap_music_instance(p)
 * 
 */
  __pyx_t_1 = __pyx_v_p->OpenFromFile(__pyx_v_filename);
  if (__pyx_t_1) {

    /* "sfml/audio/audio.pyx":322
 * 
 *         if p.OpenFromFile(filename):
 *             return wrap_music_instance(p)             # <<<<<<<<<<<<<<
 * 
 *         raise SFMLException()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4sfml_5audio_5audio_wrap_music_instance(__pyx_v_p)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio/audio.pyx":324
 *             return wrap_music_instance(p)
 * 
 *         raise SFMLException()             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__SFMLException); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.audio.audio.Music.open_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Music_7open_from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_5Music_7open_from_memory(PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_from_memory (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_5Music_6open_from_memory(((PyObject*)__pyx_v_cls), ((PyObject*)__pyx_v_data));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":327
 * 
 *     @classmethod
 *     def open_from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 *         cdef declaudio.Music *p = new declaudio.Music()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_5Music_6open_from_memory(CYTHON_UNUSED PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  sf::Music *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_from_memory", 0);

  /* "sfml/audio/audio.pyx":328
 *     @classmethod
 *     def open_from_memory(cls, bytes data):
 *         cdef declaudio.Music *p = new declaudio.Music()             # <<<<<<<<<<<<<<
 * 
 *         if p.OpenFromMemory(<char*>data, len(data)):
 */
  __pyx_v_p = new sf::Music();

  /* "sfml/audio/audio.pyx":330
 *         cdef declaudio.Music *p = new declaudio.Music()
 * 
 *         if p.OpenFromMemory(<char*>data, len(data)):             # <<<<<<<<<<<<<<
 *             return wrap_music_instance(p)
 * 
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); 
  __pyx_t_3 = __pyx_v_p->OpenFromMemory(((char *)__pyx_t_1), __pyx_t_2);
  if (__pyx_t_3) {

    /* "sfml/audio/audio.pyx":331
 * 
 *         if p.OpenFromMemory(<char*>data, len(data)):
 *             return wrap_music_instance(p)             # <<<<<<<<<<<<<<
 * 
 *         raise SFMLException()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = ((PyObject *)__pyx_f_4sfml_5audio_5audio_wrap_music_instance(__pyx_v_p)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sfml/audio/audio.pyx":333
 *             return wrap_music_instance(p)
 * 
 *         raise SFMLException()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__SFMLException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_5, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sfml.audio.audio.Music.open_from_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":336
 * 
 * 
 * cdef Music wrap_music_instance(declaudio.Music *p_cpp_instance):             # <<<<<<<<<<<<<<
 *     cdef Music ret = Music.__new__(Music)
 * 
 */

static struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_f_4sfml_5audio_5audio_wrap_music_instance(sf::Music *__pyx_v_p_cpp_instance) {
  struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_v_ret = 0;
  struct __pyx_obj_4sfml_5audio_5audio_Music *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_music_instance", 0);

  /* "sfml/audio/audio.pyx":337
 * 
 * cdef Music wrap_music_instance(declaudio.Music *p_cpp_instance):
 *     cdef Music ret = Music.__new__(Music)             # <<<<<<<<<<<<<<
 * 
 *     ret.thisptr = <declaudio.SoundSource*>p_cpp_instance
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_4sfml_5audio_5audio_Music)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_5audio_Music)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((struct __pyx_obj_4sfml_5audio_5audio_Music *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio/audio.pyx":339
 *     cdef Music ret = Music.__new__(Music)
 * 
 *     ret.thisptr = <declaudio.SoundSource*>p_cpp_instance             # <<<<<<<<<<<<<<
 * 
 *     return ret
 */
  __pyx_v_ret->__pyx_base.__pyx_base.thisptr = ((sf::SoundSource *)__pyx_v_p_cpp_instance);

  /* "sfml/audio/audio.pyx":341
 *     ret.thisptr = <declaudio.SoundSource*>p_cpp_instance
 * 
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_4sfml_5audio_5audio_Music *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.wrap_music_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_13SoundRecorder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_13SoundRecorder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_13SoundRecorder___cinit__(((struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":347
 *     cdef declaudio.SoundRecorder *thisptr
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if self.__class__ == SoundRecorder:
 *             raise NotImplementedError("SoundRecorder is abstract")
 */

static int __pyx_pf_4sfml_5audio_5audio_13SoundRecorder___cinit__(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sfml/audio/audio.pyx":348
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == SoundRecorder:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("SoundRecorder is abstract")
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)((PyObject*)__pyx_ptype_4sfml_5audio_5audio_SoundRecorder)), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "sfml/audio/audio.pyx":349
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == SoundRecorder:
 *             raise NotImplementedError("SoundRecorder is abstract")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.audio.audio.SoundRecorder.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_4sfml_5audio_5audio_13SoundRecorder_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sfml_5audio_5audio_13SoundRecorder_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sfml_5audio_5audio_13SoundRecorder_2__dealloc__(((struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "sfml/audio/audio.pyx":351
 *             raise NotImplementedError("SoundRecorder is abstract")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def start(self, unsigned int sampleRate=44100):
 */

static void __pyx_pf_4sfml_5audio_5audio_13SoundRecorder_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sfml/audio/audio.pyx":352
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     def start(self, unsigned int sampleRate=44100):
 *         self.thisptr.Start(sampleRate)
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_5start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_5start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_sampleRate;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sampleRate,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start (wrapper)", 0);
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sampleRate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "start") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      if (values[0]) {
      } else {
        __pyx_v_sampleRate = ((unsigned int)44100);
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_sampleRate == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = ((unsigned int)44100);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.audio.audio.SoundRecorder.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_13SoundRecorder_4start(((struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *)__pyx_v_self), __pyx_v_sampleRate);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":353
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def start(self, unsigned int sampleRate=44100):             # <<<<<<<<<<<<<<
 *         self.thisptr.Start(sampleRate)
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_4start(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self, unsigned int __pyx_v_sampleRate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start", 0);

  /* "sfml/audio/audio.pyx":354
 *         del self.thisptr
 *     def start(self, unsigned int sampleRate=44100):
 *         self.thisptr.Start(sampleRate)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */
  __pyx_v_self->thisptr->Start(__pyx_v_sampleRate);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_7stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_13SoundRecorder_6stop(((struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":356
 *         self.thisptr.Start(sampleRate)
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.Stop()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_6stop(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop", 0);

  /* "sfml/audio/audio.pyx":357
 * 
 *     def stop(self):
 *         self.thisptr.Stop()             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_v_self->thisptr->Stop();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_9is_available(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_9is_available(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_available (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_13SoundRecorder_8is_available(((PyObject*)__pyx_v_cls));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":360
 * 
 *     @classmethod
 *     def is_available(cls):             # <<<<<<<<<<<<<<
 *         return declaudio.sound_recorder.IsAvailable()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_8is_available(CYTHON_UNUSED PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_available", 0);

  /* "sfml/audio/audio.pyx":361
 *     @classmethod
 *     def is_available(cls):
 *         return declaudio.sound_recorder.IsAvailable()             # <<<<<<<<<<<<<<
 * 
 *     property sample_rate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(sf::SoundRecorder::IsAvailable()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundRecorder.is_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_11sample_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_11sample_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_13SoundRecorder_11sample_rate___get__(((struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":364
 * 
 *     property sample_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetSampleRate()
 * 
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_13SoundRecorder_11sample_rate___get__(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "sfml/audio/audio.pyx":365
 *     property sample_rate:
 *         def __get__(self):
 *             return self.thisptr.GetSampleRate()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_self->thisptr->GetSampleRate()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundRecorder.sample_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4sfml_5audio_5audio_19SoundBufferRecorder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sfml_5audio_5audio_19SoundBufferRecorder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_19SoundBufferRecorder___cinit__(((struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":369
 * 
 * cdef class SoundBufferRecorder(SoundRecorder):
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.thisptr = <declaudio.SoundRecorder*>new declaudio.SoundBufferRecorder()
 * 
 */

static int __pyx_pf_4sfml_5audio_5audio_19SoundBufferRecorder___cinit__(struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sfml/audio/audio.pyx":370
 * cdef class SoundBufferRecorder(SoundRecorder):
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declaudio.SoundRecorder*>new declaudio.SoundBufferRecorder()             # <<<<<<<<<<<<<<
 * 
 *     def get_buffer(self):
 */
  __pyx_v_self->__pyx_base.thisptr = ((sf::SoundRecorder *)new sf::SoundBufferRecorder());

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sfml_5audio_5audio_19SoundBufferRecorder_3get_buffer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4sfml_5audio_5audio_19SoundBufferRecorder_3get_buffer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_buffer (wrapper)", 0);
  __pyx_r = __pyx_pf_4sfml_5audio_5audio_19SoundBufferRecorder_2get_buffer(((struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/audio/audio.pyx":372
 *         self.thisptr = <declaudio.SoundRecorder*>new declaudio.SoundBufferRecorder()
 * 
 *     def get_buffer(self):             # <<<<<<<<<<<<<<
 *         cdef declaudio.const_SoundBuffer* sb
 *         sb = &(<declaudio.SoundBufferRecorder*>self.thisptr).GetBuffer()
 */

static PyObject *__pyx_pf_4sfml_5audio_5audio_19SoundBufferRecorder_2get_buffer(struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder *__pyx_v_self) {
  const SoundBuffer *__pyx_v_sb;
  struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_buffer", 0);

  /* "sfml/audio/audio.pyx":374
 *     def get_buffer(self):
 *         cdef declaudio.const_SoundBuffer* sb
 *         sb = &(<declaudio.SoundBufferRecorder*>self.thisptr).GetBuffer()             # <<<<<<<<<<<<<<
 * 
 *         cdef SoundBuffer ret = SoundBuffer.__new__(SoundBuffer)
 */
  __pyx_v_sb = (&((sf::SoundBufferRecorder *)__pyx_v_self->__pyx_base.thisptr)->GetBuffer());

  /* "sfml/audio/audio.pyx":376
 *         sb = &(<declaudio.SoundBufferRecorder*>self.thisptr).GetBuffer()
 * 
 *         cdef SoundBuffer ret = SoundBuffer.__new__(SoundBuffer)             # <<<<<<<<<<<<<<
 * 
 *         ret.p_this = sb
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_5audio_5audio_SoundBuffer)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/audio/audio.pyx":378
 *         cdef SoundBuffer ret = SoundBuffer.__new__(SoundBuffer)
 * 
 *         ret.p_this = sb             # <<<<<<<<<<<<<<
 *         ret.delete_this = False
 * 
 */
  __pyx_v_ret->p_this = __pyx_v_sb;

  /* "sfml/audio/audio.pyx":379
 * 
 *         ret.p_this = sb
 *         ret.delete_this = False             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
  __pyx_v_ret->delete_this = 0;

  /* "sfml/audio/audio.pyx":381
 *         ret.delete_this = False
 * 
 *         return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.audio.audio.SoundBufferRecorder.get_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_Listener(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_4sfml_5audio_5audio_8Listener_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_5audio_Listener(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_Listener[] = {
  {__Pyx_NAMESTR("get_global_volume"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_8Listener_3get_global_volume, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_global_volume"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_8Listener_5set_global_volume, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_position"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_8Listener_7set_position, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Listener = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Listener = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Listener = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Listener = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_Listener = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.Listener"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_Listener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_Listener, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Listener, /*tp_as_number*/
  &__pyx_tp_as_sequence_Listener, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Listener, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Listener, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_Listener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_Listener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_SoundBuffer(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_5audio_SoundBuffer(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_channels_count(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_14channels_count_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_duration(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_8duration_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_sample_rate(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_11sample_rate_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_samples(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_7samples_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_samples_count(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_13samples_count_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_SoundBuffer[] = {
  {__Pyx_NAMESTR("load_from_file"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_5load_from_file, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load_from_memory"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_7load_from_memory, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load_from_samples"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_9load_from_samples, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save_to_file"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_11SoundBuffer_11save_to_file, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_5audio_SoundBuffer[] = {
  {(char *)"channels_count", __pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_channels_count, 0, 0, 0},
  {(char *)"duration", __pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_duration, 0, 0, 0},
  {(char *)"sample_rate", __pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_sample_rate, 0, 0, 0},
  {(char *)"samples", __pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_samples, 0, 0, 0},
  {(char *)"samples_count", __pyx_getprop_4sfml_5audio_5audio_11SoundBuffer_samples_count, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundBuffer = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundBuffer = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundBuffer = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundBuffer = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_SoundBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.SoundBuffer"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_SoundBuffer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundBuffer, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundBuffer, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundBuffer, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundBuffer, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_SoundBuffer, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_5audio_SoundBuffer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_5audio_11SoundBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_SoundBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_SoundSource(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_5audio_SoundSource(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundSource_pitch(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundSource_5pitch_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundSource_pitch(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundSource_5pitch_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundSource_volume(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundSource_6volume_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundSource_volume(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundSource_6volume_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundSource_position(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundSource_8position_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundSource_position(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundSource_8position_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundSource_relative_to_listener(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundSource_relative_to_listener(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundSource_20relative_to_listener_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundSource_min_distance(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundSource_12min_distance_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundSource_min_distance(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundSource_12min_distance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundSource_attenuation(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundSource_11attenuation_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundSource_attenuation(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundSource_11attenuation_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_SoundSource[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_5audio_SoundSource[] = {
  {(char *)"pitch", __pyx_getprop_4sfml_5audio_5audio_11SoundSource_pitch, __pyx_setprop_4sfml_5audio_5audio_11SoundSource_pitch, 0, 0},
  {(char *)"volume", __pyx_getprop_4sfml_5audio_5audio_11SoundSource_volume, __pyx_setprop_4sfml_5audio_5audio_11SoundSource_volume, 0, 0},
  {(char *)"position", __pyx_getprop_4sfml_5audio_5audio_11SoundSource_position, __pyx_setprop_4sfml_5audio_5audio_11SoundSource_position, 0, 0},
  {(char *)"relative_to_listener", __pyx_getprop_4sfml_5audio_5audio_11SoundSource_relative_to_listener, __pyx_setprop_4sfml_5audio_5audio_11SoundSource_relative_to_listener, 0, 0},
  {(char *)"min_distance", __pyx_getprop_4sfml_5audio_5audio_11SoundSource_min_distance, __pyx_setprop_4sfml_5audio_5audio_11SoundSource_min_distance, 0, 0},
  {(char *)"attenuation", __pyx_getprop_4sfml_5audio_5audio_11SoundSource_attenuation, __pyx_setprop_4sfml_5audio_5audio_11SoundSource_attenuation, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundSource = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundSource = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundSource = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundSource = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_SoundSource = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.SoundSource"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_SoundSource), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_SoundSource, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundSource, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundSource, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundSource, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundSource, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_SoundSource, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_5audio_SoundSource, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_SoundSource, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_Sound(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4sfml_5audio_5audio_Sound *p;
  PyObject *o = __pyx_tp_new_4sfml_5audio_5audio_SoundSource(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_4sfml_5audio_5audio_Sound *)o);
  p->buffer = ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pw_4sfml_5audio_5audio_5Sound_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_5audio_Sound(PyObject *o) {
  struct __pyx_obj_4sfml_5audio_5audio_Sound *p = (struct __pyx_obj_4sfml_5audio_5audio_Sound *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_5audio_5Sound_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->buffer));
  __pyx_tp_dealloc_4sfml_5audio_5audio_SoundSource(o);
}

static int __pyx_tp_traverse_4sfml_5audio_5audio_Sound(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4sfml_5audio_5audio_Sound *p = (struct __pyx_obj_4sfml_5audio_5audio_Sound *)o;
  if (__pyx_ptype_4sfml_5audio_5audio_SoundSource->tp_traverse) {
    e = __pyx_ptype_4sfml_5audio_5audio_SoundSource->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->buffer) {
    e = (*v)(((PyObject*)p->buffer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4sfml_5audio_5audio_Sound(PyObject *o) {
  struct __pyx_obj_4sfml_5audio_5audio_Sound *p = (struct __pyx_obj_4sfml_5audio_5audio_Sound *)o;
  PyObject* tmp;
  if (__pyx_ptype_4sfml_5audio_5audio_SoundSource->tp_clear) {
    __pyx_ptype_4sfml_5audio_5audio_SoundSource->tp_clear(o);
  }
  tmp = ((PyObject*)p->buffer);
  p->buffer = ((struct __pyx_obj_4sfml_5audio_5audio_SoundBuffer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_5Sound_buffer(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_5Sound_6buffer_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_5Sound_buffer(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_5Sound_6buffer_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_5Sound_loop(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_5Sound_4loop_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_5Sound_loop(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_5Sound_4loop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_5Sound_playing_offset(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_5Sound_14playing_offset_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_5Sound_playing_offset(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_5Sound_14playing_offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_5Sound_status(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_5Sound_6status_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_Sound[] = {
  {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_5Sound_5pause, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_5Sound_7play, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_5Sound_9stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_5audio_Sound[] = {
  {(char *)"buffer", __pyx_getprop_4sfml_5audio_5audio_5Sound_buffer, __pyx_setprop_4sfml_5audio_5audio_5Sound_buffer, 0, 0},
  {(char *)"loop", __pyx_getprop_4sfml_5audio_5audio_5Sound_loop, __pyx_setprop_4sfml_5audio_5audio_5Sound_loop, 0, 0},
  {(char *)"playing_offset", __pyx_getprop_4sfml_5audio_5audio_5Sound_playing_offset, __pyx_setprop_4sfml_5audio_5audio_5Sound_playing_offset, 0, 0},
  {(char *)"status", __pyx_getprop_4sfml_5audio_5audio_5Sound_status, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Sound = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Sound = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Sound = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Sound = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_Sound = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.Sound"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_Sound), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_Sound, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Sound, /*tp_as_number*/
  &__pyx_tp_as_sequence_Sound, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Sound, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Sound, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4sfml_5audio_5audio_Sound, /*tp_traverse*/
  __pyx_tp_clear_4sfml_5audio_5audio_Sound, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_Sound, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_5audio_Sound, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_Sound, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_SoundStream(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_5audio_5audio_SoundSource(t, a, k);
  if (!o) return 0;
  if (__pyx_pw_4sfml_5audio_5audio_11SoundStream_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundStream_channels_count(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundStream_14channels_count_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundStream_sample_rate(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundStream_11sample_rate_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundStream_status(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundStream_6status_1__get__(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundStream_playing_offset(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundStream_14playing_offset_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundStream_playing_offset(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundStream_14playing_offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_11SoundStream_loop(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_11SoundStream_4loop_1__get__(o);
}

static int __pyx_setprop_4sfml_5audio_5audio_11SoundStream_loop(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pw_4sfml_5audio_5audio_11SoundStream_4loop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_SoundStream[] = {
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_11SoundStream_3play, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_11SoundStream_5pause, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_11SoundStream_7stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_5audio_SoundStream[] = {
  {(char *)"channels_count", __pyx_getprop_4sfml_5audio_5audio_11SoundStream_channels_count, 0, 0, 0},
  {(char *)"sample_rate", __pyx_getprop_4sfml_5audio_5audio_11SoundStream_sample_rate, 0, 0, 0},
  {(char *)"status", __pyx_getprop_4sfml_5audio_5audio_11SoundStream_status, 0, 0, 0},
  {(char *)"playing_offset", __pyx_getprop_4sfml_5audio_5audio_11SoundStream_playing_offset, __pyx_setprop_4sfml_5audio_5audio_11SoundStream_playing_offset, 0, 0},
  {(char *)"loop", __pyx_getprop_4sfml_5audio_5audio_11SoundStream_loop, __pyx_setprop_4sfml_5audio_5audio_11SoundStream_loop, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundStream = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundStream = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundStream = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundStream = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_SoundStream = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.SoundStream"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_SoundStream), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_SoundSource, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundStream, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundStream, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundStream, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundStream, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_SoundStream, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_5audio_SoundStream, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_SoundStream, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_Music(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_5audio_5audio_SoundStream(t, a, k);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_5audio_Music(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_5audio_5Music_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_4sfml_5audio_5audio_SoundSource(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_5Music_duration(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_5Music_8duration_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_Music[] = {
  {__Pyx_NAMESTR("open_from_file"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_5Music_5open_from_file, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("open_from_memory"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_5Music_7open_from_memory, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_5audio_Music[] = {
  {(char *)"duration", __pyx_getprop_4sfml_5audio_5audio_5Music_duration, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Music = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Music = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Music = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Music = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_Music = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.Music"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_Music), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_Music, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Music, /*tp_as_number*/
  &__pyx_tp_as_sequence_Music, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Music, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Music, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_Music, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_5audio_Music, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4sfml_5audio_5audio_5Music_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_Music, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_SoundRecorder(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_5audio_5audio_SoundRecorder(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sfml_5audio_5audio_13SoundRecorder_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_5audio_5audio_13SoundRecorder_sample_rate(PyObject *o, void *x) {
  return __pyx_pw_4sfml_5audio_5audio_13SoundRecorder_11sample_rate_1__get__(o);
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_SoundRecorder[] = {
  {__Pyx_NAMESTR("start"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_5start, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_7stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("is_available"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_13SoundRecorder_9is_available, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_5audio_5audio_SoundRecorder[] = {
  {(char *)"sample_rate", __pyx_getprop_4sfml_5audio_5audio_13SoundRecorder_sample_rate, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundRecorder = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundRecorder = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundRecorder = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundRecorder = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_SoundRecorder = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.SoundRecorder"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_SoundRecorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_SoundRecorder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundRecorder, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundRecorder, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundRecorder, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundRecorder, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_SoundRecorder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_5audio_5audio_SoundRecorder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_SoundRecorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_5audio_5audio_SoundBufferRecorder(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_5audio_5audio_SoundRecorder(t, a, k);
  if (!o) return 0;
  if (__pyx_pw_4sfml_5audio_5audio_19SoundBufferRecorder_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyMethodDef __pyx_methods_4sfml_5audio_5audio_SoundBufferRecorder[] = {
  {__Pyx_NAMESTR("get_buffer"), (PyCFunction)__pyx_pw_4sfml_5audio_5audio_19SoundBufferRecorder_3get_buffer, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundBufferRecorder = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundBufferRecorder = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundBufferRecorder = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundBufferRecorder = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_5audio_5audio_SoundBufferRecorder = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.audio.audio.SoundBufferRecorder"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_5audio_5audio_SoundBufferRecorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_5audio_5audio_SoundRecorder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundBufferRecorder, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundBufferRecorder, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundBufferRecorder, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundBufferRecorder, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_5audio_5audio_SoundBufferRecorder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_5audio_5audio_SoundBufferRecorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("audio"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_n_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 1},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplemented, __pyx_k__NotImplemented, sizeof(__pyx_k__NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplementedError, __pyx_k__NotImplementedError, sizeof(__pyx_k__NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s__PAUSED, __pyx_k__PAUSED, sizeof(__pyx_k__PAUSED), 0, 0, 1, 1},
  {&__pyx_n_s__PLAYING, __pyx_k__PLAYING, sizeof(__pyx_k__PLAYING), 0, 0, 1, 1},
  {&__pyx_n_s__SFMLException, __pyx_k__SFMLException, sizeof(__pyx_k__SFMLException), 0, 0, 1, 1},
  {&__pyx_n_s__STOPPED, __pyx_k__STOPPED, sizeof(__pyx_k__STOPPED), 0, 0, 1, 1},
  {&__pyx_n_s____class__, __pyx_k____class__, sizeof(__pyx_k____class__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__buffer, __pyx_k__buffer, sizeof(__pyx_k__buffer), 0, 0, 1, 1},
  {&__pyx_n_s__channels_count, __pyx_k__channels_count, sizeof(__pyx_k__channels_count), 0, 0, 1, 1},
  {&__pyx_n_s__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 0, 0, 1, 1},
  {&__pyx_n_s__get_global_volume, __pyx_k__get_global_volume, sizeof(__pyx_k__get_global_volume), 0, 0, 1, 1},
  {&__pyx_n_s__is_available, __pyx_k__is_available, sizeof(__pyx_k__is_available), 0, 0, 1, 1},
  {&__pyx_n_s__load_from_file, __pyx_k__load_from_file, sizeof(__pyx_k__load_from_file), 0, 0, 1, 1},
  {&__pyx_n_s__load_from_memory, __pyx_k__load_from_memory, sizeof(__pyx_k__load_from_memory), 0, 0, 1, 1},
  {&__pyx_n_s__load_from_samples, __pyx_k__load_from_samples, sizeof(__pyx_k__load_from_samples), 0, 0, 1, 1},
  {&__pyx_n_s__open_from_file, __pyx_k__open_from_file, sizeof(__pyx_k__open_from_file), 0, 0, 1, 1},
  {&__pyx_n_s__open_from_memory, __pyx_k__open_from_memory, sizeof(__pyx_k__open_from_memory), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__sampleRate, __pyx_k__sampleRate, sizeof(__pyx_k__sampleRate), 0, 0, 1, 1},
  {&__pyx_n_s__sample_rate, __pyx_k__sample_rate, sizeof(__pyx_k__sample_rate), 0, 0, 1, 1},
  {&__pyx_n_s__samples, __pyx_k__samples, sizeof(__pyx_k__samples), 0, 0, 1, 1},
  {&__pyx_n_s__set_global_volume, __pyx_k__set_global_volume, sizeof(__pyx_k__set_global_volume), 0, 0, 1, 1},
  {&__pyx_n_s__set_position, __pyx_k__set_position, sizeof(__pyx_k__set_position), 0, 0, 1, 1},
  {&__pyx_n_s__x, __pyx_k__x, sizeof(__pyx_k__x), 0, 0, 1, 1},
  {&__pyx_n_s__y, __pyx_k__y, sizeof(__pyx_k__y), 0, 0, 1, 1},
  {&__pyx_n_s__z, __pyx_k__z, sizeof(__pyx_k__z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplementedError = __Pyx_GetName(__pyx_b, __pyx_n_s__NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplemented = __Pyx_GetName(__pyx_b, __pyx_n_s__NotImplemented); if (!__pyx_builtin_NotImplemented) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "sfml/audio/audio.pyx":29
 * cdef class Listener:
 *     def __cinit__(self, *args, **kwargs):
 *         NotImplementedError("This class can't be instanciated!")             # <<<<<<<<<<<<<<
 * 
 *     ## The six following static method should be static properties.
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "sfml/audio/audio.pyx":60
 *     def __init__(self):
 *         self.delete_this = True
 *         raise NotImplementedError("Use static methods like load_from_file to create SoundBuffer instances")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_k_tuple_4 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_4);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "sfml/audio/audio.pyx":97
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()
 * 
 *         bFilename = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if p.LoadFromFile(bFilename):
 *             return wrap_sound_buffer_instance(p, True)
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_6);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "sfml/audio/audio.pyx":268
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == SoundStream:
 *             raise NotImplementedError("SoundStream is abstract")             # <<<<<<<<<<<<<<
 * 
 *     property channels_count:
 */
  __pyx_k_tuple_8 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_8);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_7));
  PyTuple_SET_ITEM(__pyx_k_tuple_8, 0, ((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_7));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "sfml/audio/audio.pyx":308
 * cdef class Music(SoundStream):
 *     def __init__(self):
 *         raise NotImplementedError("Use class methods like open_from_file() or open_from_memory() to create Music objects")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_k_tuple_10 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_10);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_9));
  PyTuple_SET_ITEM(__pyx_k_tuple_10, 0, ((PyObject *)__pyx_kp_s_9));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_9));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "sfml/audio/audio.pyx":349
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == SoundRecorder:
 *             raise NotImplementedError("SoundRecorder is abstract")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_12);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_11));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_s_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initaudio(void); /*proto*/
PyMODINIT_FUNC initaudio(void)
#else
PyMODINIT_FUNC PyInit_audio(void); /*proto*/
PyMODINIT_FUNC PyInit_audio(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_audio(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("audio"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_sfml__audio__audio) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_Listener) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Listener", (PyObject *)&__pyx_type_4sfml_5audio_5audio_Listener) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_Listener = &__pyx_type_4sfml_5audio_5audio_Listener;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_SoundBuffer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundBuffer", (PyObject *)&__pyx_type_4sfml_5audio_5audio_SoundBuffer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_SoundBuffer = &__pyx_type_4sfml_5audio_5audio_SoundBuffer;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_SoundSource) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundSource", (PyObject *)&__pyx_type_4sfml_5audio_5audio_SoundSource) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_SoundSource = &__pyx_type_4sfml_5audio_5audio_SoundSource;
  __pyx_type_4sfml_5audio_5audio_Sound.tp_base = __pyx_ptype_4sfml_5audio_5audio_SoundSource;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_Sound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Sound", (PyObject *)&__pyx_type_4sfml_5audio_5audio_Sound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_Sound = &__pyx_type_4sfml_5audio_5audio_Sound;
  __pyx_type_4sfml_5audio_5audio_SoundStream.tp_base = __pyx_ptype_4sfml_5audio_5audio_SoundSource;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_SoundStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundStream", (PyObject *)&__pyx_type_4sfml_5audio_5audio_SoundStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_SoundStream = &__pyx_type_4sfml_5audio_5audio_SoundStream;
  __pyx_type_4sfml_5audio_5audio_Music.tp_base = __pyx_ptype_4sfml_5audio_5audio_SoundStream;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_Music) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Music", (PyObject *)&__pyx_type_4sfml_5audio_5audio_Music) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_Music = &__pyx_type_4sfml_5audio_5audio_Music;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_SoundRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundRecorder", (PyObject *)&__pyx_type_4sfml_5audio_5audio_SoundRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_SoundRecorder = &__pyx_type_4sfml_5audio_5audio_SoundRecorder;
  __pyx_type_4sfml_5audio_5audio_SoundBufferRecorder.tp_base = __pyx_ptype_4sfml_5audio_5audio_SoundRecorder;
  if (PyType_Ready(&__pyx_type_4sfml_5audio_5audio_SoundBufferRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SoundBufferRecorder", (PyObject *)&__pyx_type_4sfml_5audio_5audio_SoundBufferRecorder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_5audio_5audio_SoundBufferRecorder = &__pyx_type_4sfml_5audio_5audio_SoundBufferRecorder;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "sfml/audio/audio.pyx":24
 * 
 * 
 * class SFMLException(Exception): pass             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__SFMLException, __pyx_n_s_13); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__SFMLException, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "sfml/audio/audio.pyx":33
 *     ## The six following static method should be static properties.
 *     @classmethod
 *     def get_global_volume(cls):             # <<<<<<<<<<<<<<
 *         return declaudio.listener.GetGlobalVolume()
 * 
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Listener, __pyx_n_s__get_global_volume); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Listener->tp_dict, __pyx_n_s__get_global_volume, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_Listener);

  /* "sfml/audio/audio.pyx":37
 * 
 *     @classmethod
 *     def set_global_volume(cls, float volume):             # <<<<<<<<<<<<<<
 *         declaudio.listener.SetGlobalVolume(volume)
 * 
 */
  __pyx_t_3 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Listener, __pyx_n_s__set_global_volume); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Listener->tp_dict, __pyx_n_s__set_global_volume, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_Listener);

  /* "sfml/audio/audio.pyx":44
 * 
 *     @classmethod
 *     def set_position(cls, x, y, z):             # <<<<<<<<<<<<<<
 *         declaudio.listener.SetPosition(x, y, z)
 * 
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Listener, __pyx_n_s__set_position); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Listener->tp_dict, __pyx_n_s__set_position, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_Listener);

  /* "sfml/audio/audio.pyx":94
 * 
 *     @classmethod
 *     def load_from_file(cls, filename):             # <<<<<<<<<<<<<<
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()
 * 
 */
  __pyx_t_3 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer, __pyx_n_s__load_from_file); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer->tp_dict, __pyx_n_s__load_from_file, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_SoundBuffer);

  /* "sfml/audio/audio.pyx":104
 * 
 *     @classmethod
 *     def load_from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 *         cdef declaudio.SoundBuffer *p = new declaudio.SoundBuffer()
 * 
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer, __pyx_n_s__load_from_memory); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer->tp_dict, __pyx_n_s__load_from_memory, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_SoundBuffer);

  /* "sfml/audio/audio.pyx":113
 * 
 *     @classmethod
 *     def load_from_samples(cls, list samples, unsigned int channels_count, unsigned int sample_rate):             # <<<<<<<<<<<<<<
 *         cdef declaudio.SoundBuffer *p_sb = new declaudio.SoundBuffer()
 *         cdef declaudio.Int16 *p_samples = <declaudio.Int16*>malloc(len(samples) * sizeof(declaudio.Int16))
 */
  __pyx_t_3 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer, __pyx_n_s__load_from_samples); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundBuffer->tp_dict, __pyx_n_s__load_from_samples, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_SoundBuffer);

  /* "sfml/audio/audio.pyx":148
 * 
 * cdef class SoundSource:
 *     STOPPED = declaudio.sound_source.Stopped             # <<<<<<<<<<<<<<
 *     PAUSED = declaudio.sound_source.Paused
 *     PLAYING = declaudio.sound_source.Playing
 */
  __pyx_t_1 = PyInt_FromLong(sf::SoundSource::Stopped); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundSource->tp_dict, __pyx_n_s__STOPPED, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_SoundSource);

  /* "sfml/audio/audio.pyx":149
 * cdef class SoundSource:
 *     STOPPED = declaudio.sound_source.Stopped
 *     PAUSED = declaudio.sound_source.Paused             # <<<<<<<<<<<<<<
 *     PLAYING = declaudio.sound_source.Playing
 * 
 */
  __pyx_t_1 = PyInt_FromLong(sf::SoundSource::Paused); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundSource->tp_dict, __pyx_n_s__PAUSED, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_SoundSource);

  /* "sfml/audio/audio.pyx":150
 *     STOPPED = declaudio.sound_source.Stopped
 *     PAUSED = declaudio.sound_source.Paused
 *     PLAYING = declaudio.sound_source.Playing             # <<<<<<<<<<<<<<
 * 
 *     cdef declaudio.SoundSource *thisptr
 */
  __pyx_t_1 = PyInt_FromLong(sf::SoundSource::Playing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundSource->tp_dict, __pyx_n_s__PLAYING, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_SoundSource);

  /* "sfml/audio/audio.pyx":318
 * 
 *     @classmethod
 *     def open_from_file(cls, char* filename):             # <<<<<<<<<<<<<<
 *         cdef declaudio.Music *p = new declaudio.Music()
 * 
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Music, __pyx_n_s__open_from_file); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Music->tp_dict, __pyx_n_s__open_from_file, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_Music);

  /* "sfml/audio/audio.pyx":327
 * 
 *     @classmethod
 *     def open_from_memory(cls, bytes data):             # <<<<<<<<<<<<<<
 *         cdef declaudio.Music *p = new declaudio.Music()
 * 
 */
  __pyx_t_3 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Music, __pyx_n_s__open_from_memory); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_Music->tp_dict, __pyx_n_s__open_from_memory, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_Music);

  /* "sfml/audio/audio.pyx":360
 * 
 *     @classmethod
 *     def is_available(cls):             # <<<<<<<<<<<<<<
 *         return declaudio.sound_recorder.IsAvailable()
 * 
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundRecorder, __pyx_n_s__is_available); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_5audio_5audio_SoundRecorder->tp_dict, __pyx_n_s__is_available, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_4sfml_5audio_5audio_SoundRecorder);

  /* "sfml/audio/audio.pyx":1
 * ########################################################################             # <<<<<<<<<<<<<<
 * # Copyright 2012, Jonathan De Wachter <dewachter.jonathan@gmail.com>   #
 * #                                                                      #
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init sfml.audio.audio", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init sfml.audio.audio");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    return;
}
#endif

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %"PY_FORMAT_SIZE_T"d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %"PY_FORMAT_SIZE_T"d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
    /* It appears that PyMethodDescr_Type is not anywhere exposed in the Python/C API */
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = __Pyx_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) { /* cdef classes */
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
    else if (PyMethod_Check(method)) { /* python classes */
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (PyObject_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "Class-level classmethod() can only be called on "
                 "a method_descriptor or instance method.");
    return NULL;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, (char *)"__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;
    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;
    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Uint32(sf::Uint32 val) {
    const sf::Uint32 neg_one = (sf::Uint32)-1, const_zero = (sf::Uint32)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(sf::Uint32) == sizeof(char))  ||
        (sizeof(sf::Uint32) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(sf::Uint32) == sizeof(int)) ||
               (sizeof(sf::Uint32) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(sf::Uint32) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(sf::Uint32),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Int16(sf::Int16 val) {
    const sf::Int16 neg_one = (sf::Int16)-1, const_zero = (sf::Int16)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(sf::Int16) == sizeof(char))  ||
        (sizeof(sf::Int16) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(sf::Int16) == sizeof(int)) ||
               (sizeof(sf::Int16) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(sf::Int16) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(sf::Int16),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
