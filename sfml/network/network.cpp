/* Generated by Cython 0.15.1 on Tue Dec 20 21:35:52 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__sfml__network__network
#define __PYX_HAVE_API__sfml__network__network
#include "stdlib.h"
#include <string>
#include "SFML/System.hpp"
#include "SFML/Graphics.hpp"
#include "SFML/Network.hpp"
#include <vector>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "network.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_4sfml_7network_7network_FtpResponse;
struct __pyx_obj_4sfml_7network_7network_FtpDirectoryResponse;
struct __pyx_obj_4sfml_7network_7network_ListingResponse;
struct __pyx_obj_4sfml_7network_7network_Socket;
struct __pyx_obj_4sfml_7network_7network_UdpSocket;
struct __pyx_obj_4sfml_7network_7network_Http;
struct __pyx_obj_4sfml_7network_7network_HttpRequest;
struct __pyx_obj_4sfml_7network_7network_SocketSelector;
struct __pyx_obj_4sfml_7network_7network_TcpListener;
struct __pyx_obj_4sfml_7network_7network_Ftp;
struct __pyx_obj_4sfml_7network_7network_TcpSocket;
struct __pyx_obj_4sfml_7network_7network_IpAddress;
struct __pyx_obj_4sfml_7network_7network_HttpResponse;

/* "sfml/network/network.pyx":203
 * 
 * 
 * cdef class FtpResponse:             # <<<<<<<<<<<<<<
 *     cdef declnetwork.ftp.Response *thisptr
 * 
 */
struct __pyx_obj_4sfml_7network_7network_FtpResponse {
  PyObject_HEAD
  sf::Ftp::Response *thisptr;
};


/* "sfml/network/network.pyx":222
 * 
 * 
 * cdef class FtpDirectoryResponse(FtpResponse):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, FtpResponse response):
 *         self.thisptr = <declnetwork.ftp.Response*>new declnetwork.ftp.DirectoryResponse(response.thisptr[0])
 */
struct __pyx_obj_4sfml_7network_7network_FtpDirectoryResponse {
  struct __pyx_obj_4sfml_7network_7network_FtpResponse __pyx_base;
};


/* "sfml/network/network.pyx":230
 * 
 * 
 * cdef class ListingResponse(FtpResponse):             # <<<<<<<<<<<<<<
 *     #def __cinit__(self, FtpResponse response):
 *         #self.thisptr = <declnetwork.ftp.Response*>new declnetwork.ftp.ListingResponse()
 */
struct __pyx_obj_4sfml_7network_7network_ListingResponse {
  struct __pyx_obj_4sfml_7network_7network_FtpResponse __pyx_base;
};


/* "sfml/network/network.pyx":70
 *     return ret
 * 
 * cdef class Socket:             # <<<<<<<<<<<<<<
 *     DONE = declnetwork.Done
 *     NOT_READY = declnetwork.NotReady
 */
struct __pyx_obj_4sfml_7network_7network_Socket {
  PyObject_HEAD
  sf::Socket *thisptr;
};


/* "sfml/network/network.pyx":131
 *     return ret
 * 
 * cdef class UdpSocket(Socket):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.UdpSocket()
 */
struct __pyx_obj_4sfml_7network_7network_UdpSocket {
  struct __pyx_obj_4sfml_7network_7network_Socket __pyx_base;
};


/* "sfml/network/network.pyx":368
 *             #return self.thisptr.GetBody()
 * 
 * cdef class Http:             # <<<<<<<<<<<<<<
 *     cdef declnetwork.Http *thisptr
 * 
 */
struct __pyx_obj_4sfml_7network_7network_Http {
  PyObject_HEAD
  sf::Http *thisptr;
};


/* "sfml/network/network.pyx":282
 * 
 * 
 * cdef class HttpRequest:             # <<<<<<<<<<<<<<
 *     GET = declnetwork.http.request.Get
 *     POST = declnetwork.http.request.Post
 */
struct __pyx_obj_4sfml_7network_7network_HttpRequest {
  PyObject_HEAD
  sf::Http::Request *thisptr;
};


/* "sfml/network/network.pyx":181
 * 
 * 
 * cdef class SocketSelector:             # <<<<<<<<<<<<<<
 *     cdef declnetwork.SocketSelector *thisptr
 * 
 */
struct __pyx_obj_4sfml_7network_7network_SocketSelector {
  PyObject_HEAD
  sf::SocketSelector *thisptr;
};


/* "sfml/network/network.pyx":157
 *             return (<declnetwork.UdpSocket*>self.thisptr).GetLocalPort()
 * 
 * cdef class TcpListener(Socket):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpListener()
 */
struct __pyx_obj_4sfml_7network_7network_TcpListener {
  struct __pyx_obj_4sfml_7network_7network_Socket __pyx_base;
};


/* "sfml/network/network.pyx":238
 * 
 * 
 * cdef class Ftp:             # <<<<<<<<<<<<<<
 *     def connect(self):
 *         pass
 */
struct __pyx_obj_4sfml_7network_7network_Ftp {
  PyObject_HEAD
};


/* "sfml/network/network.pyx":90
 *             else: self.thisptr.SetBlocking(False)
 * 
 * cdef class TcpSocket(Socket):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpSocket()
 */
struct __pyx_obj_4sfml_7network_7network_TcpSocket {
  struct __pyx_obj_4sfml_7network_7network_Socket __pyx_base;
};


/* "sfml/network/network.pyx":20
 * 
 * 
 * cdef class IpAddress:             # <<<<<<<<<<<<<<
 *     cdef declnetwork.IpAddress *thisptr
 * 
 */
struct __pyx_obj_4sfml_7network_7network_IpAddress {
  PyObject_HEAD
  sf::IpAddress *thisptr;
};


/* "sfml/network/network.pyx":316
 *             self.thisptr.SetBody(<char*>body)
 * 
 * cdef class HttpResponse:             # <<<<<<<<<<<<<<
 *     OK = declnetwork.http.http_response.Ok
 *     CREATED = declnetwork.http.http_response.Created
 */
struct __pyx_obj_4sfml_7network_7network_HttpResponse {
  PyObject_HEAD
  sf::Http::Response *thisptr;
};


#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_tp_new(PyObject* type_obj) {
    return (PyObject*) (((PyTypeObject*)(type_obj))->tp_new(
        (PyTypeObject*)(type_obj), __pyx_empty_tuple, NULL));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method); /*proto*/

static CYTHON_INLINE sf::Uint8 __Pyx_PyInt_from_py_sf__Uint8(PyObject *);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Uint32(sf::Uint32);

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE sf::Uint32 __Pyx_PyInt_from_py_sf__Uint32(PyObject *);

static int __Pyx_check_binary_version(void);

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'declsystem' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'sfml.network.ftp' */

/* Module declarations from 'sfml.network.http.request' */

/* Module declarations from 'sfml.network.http.response' */

/* Module declarations from 'sfml.network.http' */

/* Module declarations from 'sfml.network.declnetwork' */

/* Module declarations from 'sfml.network.network' */
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_IpAddress = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_Socket = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_TcpSocket = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_UdpSocket = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_TcpListener = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_SocketSelector = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_FtpResponse = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_FtpDirectoryResponse = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_ListingResponse = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_Ftp = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_HttpRequest = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_HttpResponse = 0;
static PyTypeObject *__pyx_ptype_4sfml_7network_7network_Http = 0;
static PyObject *__pyx_f_4sfml_7network_7network_wrap_ipaddress_instance(sf::IpAddress *); /*proto*/
static PyObject *__pyx_f_4sfml_7network_7network_wrap_tcpsocket_instance(sf::TcpSocket *); /*proto*/
#define __Pyx_MODULE_NAME "sfml.network.network"
int __pyx_module_is_main_sfml__network__network = 0;

/* Implementation of 'sfml.network.network' */
static PyObject *__pyx_builtin_NotImplementedError;
static char __pyx_k_1[] = "IpAddress({0})";
static char __pyx_k_2[] = "Socket is abstact";
static char __pyx_k_4[] = "TcpSocket()";
static char __pyx_k_5[] = "";
static char __pyx_k_7[] = "/";
static char __pyx_k_9[] = "RANGE_NOT_SATISFIABLE";
static char __pyx_k_10[] = "INTERNAL_SERVER_ERROR";
static char __pyx_k_11[] = "SERVICE_NOT_AVAILABLE";
static char __pyx_k_12[] = "VERSION_NOT_SUPPORTED";
static char __pyx_k__OK[] = "OK";
static char __pyx_k__Ok[] = "Ok";
static char __pyx_k__b1[] = "b1";
static char __pyx_k__b2[] = "b2";
static char __pyx_k__b3[] = "b3";
static char __pyx_k__b4[] = "b4";
static char __pyx_k__ip[] = "ip";
static char __pyx_k__GET[] = "GET";
static char __pyx_k__ftp[] = "ftp";
static char __pyx_k__uri[] = "uri";
static char __pyx_k__DONE[] = "DONE";
static char __pyx_k__HEAD[] = "HEAD";
static char __pyx_k__POST[] = "POST";
static char __pyx_k__body[] = "body";
static char __pyx_k__code[] = "code";
static char __pyx_k__data[] = "data";
static char __pyx_k__host[] = "host";
static char __pyx_k__http[] = "http";
static char __pyx_k__port[] = "port";
static char __pyx_k__ERROR[] = "ERROR";
static char __pyx_k__format[] = "format";
static char __pyx_k__method[] = "method";
static char __pyx_k__CREATED[] = "CREATED";
static char __pyx_k__Created[] = "Created";
static char __pyx_k__message[] = "message";
static char __pyx_k__request[] = "request";
static char __pyx_k__timeout[] = "timeout";
static char __pyx_k__ACCEPTED[] = "ACCEPTED";
static char __pyx_k__Accepted[] = "Accepted";
static char __pyx_k__NotFound[] = "NotFound";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__response[] = "response";
static char __pyx_k__FORBIDDEN[] = "FORBIDDEN";
static char __pyx_k__Forbidden[] = "Forbidden";
static char __pyx_k__NOT_FOUND[] = "NOT_FOUND";
static char __pyx_k__NOT_READY[] = "NOT_READY";
static char __pyx_k__NoContent[] = "NoContent";
static char __pyx_k____class__[] = "__class__";
static char __pyx_k__BadGateway[] = "BadGateway";
static char __pyx_k__BadRequest[] = "BadRequest";
static char __pyx_k__NO_CONTENT[] = "NO_CONTENT";
static char __pyx_k__from_bytes[] = "from_bytes";
static char __pyx_k__from_tuple[] = "from_tuple";
static char __pyx_k__BAD_GATEWAY[] = "BAD_GATEWAY";
static char __pyx_k__BAD_REQUEST[] = "BAD_REQUEST";
static char __pyx_k__NotModified[] = "NotModified";
static char __pyx_k__declnetwork[] = "declnetwork";
static char __pyx_k__from_string[] = "from_string";
static char __pyx_k__DISCONNECTED[] = "DISCONNECTED";
static char __pyx_k__NOT_MODIFIED[] = "NOT_MODIFIED";
static char __pyx_k__ResetContent[] = "ResetContent";
static char __pyx_k__UNAUTHORIZED[] = "UNAUTHORIZED";
static char __pyx_k__Unauthorized[] = "Unauthorized";
static char __pyx_k__from_integer[] = "from_integer";
static char __pyx_k__ftp_response[] = "ftp_response";
static char __pyx_k__RESET_CONTENT[] = "RESET_CONTENT";
static char __pyx_k__http_response[] = "http_response";
static char __pyx_k__local_address[] = "local_address";
static char __pyx_k__GatewayTimeout[] = "GatewayTimeout";
static char __pyx_k__NotImplemented[] = "NotImplemented";
static char __pyx_k__PartialContent[] = "PartialContent";
static char __pyx_k__public_address[] = "public_address";
static char __pyx_k__GATEWAY_TIMEOUT[] = "GATEWAY_TIMEOUT";
static char __pyx_k__InvalidResponse[] = "InvalidResponse";
static char __pyx_k__MultipleChoices[] = "MultipleChoices";
static char __pyx_k__NOT_IMPLEMENTED[] = "NOT_IMPLEMENTED";
static char __pyx_k__PARTIAL_CONTENT[] = "PARTIAL_CONTENT";
static char __pyx_k__ConnectionFailed[] = "ConnectionFailed";
static char __pyx_k__INVALID_RESPONSE[] = "INVALID_RESPONSE";
static char __pyx_k__MULTIPLE_CHOICES[] = "MULTIPLE_CHOICES";
static char __pyx_k__MovedPermanently[] = "MovedPermanently";
static char __pyx_k__MovedTemporarily[] = "MovedTemporarily";
static char __pyx_k__CONNECTION_FAILED[] = "CONNECTION_FAILED";
static char __pyx_k__MOVED_PERMANENTLY[] = "MOVED_PERMANENTLY";
static char __pyx_k__MOVED_TEMPORARILY[] = "MOVED_TEMPORARILY";
static char __pyx_k__InternalServerError[] = "InternalServerError";
static char __pyx_k__NotImplementedError[] = "NotImplementedError";
static char __pyx_k__RangeNotSatisfiable[] = "RangeNotSatisfiable";
static char __pyx_k__ServiceNotAvailable[] = "ServiceNotAvailable";
static char __pyx_k__VersionNotSupported[] = "VersionNotSupported";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_n_s_10;
static PyObject *__pyx_n_s_11;
static PyObject *__pyx_n_s_12;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_b_5;
static PyObject *__pyx_kp_b_7;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_n_s__ACCEPTED;
static PyObject *__pyx_n_s__Accepted;
static PyObject *__pyx_n_s__BAD_GATEWAY;
static PyObject *__pyx_n_s__BAD_REQUEST;
static PyObject *__pyx_n_s__BadGateway;
static PyObject *__pyx_n_s__BadRequest;
static PyObject *__pyx_n_s__CONNECTION_FAILED;
static PyObject *__pyx_n_s__CREATED;
static PyObject *__pyx_n_s__ConnectionFailed;
static PyObject *__pyx_n_s__Created;
static PyObject *__pyx_n_s__DISCONNECTED;
static PyObject *__pyx_n_s__DONE;
static PyObject *__pyx_n_s__ERROR;
static PyObject *__pyx_n_s__FORBIDDEN;
static PyObject *__pyx_n_s__Forbidden;
static PyObject *__pyx_n_s__GATEWAY_TIMEOUT;
static PyObject *__pyx_n_s__GET;
static PyObject *__pyx_n_s__GatewayTimeout;
static PyObject *__pyx_n_s__HEAD;
static PyObject *__pyx_n_s__INVALID_RESPONSE;
static PyObject *__pyx_n_s__InternalServerError;
static PyObject *__pyx_n_s__InvalidResponse;
static PyObject *__pyx_n_s__MOVED_PERMANENTLY;
static PyObject *__pyx_n_s__MOVED_TEMPORARILY;
static PyObject *__pyx_n_s__MULTIPLE_CHOICES;
static PyObject *__pyx_n_s__MovedPermanently;
static PyObject *__pyx_n_s__MovedTemporarily;
static PyObject *__pyx_n_s__MultipleChoices;
static PyObject *__pyx_n_s__NOT_FOUND;
static PyObject *__pyx_n_s__NOT_IMPLEMENTED;
static PyObject *__pyx_n_s__NOT_MODIFIED;
static PyObject *__pyx_n_s__NOT_READY;
static PyObject *__pyx_n_s__NO_CONTENT;
static PyObject *__pyx_n_s__NoContent;
static PyObject *__pyx_n_s__NotFound;
static PyObject *__pyx_n_s__NotImplemented;
static PyObject *__pyx_n_s__NotImplementedError;
static PyObject *__pyx_n_s__NotModified;
static PyObject *__pyx_n_s__OK;
static PyObject *__pyx_n_s__Ok;
static PyObject *__pyx_n_s__PARTIAL_CONTENT;
static PyObject *__pyx_n_s__POST;
static PyObject *__pyx_n_s__PartialContent;
static PyObject *__pyx_n_s__RESET_CONTENT;
static PyObject *__pyx_n_s__RangeNotSatisfiable;
static PyObject *__pyx_n_s__ResetContent;
static PyObject *__pyx_n_s__ServiceNotAvailable;
static PyObject *__pyx_n_s__UNAUTHORIZED;
static PyObject *__pyx_n_s__Unauthorized;
static PyObject *__pyx_n_s__VersionNotSupported;
static PyObject *__pyx_n_s____class__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__b1;
static PyObject *__pyx_n_s__b2;
static PyObject *__pyx_n_s__b3;
static PyObject *__pyx_n_s__b4;
static PyObject *__pyx_n_s__body;
static PyObject *__pyx_n_s__code;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__declnetwork;
static PyObject *__pyx_n_s__format;
static PyObject *__pyx_n_s__from_bytes;
static PyObject *__pyx_n_s__from_integer;
static PyObject *__pyx_n_s__from_string;
static PyObject *__pyx_n_s__from_tuple;
static PyObject *__pyx_n_s__ftp;
static PyObject *__pyx_n_s__ftp_response;
static PyObject *__pyx_n_s__host;
static PyObject *__pyx_n_s__http;
static PyObject *__pyx_n_s__http_response;
static PyObject *__pyx_n_s__ip;
static PyObject *__pyx_n_s__local_address;
static PyObject *__pyx_n_s__message;
static PyObject *__pyx_n_s__method;
static PyObject *__pyx_n_s__port;
static PyObject *__pyx_n_s__public_address;
static PyObject *__pyx_n_s__request;
static PyObject *__pyx_n_s__response;
static PyObject *__pyx_n_s__timeout;
static PyObject *__pyx_n_s__uri;
static int __pyx_k_6;
static int __pyx_k_8;
static PyObject *__pyx_k_tuple_3;

/* "sfml/network/network.pyx":26
 *     #LOCAL_HOST = declnetwork.LocalHost
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.thisptr = new declnetwork.IpAddress()
 * 
 */

static int __pyx_pf_4sfml_7network_7network_9IpAddress___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_9IpAddress___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "sfml/network/network.pyx":27
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = new declnetwork.IpAddress()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_4sfml_7network_7network_IpAddress *)__pyx_v_self)->thisptr = new sf::IpAddress();

  __pyx_r = 0;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":29
 *         self.thisptr = new declnetwork.IpAddress()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_4sfml_7network_7network_9IpAddress_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_4sfml_7network_7network_9IpAddress_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "sfml/network/network.pyx":30
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  delete ((struct __pyx_obj_4sfml_7network_7network_IpAddress *)__pyx_v_self)->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "sfml/network/network.pyx":32
 *         del self.thisptr
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "IpAddress({0})".format(self.thisptr.ToString().c_str())
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_2__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_2__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__");

  /* "sfml/network/network.pyx":33
 * 
 *     def __str__(self):
 *         return "IpAddress({0})".format(self.thisptr.ToString().c_str())             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_1), __pyx_n_s__format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_FromString(((struct __pyx_obj_4sfml_7network_7network_IpAddress *)__pyx_v_self)->thisptr->ToString().c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.network.network.IpAddress.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":36
 * 
 *     @classmethod
 *     def from_integer(self, declnetwork.Uint32 value):             # <<<<<<<<<<<<<<
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(value)
 *         return wrap_ipaddress_instance(p)
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_3from_integer(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_3from_integer(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  sf::Uint32 __pyx_v_value;
  sf::IpAddress *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_integer");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_from_py_sf__Uint32(__pyx_arg_value); if (unlikely((__pyx_v_value == (sf::Uint32)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.IpAddress.from_integer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":37
 *     @classmethod
 *     def from_integer(self, declnetwork.Uint32 value):
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(value)             # <<<<<<<<<<<<<<
 *         return wrap_ipaddress_instance(p)
 * 
 */
  __pyx_v_p = new sf::IpAddress(__pyx_v_value);

  /* "sfml/network/network.pyx":38
 *     def from_integer(self, declnetwork.Uint32 value):
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(value)
 *         return wrap_ipaddress_instance(p)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4sfml_7network_7network_wrap_ipaddress_instance(__pyx_v_p); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.IpAddress.from_integer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":41
 * 
 *     @classmethod
 *     def from_string(self, bytes value):             # <<<<<<<<<<<<<<
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(<char*>value)
 *         return wrap_ipaddress_instance(p)
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_4from_string(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_4from_string(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  sf::IpAddress *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_string");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyBytes_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":42
 *     @classmethod
 *     def from_string(self, bytes value):
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(<char*>value)             # <<<<<<<<<<<<<<
 *         return wrap_ipaddress_instance(p)
 * 
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_value)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_p = new sf::IpAddress(((char *)__pyx_t_1));

  /* "sfml/network/network.pyx":43
 *     def from_string(self, bytes value):
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(<char*>value)
 *         return wrap_ipaddress_instance(p)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_4sfml_7network_7network_wrap_ipaddress_instance(__pyx_v_p); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.network.network.IpAddress.from_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":46
 * 
 *     @classmethod
 *     def from_bytes(self, declnetwork.Uint8 b1, declnetwork.Uint8 b2, declnetwork.Uint8 b3, declnetwork.Uint8 b4):             # <<<<<<<<<<<<<<
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(b1, b2, b3, b4)
 *         return wrap_ipaddress_instance(p)
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_5from_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_5from_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  sf::Uint8 __pyx_v_b1;
  sf::Uint8 __pyx_v_b2;
  sf::Uint8 __pyx_v_b3;
  sf::Uint8 __pyx_v_b4;
  sf::IpAddress *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__b1,&__pyx_n_s__b2,&__pyx_n_s__b3,&__pyx_n_s__b4,0};
  __Pyx_RefNannySetupContext("from_bytes");
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_bytes", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b3);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_bytes", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b4);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_bytes", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "from_bytes") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_b1 = __Pyx_PyInt_from_py_sf__Uint8(values[0]); if (unlikely((__pyx_v_b1 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b2 = __Pyx_PyInt_from_py_sf__Uint8(values[1]); if (unlikely((__pyx_v_b2 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b3 = __Pyx_PyInt_from_py_sf__Uint8(values[2]); if (unlikely((__pyx_v_b3 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b4 = __Pyx_PyInt_from_py_sf__Uint8(values[3]); if (unlikely((__pyx_v_b4 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_bytes", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.IpAddress.from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":47
 *     @classmethod
 *     def from_bytes(self, declnetwork.Uint8 b1, declnetwork.Uint8 b2, declnetwork.Uint8 b3, declnetwork.Uint8 b4):
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(b1, b2, b3, b4)             # <<<<<<<<<<<<<<
 *         return wrap_ipaddress_instance(p)
 * 
 */
  __pyx_v_p = new sf::IpAddress(__pyx_v_b1, __pyx_v_b2, __pyx_v_b3, __pyx_v_b4);

  /* "sfml/network/network.pyx":48
 *     def from_bytes(self, declnetwork.Uint8 b1, declnetwork.Uint8 b2, declnetwork.Uint8 b3, declnetwork.Uint8 b4):
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(b1, b2, b3, b4)
 *         return wrap_ipaddress_instance(p)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4sfml_7network_7network_wrap_ipaddress_instance(__pyx_v_p); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.IpAddress.from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":51
 * 
 *     @classmethod
 *     def from_tuple(self, tuple value):             # <<<<<<<<<<<<<<
 *         b1, b2, b3, b4 = value
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_6from_tuple(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_6from_tuple(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_b1 = NULL;
  PyObject *__pyx_v_b2 = NULL;
  PyObject *__pyx_v_b3 = NULL;
  PyObject *__pyx_v_b4 = NULL;
  sf::IpAddress *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  sf::Uint8 __pyx_t_5;
  sf::Uint8 __pyx_t_6;
  sf::Uint8 __pyx_t_7;
  sf::Uint8 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_tuple");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":52
 *     @classmethod
 *     def from_tuple(self, tuple value):
 *         b1, b2, b3, b4 = value             # <<<<<<<<<<<<<<
 * 
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(b1, b2, b3, b4)
 */
  if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_value)))) {
    PyObject* sequence = ((PyObject *)__pyx_v_value);
    if (unlikely(PyTuple_GET_SIZE(sequence) != 4)) {
      if (PyTuple_GET_SIZE(sequence) > 4) __Pyx_RaiseTooManyValuesError(4);
      else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
  } else {
    __Pyx_UnpackTupleError(((PyObject *)__pyx_v_value), 4);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_b1 = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_b2 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_b3 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_b4 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "sfml/network/network.pyx":54
 *         b1, b2, b3, b4 = value
 * 
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(b1, b2, b3, b4)             # <<<<<<<<<<<<<<
 *         return wrap_ipaddress_instance(p)
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_from_py_sf__Uint8(__pyx_v_b1); if (unlikely((__pyx_t_5 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyInt_from_py_sf__Uint8(__pyx_v_b2); if (unlikely((__pyx_t_6 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyInt_from_py_sf__Uint8(__pyx_v_b3); if (unlikely((__pyx_t_7 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __Pyx_PyInt_from_py_sf__Uint8(__pyx_v_b4); if (unlikely((__pyx_t_8 == (sf::Uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_p = new sf::IpAddress(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);

  /* "sfml/network/network.pyx":55
 * 
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(b1, b2, b3, b4)
 *         return wrap_ipaddress_instance(p)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_f_4sfml_7network_7network_wrap_ipaddress_instance(__pyx_v_p); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.network.network.IpAddress.from_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b1);
  __Pyx_XDECREF(__pyx_v_b2);
  __Pyx_XDECREF(__pyx_v_b3);
  __Pyx_XDECREF(__pyx_v_b4);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":58
 * 
 *     @classmethod
 *     def local_address(self):             # <<<<<<<<<<<<<<
 *         return IpAddress.from_integer(declnetwork.GetLocalAddress().ToInteger())
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_7local_address(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_7local_address(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("local_address");

  /* "sfml/network/network.pyx":59
 *     @classmethod
 *     def local_address(self):
 *         return IpAddress.from_integer(declnetwork.GetLocalAddress().ToInteger())             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_4sfml_7network_7network_IpAddress)), __pyx_n_s__from_integer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_to_py_sf__Uint32(sf::IpAddress::GetLocalAddress().ToInteger()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.network.network.IpAddress.local_address", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":62
 * 
 *     @classmethod
 *     def public_address(self, declnetwork.Uint32 timeout=0):             # <<<<<<<<<<<<<<
 *         return IpAddress.from_integer(declnetwork.GetPublicAddress(timeout).ToInteger())
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_8public_address(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9IpAddress_8public_address(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  sf::Uint32 __pyx_v_timeout;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__timeout,0};
  __Pyx_RefNannySetupContext("public_address");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__timeout);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "public_address") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_timeout = __Pyx_PyInt_from_py_sf__Uint32(values[0]); if (unlikely((__pyx_v_timeout == (sf::Uint32)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_timeout = ((sf::Uint32)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("public_address", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.IpAddress.public_address", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":63
 *     @classmethod
 *     def public_address(self, declnetwork.Uint32 timeout=0):
 *         return IpAddress.from_integer(declnetwork.GetPublicAddress(timeout).ToInteger())             # <<<<<<<<<<<<<<
 * 
 * cdef wrap_ipaddress_instance(declnetwork.IpAddress* instance):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_4sfml_7network_7network_IpAddress)), __pyx_n_s__from_integer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_to_py_sf__Uint32(sf::IpAddress::GetPublicAddress(__pyx_v_timeout).ToInteger()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.network.network.IpAddress.public_address", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":65
 *         return IpAddress.from_integer(declnetwork.GetPublicAddress(timeout).ToInteger())
 * 
 * cdef wrap_ipaddress_instance(declnetwork.IpAddress* instance):             # <<<<<<<<<<<<<<
 *     cdef IpAddress ret = IpAddress.__new__(IpAddress)
 *     ret.thisptr = instance
 */

static PyObject *__pyx_f_4sfml_7network_7network_wrap_ipaddress_instance(sf::IpAddress *__pyx_v_instance) {
  struct __pyx_obj_4sfml_7network_7network_IpAddress *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_ipaddress_instance");

  /* "sfml/network/network.pyx":66
 * 
 * cdef wrap_ipaddress_instance(declnetwork.IpAddress* instance):
 *     cdef IpAddress ret = IpAddress.__new__(IpAddress)             # <<<<<<<<<<<<<<
 *     ret.thisptr = instance
 *     return ret
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_4sfml_7network_7network_IpAddress)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_7network_7network_IpAddress)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((struct __pyx_obj_4sfml_7network_7network_IpAddress *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/network/network.pyx":67
 * cdef wrap_ipaddress_instance(declnetwork.IpAddress* instance):
 *     cdef IpAddress ret = IpAddress.__new__(IpAddress)
 *     ret.thisptr = instance             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->thisptr = __pyx_v_instance;

  /* "sfml/network/network.pyx":68
 *     cdef IpAddress ret = IpAddress.__new__(IpAddress)
 *     ret.thisptr = instance
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class Socket:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.wrap_ipaddress_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":78
 *     cdef declnetwork.Socket *thisptr
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if self.__class__ == Socket:
 *             raise NotImplementedError('Socket is abstact')
 */

static int __pyx_pf_4sfml_7network_7network_6Socket___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_6Socket___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "sfml/network/network.pyx":79
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == Socket:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError('Socket is abstact')
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)((PyObject*)__pyx_ptype_4sfml_7network_7network_Socket)), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "sfml/network/network.pyx":80
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == Socket:
 *             raise NotImplementedError('Socket is abstact')             # <<<<<<<<<<<<<<
 * 
 *     property blocking:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.network.network.Socket.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":83
 * 
 *     property blocking:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.IsBlocking()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_6Socket_8blocking___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_6Socket_8blocking___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":84
 *     property blocking:
 *         def __get__(self):
 *             return self.thisptr.IsBlocking()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_4sfml_7network_7network_Socket *)__pyx_v_self)->thisptr->IsBlocking()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.Socket.blocking.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":86
 *             return self.thisptr.IsBlocking()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value: self.thisptr.SetBlocking(True)
 *             else: self.thisptr.SetBlocking(False)
 */

static int __pyx_pf_4sfml_7network_7network_6Socket_8blocking_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_4sfml_7network_7network_6Socket_8blocking_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__");

  /* "sfml/network/network.pyx":87
 * 
 *         def __set__(self, value):
 *             if value: self.thisptr.SetBlocking(True)             # <<<<<<<<<<<<<<
 *             else: self.thisptr.SetBlocking(False)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {
    ((struct __pyx_obj_4sfml_7network_7network_Socket *)__pyx_v_self)->thisptr->SetBlocking(1);
    goto __pyx_L5;
  }
  /*else*/ {

    /* "sfml/network/network.pyx":88
 *         def __set__(self, value):
 *             if value: self.thisptr.SetBlocking(True)
 *             else: self.thisptr.SetBlocking(False)             # <<<<<<<<<<<<<<
 * 
 * cdef class TcpSocket(Socket):
 */
    ((struct __pyx_obj_4sfml_7network_7network_Socket *)__pyx_v_self)->thisptr->SetBlocking(0);
  }
  __pyx_L5:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.Socket.blocking.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":91
 * 
 * cdef class TcpSocket(Socket):
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpSocket()
 * 
 */

static int __pyx_pf_4sfml_7network_7network_9TcpSocket___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_9TcpSocket___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "sfml/network/network.pyx":92
 * cdef class TcpSocket(Socket):
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpSocket()             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  ((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr = ((sf::Socket *)new sf::TcpSocket());

  __pyx_r = 0;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":94
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpSocket()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "TcpSocket()"
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_1__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_1__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__");

  /* "sfml/network/network.pyx":95
 * 
 *     def __str__(self):
 *         return "TcpSocket()"             # <<<<<<<<<<<<<<
 * 
 *     def connect(self, IpAddress ip, unsigned short port, declnetwork.Uint32 timeout=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  __pyx_r = ((PyObject *)__pyx_kp_s_4);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":97
 *         return "TcpSocket()"
 * 
 *     def connect(self, IpAddress ip, unsigned short port, declnetwork.Uint32 timeout=0):             # <<<<<<<<<<<<<<
 *         return (<declnetwork.TcpSocket*>self.thisptr).Connect(ip.thisptr[0], port, timeout)
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_2connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_2connect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4sfml_7network_7network_IpAddress *__pyx_v_ip = 0;
  unsigned short __pyx_v_port;
  sf::Uint32 __pyx_v_timeout;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ip,&__pyx_n_s__port,&__pyx_n_s__timeout,0};
  __Pyx_RefNannySetupContext("connect");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ip);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__port);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connect", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__timeout);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "connect") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ip = ((struct __pyx_obj_4sfml_7network_7network_IpAddress *)values[0]);
    __pyx_v_port = __Pyx_PyInt_AsUnsignedShort(values[1]); if (unlikely((__pyx_v_port == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_timeout = __Pyx_PyInt_from_py_sf__Uint32(values[2]); if (unlikely((__pyx_v_timeout == (sf::Uint32)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_timeout = ((sf::Uint32)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connect", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ip), __pyx_ptype_4sfml_7network_7network_IpAddress, 1, "ip", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":98
 * 
 *     def connect(self, IpAddress ip, unsigned short port, declnetwork.Uint32 timeout=0):
 *         return (<declnetwork.TcpSocket*>self.thisptr).Connect(ip.thisptr[0], port, timeout)             # <<<<<<<<<<<<<<
 * 
 *     def disconnect(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((sf::TcpSocket *)((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Connect((__pyx_v_ip->thisptr[0]), __pyx_v_port, __pyx_v_timeout)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":100
 *         return (<declnetwork.TcpSocket*>self.thisptr).Connect(ip.thisptr[0], port, timeout)
 * 
 *     def disconnect(self):             # <<<<<<<<<<<<<<
 *         (<declnetwork.TcpSocket*>self.thisptr).Disconnect()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_3disconnect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_3disconnect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disconnect");

  /* "sfml/network/network.pyx":101
 * 
 *     def disconnect(self):
 *         (<declnetwork.TcpSocket*>self.thisptr).Disconnect()             # <<<<<<<<<<<<<<
 * 
 *     def send(self, bytes data):
 */
  ((sf::TcpSocket *)((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Disconnect();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":103
 *         (<declnetwork.TcpSocket*>self.thisptr).Disconnect()
 * 
 *     def send(self, bytes data):             # <<<<<<<<<<<<<<
 *         return (<declnetwork.TcpSocket*>self.thisptr).Send(<char*>data, len(data))
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_4send(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_4send(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("send");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":104
 * 
 *     def send(self, bytes data):
 *         return (<declnetwork.TcpSocket*>self.thisptr).Send(<char*>data, len(data))             # <<<<<<<<<<<<<<
 * 
 *     def recieve(self, size_t length):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); 
  __pyx_t_3 = PyInt_FromLong(((sf::TcpSocket *)((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Send(((char *)__pyx_t_1), __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.send", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":106
 *         return (<declnetwork.TcpSocket*>self.thisptr).Send(<char*>data, len(data))
 * 
 *     def recieve(self, size_t length):             # <<<<<<<<<<<<<<
 *         cdef char* c_data = <char*>declnetwork.malloc(length * sizeof(char))
 *         cdef size_t recieved = 0
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_5recieve(PyObject *__pyx_v_self, PyObject *__pyx_arg_length); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_5recieve(PyObject *__pyx_v_self, PyObject *__pyx_arg_length) {
  size_t __pyx_v_length;
  char *__pyx_v_c_data;
  size_t __pyx_v_recieved;
  int __pyx_v_status;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("recieve");
  assert(__pyx_arg_length); {
    __pyx_v_length = __Pyx_PyInt_AsSize_t(__pyx_arg_length); if (unlikely((__pyx_v_length == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.recieve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":107
 * 
 *     def recieve(self, size_t length):
 *         cdef char* c_data = <char*>declnetwork.malloc(length * sizeof(char))             # <<<<<<<<<<<<<<
 *         cdef size_t recieved = 0
 * 
 */
  __pyx_v_c_data = ((char *)malloc((__pyx_v_length * (sizeof(char)))));

  /* "sfml/network/network.pyx":108
 *     def recieve(self, size_t length):
 *         cdef char* c_data = <char*>declnetwork.malloc(length * sizeof(char))
 *         cdef size_t recieved = 0             # <<<<<<<<<<<<<<
 * 
 *         cdef int status = (<declnetwork.TcpSocket*>self.thisptr).Receive(c_data, length, recieved)
 */
  __pyx_v_recieved = 0;

  /* "sfml/network/network.pyx":110
 *         cdef size_t recieved = 0
 * 
 *         cdef int status = (<declnetwork.TcpSocket*>self.thisptr).Receive(c_data, length, recieved)             # <<<<<<<<<<<<<<
 *         cdef bytes data = c_data
 *         return (status, data)
 */
  __pyx_v_status = ((sf::TcpSocket *)((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Receive(__pyx_v_c_data, __pyx_v_length, __pyx_v_recieved);

  /* "sfml/network/network.pyx":111
 * 
 *         cdef int status = (<declnetwork.TcpSocket*>self.thisptr).Receive(c_data, length, recieved)
 *         cdef bytes data = c_data             # <<<<<<<<<<<<<<
 *         return (status, data)
 * 
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_c_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "sfml/network/network.pyx":112
 *         cdef int status = (<declnetwork.TcpSocket*>self.thisptr).Receive(c_data, length, recieved)
 *         cdef bytes data = c_data
 *         return (status, data)             # <<<<<<<<<<<<<<
 * 
 *     property local_port:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
  __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.recieve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":115
 * 
 *     property local_port:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declnetwork.TcpSocket*>self.thisptr).GetLocalPort()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_10local_port___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_10local_port___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":116
 *     property local_port:
 *         def __get__(self):
 *             return (<declnetwork.TcpSocket*>self.thisptr).GetLocalPort()             # <<<<<<<<<<<<<<
 * 
 *     property remote_address:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((sf::TcpSocket *)((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr)->GetLocalPort()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.local_port.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":119
 * 
 *     property remote_address:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return IpAddress((<declnetwork.TcpSocket*>self.thisptr).GetRemoteAddress().ToInteger())
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_14remote_address___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_14remote_address___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":120
 *     property remote_address:
 *         def __get__(self):
 *             return IpAddress((<declnetwork.TcpSocket*>self.thisptr).GetRemoteAddress().ToInteger())             # <<<<<<<<<<<<<<
 * 
 *     property remote_port:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_sf__Uint32(((sf::TcpSocket *)((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr)->GetRemoteAddress().ToInteger()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sfml_7network_7network_IpAddress)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.remote_address.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":123
 * 
 *     property remote_port:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declnetwork.TcpSocket*>self.thisptr).GetRemotePort()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_11remote_port___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9TcpSocket_11remote_port___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":124
 *     property remote_port:
 *         def __get__(self):
 *             return (<declnetwork.TcpSocket*>self.thisptr).GetRemotePort()             # <<<<<<<<<<<<<<
 * 
 * cdef wrap_tcpsocket_instance(declnetwork.TcpSocket* instance):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((sf::TcpSocket *)((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_v_self)->__pyx_base.thisptr)->GetRemotePort()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.TcpSocket.remote_port.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":126
 *             return (<declnetwork.TcpSocket*>self.thisptr).GetRemotePort()
 * 
 * cdef wrap_tcpsocket_instance(declnetwork.TcpSocket* instance):             # <<<<<<<<<<<<<<
 *     cdef TcpSocket ret = TcpSocket.__new__(TcpSocket)
 *     ret.thisptr = <declnetwork.Socket*>instance
 */

static PyObject *__pyx_f_4sfml_7network_7network_wrap_tcpsocket_instance(sf::TcpSocket *__pyx_v_instance) {
  struct __pyx_obj_4sfml_7network_7network_TcpSocket *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_tcpsocket_instance");

  /* "sfml/network/network.pyx":127
 * 
 * cdef wrap_tcpsocket_instance(declnetwork.TcpSocket* instance):
 *     cdef TcpSocket ret = TcpSocket.__new__(TcpSocket)             # <<<<<<<<<<<<<<
 *     ret.thisptr = <declnetwork.Socket*>instance
 *     return ret
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_4sfml_7network_7network_TcpSocket)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4sfml_7network_7network_TcpSocket)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/network/network.pyx":128
 * cdef wrap_tcpsocket_instance(declnetwork.TcpSocket* instance):
 *     cdef TcpSocket ret = TcpSocket.__new__(TcpSocket)
 *     ret.thisptr = <declnetwork.Socket*>instance             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->__pyx_base.thisptr = ((sf::Socket *)__pyx_v_instance);

  /* "sfml/network/network.pyx":129
 *     cdef TcpSocket ret = TcpSocket.__new__(TcpSocket)
 *     ret.thisptr = <declnetwork.Socket*>instance
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class UdpSocket(Socket):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.wrap_tcpsocket_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":132
 * 
 * cdef class UdpSocket(Socket):
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.UdpSocket()
 * 
 */

static int __pyx_pf_4sfml_7network_7network_9UdpSocket___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_9UdpSocket___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "sfml/network/network.pyx":133
 * cdef class UdpSocket(Socket):
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.UdpSocket()             # <<<<<<<<<<<<<<
 * 
 *     def bind(self, unsigned short port):
 */
  ((struct __pyx_obj_4sfml_7network_7network_UdpSocket *)__pyx_v_self)->__pyx_base.thisptr = ((sf::Socket *)new sf::UdpSocket());

  __pyx_r = 0;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":135
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.UdpSocket()
 * 
 *     def bind(self, unsigned short port):             # <<<<<<<<<<<<<<
 *         (<declnetwork.UdpSocket*>self.thisptr).Bind(port)
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_1bind(PyObject *__pyx_v_self, PyObject *__pyx_arg_port); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_1bind(PyObject *__pyx_v_self, PyObject *__pyx_arg_port) {
  unsigned short __pyx_v_port;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bind");
  assert(__pyx_arg_port); {
    __pyx_v_port = __Pyx_PyInt_AsUnsignedShort(__pyx_arg_port); if (unlikely((__pyx_v_port == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.UdpSocket.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":136
 * 
 *     def bind(self, unsigned short port):
 *         (<declnetwork.UdpSocket*>self.thisptr).Bind(port)             # <<<<<<<<<<<<<<
 * 
 *     def unbind(self):
 */
  ((sf::UdpSocket *)((struct __pyx_obj_4sfml_7network_7network_UdpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Bind(__pyx_v_port);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":138
 *         (<declnetwork.UdpSocket*>self.thisptr).Bind(port)
 * 
 *     def unbind(self):             # <<<<<<<<<<<<<<
 *         (<declnetwork.UdpSocket*>self.thisptr).Unbind()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_2unbind(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_2unbind(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unbind");

  /* "sfml/network/network.pyx":139
 * 
 *     def unbind(self):
 *         (<declnetwork.UdpSocket*>self.thisptr).Unbind()             # <<<<<<<<<<<<<<
 * 
 *     def send(self, bytes data, IpAddress ip, unsigned short port):
 */
  ((sf::UdpSocket *)((struct __pyx_obj_4sfml_7network_7network_UdpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Unbind();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":141
 *         (<declnetwork.UdpSocket*>self.thisptr).Unbind()
 * 
 *     def send(self, bytes data, IpAddress ip, unsigned short port):             # <<<<<<<<<<<<<<
 *         return (<declnetwork.UdpSocket*>self.thisptr).Send(<char*>data, len(data), ip.thisptr[0], port)
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_3send(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_3send(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  struct __pyx_obj_4sfml_7network_7network_IpAddress *__pyx_v_ip = 0;
  unsigned short __pyx_v_port;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,&__pyx_n_s__ip,&__pyx_n_s__port,0};
  __Pyx_RefNannySetupContext("send");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ip);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__port);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("send", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "send") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_data = ((PyObject*)values[0]);
    __pyx_v_ip = ((struct __pyx_obj_4sfml_7network_7network_IpAddress *)values[1]);
    __pyx_v_port = __Pyx_PyInt_AsUnsignedShort(values[2]); if (unlikely((__pyx_v_port == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.UdpSocket.send", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ip), __pyx_ptype_4sfml_7network_7network_IpAddress, 1, "ip", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":142
 * 
 *     def send(self, bytes data, IpAddress ip, unsigned short port):
 *         return (<declnetwork.UdpSocket*>self.thisptr).Send(<char*>data, len(data), ip.thisptr[0], port)             # <<<<<<<<<<<<<<
 * 
 *     def receive(self, size_t length):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); 
  __pyx_t_3 = PyInt_FromLong(((sf::UdpSocket *)((struct __pyx_obj_4sfml_7network_7network_UdpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Send(((char *)__pyx_t_1), __pyx_t_2, (__pyx_v_ip->thisptr[0]), __pyx_v_port)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sfml.network.network.UdpSocket.send", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":144
 *         return (<declnetwork.UdpSocket*>self.thisptr).Send(<char*>data, len(data), ip.thisptr[0], port)
 * 
 *     def receive(self, size_t length):             # <<<<<<<<<<<<<<
 *         cdef char* data = <char*>declnetwork.malloc(length * sizeof(char))
 *         cdef size_t received = 0
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_4receive(PyObject *__pyx_v_self, PyObject *__pyx_arg_length); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_4receive(PyObject *__pyx_v_self, PyObject *__pyx_arg_length) {
  size_t __pyx_v_length;
  char *__pyx_v_data;
  size_t __pyx_v_received;
  struct __pyx_obj_4sfml_7network_7network_IpAddress *__pyx_v_ip = NULL;
  unsigned short __pyx_v_port;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("receive");
  assert(__pyx_arg_length); {
    __pyx_v_length = __Pyx_PyInt_AsSize_t(__pyx_arg_length); if (unlikely((__pyx_v_length == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.UdpSocket.receive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":145
 * 
 *     def receive(self, size_t length):
 *         cdef char* data = <char*>declnetwork.malloc(length * sizeof(char))             # <<<<<<<<<<<<<<
 *         cdef size_t received = 0
 *         ip = IpAddress()
 */
  __pyx_v_data = ((char *)malloc((__pyx_v_length * (sizeof(char)))));

  /* "sfml/network/network.pyx":146
 *     def receive(self, size_t length):
 *         cdef char* data = <char*>declnetwork.malloc(length * sizeof(char))
 *         cdef size_t received = 0             # <<<<<<<<<<<<<<
 *         ip = IpAddress()
 *         cdef unsigned short port = 0
 */
  __pyx_v_received = 0;

  /* "sfml/network/network.pyx":147
 *         cdef char* data = <char*>declnetwork.malloc(length * sizeof(char))
 *         cdef size_t received = 0
 *         ip = IpAddress()             # <<<<<<<<<<<<<<
 *         cdef unsigned short port = 0
 *         cdef int status = (<declnetwork.UdpSocket*>self.thisptr).Receive(data, length, received, ip.thisptr[0], port)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sfml_7network_7network_IpAddress)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ip = ((struct __pyx_obj_4sfml_7network_7network_IpAddress *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/network/network.pyx":148
 *         cdef size_t received = 0
 *         ip = IpAddress()
 *         cdef unsigned short port = 0             # <<<<<<<<<<<<<<
 *         cdef int status = (<declnetwork.UdpSocket*>self.thisptr).Receive(data, length, received, ip.thisptr[0], port)
 * 
 */
  __pyx_v_port = 0;

  /* "sfml/network/network.pyx":149
 *         ip = IpAddress()
 *         cdef unsigned short port = 0
 *         cdef int status = (<declnetwork.UdpSocket*>self.thisptr).Receive(data, length, received, ip.thisptr[0], port)             # <<<<<<<<<<<<<<
 * 
 *         return (status, data, ip, port)
 */
  __pyx_v_status = ((sf::UdpSocket *)((struct __pyx_obj_4sfml_7network_7network_UdpSocket *)__pyx_v_self)->__pyx_base.thisptr)->Receive(__pyx_v_data, __pyx_v_length, __pyx_v_received, (__pyx_v_ip->thisptr[0]), __pyx_v_port);

  /* "sfml/network/network.pyx":151
 *         cdef int status = (<declnetwork.UdpSocket*>self.thisptr).Receive(data, length, received, ip.thisptr[0], port)
 * 
 *         return (status, data, ip, port)             # <<<<<<<<<<<<<<
 * 
 *     property local_port:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyInt_FromLong(__pyx_v_port); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_ip));
  PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_v_ip));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_ip));
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sfml.network.network.UdpSocket.receive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ip);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":154
 * 
 *     property local_port:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declnetwork.UdpSocket*>self.thisptr).GetLocalPort()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_10local_port___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_9UdpSocket_10local_port___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":155
 *     property local_port:
 *         def __get__(self):
 *             return (<declnetwork.UdpSocket*>self.thisptr).GetLocalPort()             # <<<<<<<<<<<<<<
 * 
 * cdef class TcpListener(Socket):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((sf::UdpSocket *)((struct __pyx_obj_4sfml_7network_7network_UdpSocket *)__pyx_v_self)->__pyx_base.thisptr)->GetLocalPort()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.UdpSocket.local_port.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":158
 * 
 * cdef class TcpListener(Socket):
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpListener()
 * 
 */

static int __pyx_pf_4sfml_7network_7network_11TcpListener___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11TcpListener___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "sfml/network/network.pyx":159
 * cdef class TcpListener(Socket):
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpListener()             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  ((struct __pyx_obj_4sfml_7network_7network_TcpListener *)__pyx_v_self)->__pyx_base.thisptr = ((sf::Socket *)new sf::TcpListener());

  __pyx_r = 0;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":161
 *         self.thisptr = <declnetwork.Socket*>new declnetwork.TcpListener()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_1__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_1__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":164
 *         pass
 * 
 *     def listen(self, unsigned short port):             # <<<<<<<<<<<<<<
 *         return (<declnetwork.TcpListener*>self.thisptr).Listen(port)
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_2listen(PyObject *__pyx_v_self, PyObject *__pyx_arg_port); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_2listen(PyObject *__pyx_v_self, PyObject *__pyx_arg_port) {
  unsigned short __pyx_v_port;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listen");
  assert(__pyx_arg_port); {
    __pyx_v_port = __Pyx_PyInt_AsUnsignedShort(__pyx_arg_port); if (unlikely((__pyx_v_port == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.TcpListener.listen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":165
 * 
 *     def listen(self, unsigned short port):
 *         return (<declnetwork.TcpListener*>self.thisptr).Listen(port)             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((sf::TcpListener *)((struct __pyx_obj_4sfml_7network_7network_TcpListener *)__pyx_v_self)->__pyx_base.thisptr)->Listen(__pyx_v_port)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.TcpListener.listen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":167
 *         return (<declnetwork.TcpListener*>self.thisptr).Listen(port)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         (<declnetwork.TcpListener*>self.thisptr).Close()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close");

  /* "sfml/network/network.pyx":168
 * 
 *     def close(self):
 *         (<declnetwork.TcpListener*>self.thisptr).Close()             # <<<<<<<<<<<<<<
 * 
 *     def accept(self):
 */
  ((sf::TcpListener *)((struct __pyx_obj_4sfml_7network_7network_TcpListener *)__pyx_v_self)->__pyx_base.thisptr)->Close();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":170
 *         (<declnetwork.TcpListener*>self.thisptr).Close()
 * 
 *     def accept(self):             # <<<<<<<<<<<<<<
 *         socket = TcpSocket()
 *         cdef int status = (<declnetwork.TcpListener*>self.thisptr).Accept((<declnetwork.TcpSocket*>socket.thisptr)[0])
 */

static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_4accept(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_4accept(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_4sfml_7network_7network_TcpSocket *__pyx_v_socket = NULL;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("accept");

  /* "sfml/network/network.pyx":171
 * 
 *     def accept(self):
 *         socket = TcpSocket()             # <<<<<<<<<<<<<<
 *         cdef int status = (<declnetwork.TcpListener*>self.thisptr).Accept((<declnetwork.TcpSocket*>socket.thisptr)[0])
 * 
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sfml_7network_7network_TcpSocket)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_socket = ((struct __pyx_obj_4sfml_7network_7network_TcpSocket *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/network/network.pyx":172
 *     def accept(self):
 *         socket = TcpSocket()
 *         cdef int status = (<declnetwork.TcpListener*>self.thisptr).Accept((<declnetwork.TcpSocket*>socket.thisptr)[0])             # <<<<<<<<<<<<<<
 * 
 *         return (status, socket)
 */
  __pyx_v_status = ((sf::TcpListener *)((struct __pyx_obj_4sfml_7network_7network_TcpListener *)__pyx_v_self)->__pyx_base.thisptr)->Accept((((sf::TcpSocket *)__pyx_v_socket->__pyx_base.thisptr)[0]));

  /* "sfml/network/network.pyx":174
 *         cdef int status = (<declnetwork.TcpListener*>self.thisptr).Accept((<declnetwork.TcpSocket*>socket.thisptr)[0])
 * 
 *         return (status, socket)             # <<<<<<<<<<<<<<
 * 
 *     property local_port:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_socket));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_socket));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_socket));
  __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sfml.network.network.TcpListener.accept", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_socket);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":177
 * 
 *     property local_port:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<declnetwork.TcpListener*>self.thisptr).GetLocalPort()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_10local_port___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_11TcpListener_10local_port___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":178
 *     property local_port:
 *         def __get__(self):
 *             return (<declnetwork.TcpListener*>self.thisptr).GetLocalPort()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((sf::TcpListener *)((struct __pyx_obj_4sfml_7network_7network_TcpListener *)__pyx_v_self)->__pyx_base.thisptr)->GetLocalPort()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.TcpListener.local_port.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":184
 *     cdef declnetwork.SocketSelector *thisptr
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.thisptr = new declnetwork.SocketSelector()
 * 
 */

static int __pyx_pf_4sfml_7network_7network_14SocketSelector___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_14SocketSelector___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "sfml/network/network.pyx":185
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.thisptr = new declnetwork.SocketSelector()             # <<<<<<<<<<<<<<
 * 
 *     def add(self, Socket socket):
 */
  ((struct __pyx_obj_4sfml_7network_7network_SocketSelector *)__pyx_v_self)->thisptr = new sf::SocketSelector();

  __pyx_r = 0;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":187
 *         self.thisptr = new declnetwork.SocketSelector()
 * 
 *     def add(self, Socket socket):             # <<<<<<<<<<<<<<
 *         self.thisptr.Add(socket.thisptr[0])
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_1add(PyObject *__pyx_v_self, PyObject *__pyx_v_socket); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_1add(PyObject *__pyx_v_self, PyObject *__pyx_v_socket) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_socket), __pyx_ptype_4sfml_7network_7network_Socket, 1, "socket", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":188
 * 
 *     def add(self, Socket socket):
 *         self.thisptr.Add(socket.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *     def remove(self, Socket socket):
 */
  ((struct __pyx_obj_4sfml_7network_7network_SocketSelector *)__pyx_v_self)->thisptr->Add((((struct __pyx_obj_4sfml_7network_7network_Socket *)__pyx_v_socket)->thisptr[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.SocketSelector.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":190
 *         self.thisptr.Add(socket.thisptr[0])
 * 
 *     def remove(self, Socket socket):             # <<<<<<<<<<<<<<
 *         self.thisptr.Remove(socket.thisptr[0])
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_2remove(PyObject *__pyx_v_self, PyObject *__pyx_v_socket); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_2remove(PyObject *__pyx_v_self, PyObject *__pyx_v_socket) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_socket), __pyx_ptype_4sfml_7network_7network_Socket, 1, "socket", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":191
 * 
 *     def remove(self, Socket socket):
 *         self.thisptr.Remove(socket.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  ((struct __pyx_obj_4sfml_7network_7network_SocketSelector *)__pyx_v_self)->thisptr->Remove((((struct __pyx_obj_4sfml_7network_7network_Socket *)__pyx_v_socket)->thisptr[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.SocketSelector.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":193
 *         self.thisptr.Remove(socket.thisptr[0])
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.Clear()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_3clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_3clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear");

  /* "sfml/network/network.pyx":194
 * 
 *     def clear(self):
 *         self.thisptr.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def wait(self, declnetwork.Uint32 timeout=0):
 */
  ((struct __pyx_obj_4sfml_7network_7network_SocketSelector *)__pyx_v_self)->thisptr->Clear();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":196
 *         self.thisptr.Clear()
 * 
 *     def wait(self, declnetwork.Uint32 timeout=0):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Wait(timeout)
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_4wait(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_4wait(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  sf::Uint32 __pyx_v_timeout;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__timeout,0};
  __Pyx_RefNannySetupContext("wait");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__timeout);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "wait") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_timeout = __Pyx_PyInt_from_py_sf__Uint32(values[0]); if (unlikely((__pyx_v_timeout == (sf::Uint32)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_timeout = ((sf::Uint32)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wait", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.SocketSelector.wait", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":197
 * 
 *     def wait(self, declnetwork.Uint32 timeout=0):
 *         return self.thisptr.Wait(timeout)             # <<<<<<<<<<<<<<
 * 
 *     def is_ready(self, Socket socket):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_4sfml_7network_7network_SocketSelector *)__pyx_v_self)->thisptr->Wait(__pyx_v_timeout)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.SocketSelector.wait", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":199
 *         return self.thisptr.Wait(timeout)
 * 
 *     def is_ready(self, Socket socket):             # <<<<<<<<<<<<<<
 *         return self.thisptr.IsReady(socket.thisptr[0])
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_5is_ready(PyObject *__pyx_v_self, PyObject *__pyx_v_socket); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_14SocketSelector_5is_ready(PyObject *__pyx_v_self, PyObject *__pyx_v_socket) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_ready");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_socket), __pyx_ptype_4sfml_7network_7network_Socket, 1, "socket", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":200
 * 
 *     def is_ready(self, Socket socket):
 *         return self.thisptr.IsReady(socket.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_4sfml_7network_7network_SocketSelector *)__pyx_v_self)->thisptr->IsReady((((struct __pyx_obj_4sfml_7network_7network_Socket *)__pyx_v_socket)->thisptr[0]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.SocketSelector.is_ready", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":206
 *     cdef declnetwork.ftp.Response *thisptr
 * 
 *     def __cinit__(self, int code=declnetwork.ftp.ftp_response.InvalidResponse, bytes message=b""):             # <<<<<<<<<<<<<<
 *         self.thisptr = new declnetwork.ftp.Response(<declnetwork.ftp.Status>code, <char*>message)
 * 
 */

static int __pyx_pf_4sfml_7network_7network_11FtpResponse___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11FtpResponse___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_code;
  PyObject *__pyx_v_message = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__code,&__pyx_n_s__message,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_kp_b_5);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__code);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__message);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_code = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_code == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_code = __pyx_k_6;
    }
    __pyx_v_message = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.FtpResponse.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_message), (&PyBytes_Type), 1, "message", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":207
 * 
 *     def __cinit__(self, int code=declnetwork.ftp.ftp_response.InvalidResponse, bytes message=b""):
 *         self.thisptr = new declnetwork.ftp.Response(<declnetwork.ftp.Status>code, <char*>message)             # <<<<<<<<<<<<<<
 * 
 *     property ok:
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_message)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4sfml_7network_7network_FtpResponse *)__pyx_v_self)->thisptr = new sf::Ftp::Response(((sf::Ftp::Response::Status)__pyx_v_code), ((char *)__pyx_t_1));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.FtpResponse.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":210
 * 
 *     property ok:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.IsOk()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_11FtpResponse_2ok___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_11FtpResponse_2ok___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":211
 *     property ok:
 *         def __get__(self):
 *             return self.thisptr.IsOk()             # <<<<<<<<<<<<<<
 * 
 *     #property status:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_4sfml_7network_7network_FtpResponse *)__pyx_v_self)->thisptr->IsOk()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.FtpResponse.ok.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":223
 * 
 * cdef class FtpDirectoryResponse(FtpResponse):
 *     def __cinit__(self, FtpResponse response):             # <<<<<<<<<<<<<<
 *         self.thisptr = <declnetwork.ftp.Response*>new declnetwork.ftp.DirectoryResponse(response.thisptr[0])
 * 
 */

static int __pyx_pf_4sfml_7network_7network_20FtpDirectoryResponse___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_20FtpDirectoryResponse___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4sfml_7network_7network_FtpResponse *__pyx_v_response = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__response,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__response);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_response = ((struct __pyx_obj_4sfml_7network_7network_FtpResponse *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.FtpDirectoryResponse.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_response), __pyx_ptype_4sfml_7network_7network_FtpResponse, 1, "response", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":224
 * cdef class FtpDirectoryResponse(FtpResponse):
 *     def __cinit__(self, FtpResponse response):
 *         self.thisptr = <declnetwork.ftp.Response*>new declnetwork.ftp.DirectoryResponse(response.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *     def get_directory(self):
 */
  ((struct __pyx_obj_4sfml_7network_7network_FtpDirectoryResponse *)__pyx_v_self)->__pyx_base.thisptr = ((sf::Ftp::Response *)new sf::Ftp::DirectoryResponse((__pyx_v_response->thisptr[0])));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.FtpDirectoryResponse.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":226
 *         self.thisptr = <declnetwork.ftp.Response*>new declnetwork.ftp.DirectoryResponse(response.thisptr[0])
 * 
 *     def get_directory(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_20FtpDirectoryResponse_1get_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_20FtpDirectoryResponse_1get_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_directory");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":234
 *         #self.thisptr = <declnetwork.ftp.Response*>new declnetwork.ftp.ListingResponse()
 * 
 *     def get_filenames(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_15ListingResponse_get_filenames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_15ListingResponse_get_filenames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_filenames");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":239
 * 
 * cdef class Ftp:
 *     def connect(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_connect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_connect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connect");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":242
 *         pass
 * 
 *     def disconnect(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_1disconnect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_1disconnect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disconnect");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":245
 *         pass
 * 
 *     def login(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_2login(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_2login(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("login");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":248
 *         pass
 * 
 *     def keep_alive(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_3keep_alive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_3keep_alive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keep_alive");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":251
 *         pass
 * 
 *     def get_working_directory(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_4get_working_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_4get_working_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_working_directory");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":254
 *         pass
 * 
 *     def get_directory_listing(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_5get_directory_listing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_5get_directory_listing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_directory_listing");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":257
 *         pass
 * 
 *     def change_directory(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_6change_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_6change_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("change_directory");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":260
 *         pass
 * 
 *     def parent_directory(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_7parent_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_7parent_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parent_directory");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":263
 *         pass
 * 
 *     def create_directory(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_8create_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_8create_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_directory");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":266
 *         pass
 * 
 *     def delete_directory(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_9delete_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_9delete_directory(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_directory");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":269
 *         pass
 * 
 *     def rename_file(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_10rename_file(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_10rename_file(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rename_file");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":272
 *         pass
 * 
 *     def delete_file(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_11delete_file(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_11delete_file(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_file");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":275
 *         pass
 * 
 *     def download(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_12download(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_12download(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("download");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":278
 *         pass
 * 
 *     def upload(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_13upload(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_3Ftp_13upload(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("upload");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":289
 *     cdef declnetwork.http.Request *thisptr
 * 
 *     def __cinit__(self, bytes uri=b"/", int method=declnetwork.http.request.Get, bytes body=b""):             # <<<<<<<<<<<<<<
 *         self.thisptr = new declnetwork.http.Request(<char*>uri, <declnetwork.http.request.Method>method, <char*>body)
 * 
 */

static int __pyx_pf_4sfml_7network_7network_11HttpRequest___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11HttpRequest___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_uri = 0;
  int __pyx_v_method;
  PyObject *__pyx_v_body = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__uri,&__pyx_n_s__method,&__pyx_n_s__body,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject*)__pyx_kp_b_7);
    values[2] = ((PyObject*)__pyx_kp_b_5);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__uri);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__method);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__body);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_uri = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_method = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_method == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_method = __pyx_k_8;
    }
    __pyx_v_body = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.HttpRequest.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uri), (&PyBytes_Type), 1, "uri", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_body), (&PyBytes_Type), 1, "body", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":290
 * 
 *     def __cinit__(self, bytes uri=b"/", int method=declnetwork.http.request.Get, bytes body=b""):
 *         self.thisptr = new declnetwork.http.Request(<char*>uri, <declnetwork.http.request.Method>method, <char*>body)             # <<<<<<<<<<<<<<
 * 
 *     property field:
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_uri)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyBytes_AsString(((PyObject *)__pyx_v_body)); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4sfml_7network_7network_HttpRequest *)__pyx_v_self)->thisptr = new sf::Http::Request(((char *)__pyx_t_1), ((sf::Http::Request::Method)__pyx_v_method), ((char *)__pyx_t_2));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.HttpRequest.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":293
 * 
 *     property field:
 *         def __set__(self, tuple v):             # <<<<<<<<<<<<<<
 *             cdef bytes field = v[0]
 *             cdef bytes value = v[1]
 */

static int __pyx_pf_4sfml_7network_7network_11HttpRequest_5field___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11HttpRequest_5field___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_v_field = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), (&PyTuple_Type), 1, "v", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":294
 *     property field:
 *         def __set__(self, tuple v):
 *             cdef bytes field = v[0]             # <<<<<<<<<<<<<<
 *             cdef bytes value = v[1]
 *             self.thisptr.SetField(<char*>field, <char*>value)
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_v), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_field = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/network/network.pyx":295
 *         def __set__(self, tuple v):
 *             cdef bytes field = v[0]
 *             cdef bytes value = v[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.SetField(<char*>field, <char*>value)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_v), 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_value = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sfml/network/network.pyx":296
 *             cdef bytes field = v[0]
 *             cdef bytes value = v[1]
 *             self.thisptr.SetField(<char*>field, <char*>value)             # <<<<<<<<<<<<<<
 * 
 *     property method:
 */
  __pyx_t_2 = PyBytes_AsString(((PyObject *)__pyx_v_field)); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyBytes_AsString(((PyObject *)__pyx_v_value)); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4sfml_7network_7network_HttpRequest *)__pyx_v_self)->thisptr->SetField(((char *)__pyx_t_2), ((char *)__pyx_t_3));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.HttpRequest.field.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":299
 * 
 *     property method:
 *         def __set__(self, int method):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetMethod(<declnetwork.http.request.Method>method)
 * 
 */

static int __pyx_pf_4sfml_7network_7network_11HttpRequest_6method___set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_method); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11HttpRequest_6method___set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_method) {
  int __pyx_v_method;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__");
  assert(__pyx_arg_method); {
    __pyx_v_method = __Pyx_PyInt_AsInt(__pyx_arg_method); if (unlikely((__pyx_v_method == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.HttpRequest.method.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "sfml/network/network.pyx":300
 *     property method:
 *         def __set__(self, int method):
 *             self.thisptr.SetMethod(<declnetwork.http.request.Method>method)             # <<<<<<<<<<<<<<
 * 
 *     property uri:
 */
  ((struct __pyx_obj_4sfml_7network_7network_HttpRequest *)__pyx_v_self)->thisptr->SetMethod(((sf::Http::Request::Method)__pyx_v_method));

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":303
 * 
 *     property uri:
 *         def __set__(self, bytes uri):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetUri(<char*>uri)
 * 
 */

static int __pyx_pf_4sfml_7network_7network_11HttpRequest_3uri___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_uri); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11HttpRequest_3uri___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_uri) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uri), (&PyBytes_Type), 1, "uri", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":304
 *     property uri:
 *         def __set__(self, bytes uri):
 *             self.thisptr.SetUri(<char*>uri)             # <<<<<<<<<<<<<<
 * 
 *     property http_version:
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_uri)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4sfml_7network_7network_HttpRequest *)__pyx_v_self)->thisptr->SetUri(((char *)__pyx_t_1));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.HttpRequest.uri.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":307
 * 
 *     property http_version:
 *         def __set__(self, tuple value):             # <<<<<<<<<<<<<<
 *             cdef unsigned int major = value[0]
 *             cdef unsigned int minor = value[1]
 */

static int __pyx_pf_4sfml_7network_7network_11HttpRequest_12http_version___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11HttpRequest_12http_version___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  unsigned int __pyx_v_major;
  unsigned int __pyx_v_minor;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":308
 *     property http_version:
 *         def __set__(self, tuple value):
 *             cdef unsigned int major = value[0]             # <<<<<<<<<<<<<<
 *             cdef unsigned int minor = value[1]
 *             self.thisptr.SetHttpVersion(major, minor)
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_value), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_major = __pyx_t_2;

  /* "sfml/network/network.pyx":309
 *         def __set__(self, tuple value):
 *             cdef unsigned int major = value[0]
 *             cdef unsigned int minor = value[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.SetHttpVersion(major, minor)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_value), 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_minor = __pyx_t_2;

  /* "sfml/network/network.pyx":310
 *             cdef unsigned int major = value[0]
 *             cdef unsigned int minor = value[1]
 *             self.thisptr.SetHttpVersion(major, minor)             # <<<<<<<<<<<<<<
 * 
 *     property body:
 */
  ((struct __pyx_obj_4sfml_7network_7network_HttpRequest *)__pyx_v_self)->thisptr->SetHttpVersion(__pyx_v_major, __pyx_v_minor);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.HttpRequest.http_version.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":313
 * 
 *     property body:
 *         def __set__(self, bytes body):             # <<<<<<<<<<<<<<
 *             self.thisptr.SetBody(<char*>body)
 * 
 */

static int __pyx_pf_4sfml_7network_7network_11HttpRequest_4body___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_body); /*proto*/
static int __pyx_pf_4sfml_7network_7network_11HttpRequest_4body___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_body) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_body), (&PyBytes_Type), 1, "body", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":314
 *     property body:
 *         def __set__(self, bytes body):
 *             self.thisptr.SetBody(<char*>body)             # <<<<<<<<<<<<<<
 * 
 * cdef class HttpResponse:
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_body)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4sfml_7network_7network_HttpRequest *)__pyx_v_self)->thisptr->SetBody(((char *)__pyx_t_1));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.HttpRequest.body.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":347
 * 
 *     property field:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #cdef char* data
 *             #self.thisptr.GetField(data)
 */

static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_5field___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_5field___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":350
 *             #cdef char* data
 *             #self.thisptr.GetField(data)
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property status:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":353
 * 
 *     property status:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             <declnetwork.http.response.Status>self.thisptr.GetStatus()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_6status___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_6status___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":354
 *     property status:
 *         def __get__(self):
 *             <declnetwork.http.response.Status>self.thisptr.GetStatus()             # <<<<<<<<<<<<<<
 * 
 *     property major_http_version:
 */
  ((sf::Http::Response::Status)((struct __pyx_obj_4sfml_7network_7network_HttpResponse *)__pyx_v_self)->thisptr->GetStatus());

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":357
 * 
 *     property major_http_version:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetMajorHttpVersion()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_18major_http_version___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_18major_http_version___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":358
 *     property major_http_version:
 *         def __get__(self):
 *             return self.thisptr.GetMajorHttpVersion()             # <<<<<<<<<<<<<<
 * 
 *     property minor_http_version:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_4sfml_7network_7network_HttpResponse *)__pyx_v_self)->thisptr->GetMajorHttpVersion()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.HttpResponse.major_http_version.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":361
 * 
 *     property minor_http_version:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetMinorHttpVersion()
 * 
 */

static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_18minor_http_version___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_12HttpResponse_18minor_http_version___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "sfml/network/network.pyx":362
 *     property minor_http_version:
 *         def __get__(self):
 *             return self.thisptr.GetMinorHttpVersion()             # <<<<<<<<<<<<<<
 * 
 *     #property body:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_4sfml_7network_7network_HttpResponse *)__pyx_v_self)->thisptr->GetMinorHttpVersion()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sfml.network.network.HttpResponse.minor_http_version.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":371
 *     cdef declnetwork.Http *thisptr
 * 
 *     def __cinit__(self, bytes host, unsigned short port=0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new declnetwork.Http(<char*>host, port)
 * 
 */

static int __pyx_pf_4sfml_7network_7network_4Http___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4sfml_7network_7network_4Http___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_host = 0;
  unsigned short __pyx_v_port;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__host,&__pyx_n_s__port,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__host);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__port);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_host = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_port = __Pyx_PyInt_AsUnsignedShort(values[1]); if (unlikely((__pyx_v_port == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_port = ((unsigned short)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.Http.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_host), (&PyBytes_Type), 1, "host", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":372
 * 
 *     def __cinit__(self, bytes host, unsigned short port=0):
 *         self.thisptr = new declnetwork.Http(<char*>host, port)             # <<<<<<<<<<<<<<
 * 
 *     def send_request(self, HttpRequest request, declnetwork.Uint32 timeout=0):
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_host)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4sfml_7network_7network_Http *)__pyx_v_self)->thisptr = new sf::Http(((char *)__pyx_t_1), __pyx_v_port);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.Http.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sfml/network/network.pyx":374
 *         self.thisptr = new declnetwork.Http(<char*>host, port)
 * 
 *     def send_request(self, HttpRequest request, declnetwork.Uint32 timeout=0):             # <<<<<<<<<<<<<<
 *         self.thisptr.SendRequest(request.thisptr[0], timeout)
 */

static PyObject *__pyx_pf_4sfml_7network_7network_4Http_1send_request(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4sfml_7network_7network_4Http_1send_request(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4sfml_7network_7network_HttpRequest *__pyx_v_request = 0;
  sf::Uint32 __pyx_v_timeout;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__request,&__pyx_n_s__timeout,0};
  __Pyx_RefNannySetupContext("send_request");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__request);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__timeout);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "send_request") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_request = ((struct __pyx_obj_4sfml_7network_7network_HttpRequest *)values[0]);
    if (values[1]) {
      __pyx_v_timeout = __Pyx_PyInt_from_py_sf__Uint32(values[1]); if (unlikely((__pyx_v_timeout == (sf::Uint32)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_timeout = ((sf::Uint32)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("send_request", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sfml.network.network.Http.send_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_request), __pyx_ptype_4sfml_7network_7network_HttpRequest, 1, "request", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "sfml/network/network.pyx":375
 * 
 *     def send_request(self, HttpRequest request, declnetwork.Uint32 timeout=0):
 *         self.thisptr.SendRequest(request.thisptr[0], timeout)             # <<<<<<<<<<<<<<
 */
  ((struct __pyx_obj_4sfml_7network_7network_Http *)__pyx_v_self)->thisptr->SendRequest((__pyx_v_request->thisptr[0]), __pyx_v_timeout);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sfml.network.network.Http.send_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4sfml_7network_7network_IpAddress(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_9IpAddress___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_IpAddress(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_4sfml_7network_7network_9IpAddress_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_IpAddress[] = {
  {__Pyx_NAMESTR("from_integer"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9IpAddress_3from_integer, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("from_string"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9IpAddress_4from_string, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("from_bytes"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9IpAddress_5from_bytes, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("from_tuple"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9IpAddress_6from_tuple, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("local_address"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9IpAddress_7local_address, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("public_address"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9IpAddress_8public_address, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_IpAddress = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_IpAddress = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_IpAddress = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_IpAddress = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_IpAddress = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.IpAddress"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_IpAddress), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_IpAddress, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_IpAddress, /*tp_as_number*/
  &__pyx_tp_as_sequence_IpAddress, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_IpAddress, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_4sfml_7network_7network_9IpAddress_2__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_IpAddress, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_IpAddress, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_IpAddress, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_Socket(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_6Socket___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_Socket(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_6Socket_blocking(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_6Socket_8blocking___get__(o);
}

static int __pyx_setprop_4sfml_7network_7network_6Socket_blocking(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4sfml_7network_7network_6Socket_8blocking_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_Socket[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_7network_7network_Socket[] = {
  {(char *)"blocking", __pyx_getprop_4sfml_7network_7network_6Socket_blocking, __pyx_setprop_4sfml_7network_7network_6Socket_blocking, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Socket = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Socket = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Socket = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Socket = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_Socket = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.Socket"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_Socket), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_Socket, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Socket, /*tp_as_number*/
  &__pyx_tp_as_sequence_Socket, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Socket, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Socket, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_Socket, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_7network_7network_Socket, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_Socket, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_TcpSocket(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_7network_7network_Socket(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_9TcpSocket___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyObject *__pyx_getprop_4sfml_7network_7network_9TcpSocket_local_port(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_9TcpSocket_10local_port___get__(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_9TcpSocket_remote_address(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_9TcpSocket_14remote_address___get__(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_9TcpSocket_remote_port(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_9TcpSocket_11remote_port___get__(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_TcpSocket[] = {
  {__Pyx_NAMESTR("connect"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9TcpSocket_2connect, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("disconnect"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9TcpSocket_3disconnect, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("send"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9TcpSocket_4send, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("recieve"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9TcpSocket_5recieve, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_7network_7network_TcpSocket[] = {
  {(char *)"local_port", __pyx_getprop_4sfml_7network_7network_9TcpSocket_local_port, 0, 0, 0},
  {(char *)"remote_address", __pyx_getprop_4sfml_7network_7network_9TcpSocket_remote_address, 0, 0, 0},
  {(char *)"remote_port", __pyx_getprop_4sfml_7network_7network_9TcpSocket_remote_port, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_TcpSocket = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_TcpSocket = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_TcpSocket = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_TcpSocket = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_TcpSocket = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.TcpSocket"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_TcpSocket), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_Socket, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_TcpSocket, /*tp_as_number*/
  &__pyx_tp_as_sequence_TcpSocket, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_TcpSocket, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_4sfml_7network_7network_9TcpSocket_1__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_TcpSocket, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_TcpSocket, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_7network_7network_TcpSocket, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_TcpSocket, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_UdpSocket(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_7network_7network_Socket(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_9UdpSocket___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyObject *__pyx_getprop_4sfml_7network_7network_9UdpSocket_local_port(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_9UdpSocket_10local_port___get__(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_UdpSocket[] = {
  {__Pyx_NAMESTR("bind"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9UdpSocket_1bind, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("unbind"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9UdpSocket_2unbind, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("send"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9UdpSocket_3send, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("receive"), (PyCFunction)__pyx_pf_4sfml_7network_7network_9UdpSocket_4receive, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_7network_7network_UdpSocket[] = {
  {(char *)"local_port", __pyx_getprop_4sfml_7network_7network_9UdpSocket_local_port, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_UdpSocket = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_UdpSocket = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_UdpSocket = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_UdpSocket = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_UdpSocket = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.UdpSocket"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_UdpSocket), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_Socket, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_UdpSocket, /*tp_as_number*/
  &__pyx_tp_as_sequence_UdpSocket, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_UdpSocket, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_UdpSocket, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_UdpSocket, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_7network_7network_UdpSocket, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_UdpSocket, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_TcpListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_7network_7network_Socket(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_11TcpListener___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyObject *__pyx_getprop_4sfml_7network_7network_11TcpListener_local_port(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_11TcpListener_10local_port___get__(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_TcpListener[] = {
  {__Pyx_NAMESTR("listen"), (PyCFunction)__pyx_pf_4sfml_7network_7network_11TcpListener_2listen, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("close"), (PyCFunction)__pyx_pf_4sfml_7network_7network_11TcpListener_3close, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("accept"), (PyCFunction)__pyx_pf_4sfml_7network_7network_11TcpListener_4accept, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_7network_7network_TcpListener[] = {
  {(char *)"local_port", __pyx_getprop_4sfml_7network_7network_11TcpListener_local_port, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_TcpListener = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_TcpListener = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_TcpListener = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_TcpListener = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_TcpListener = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.TcpListener"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_TcpListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_Socket, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_TcpListener, /*tp_as_number*/
  &__pyx_tp_as_sequence_TcpListener, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_TcpListener, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_4sfml_7network_7network_11TcpListener_1__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_TcpListener, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_TcpListener, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_7network_7network_TcpListener, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_TcpListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_SocketSelector(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_14SocketSelector___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_SocketSelector(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_SocketSelector[] = {
  {__Pyx_NAMESTR("add"), (PyCFunction)__pyx_pf_4sfml_7network_7network_14SocketSelector_1add, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("remove"), (PyCFunction)__pyx_pf_4sfml_7network_7network_14SocketSelector_2remove, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pf_4sfml_7network_7network_14SocketSelector_3clear, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("wait"), (PyCFunction)__pyx_pf_4sfml_7network_7network_14SocketSelector_4wait, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("is_ready"), (PyCFunction)__pyx_pf_4sfml_7network_7network_14SocketSelector_5is_ready, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SocketSelector = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SocketSelector = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SocketSelector = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SocketSelector = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_SocketSelector = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.SocketSelector"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_SocketSelector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_SocketSelector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SocketSelector, /*tp_as_number*/
  &__pyx_tp_as_sequence_SocketSelector, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SocketSelector, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SocketSelector, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_SocketSelector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_SocketSelector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_FtpResponse(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_11FtpResponse___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_FtpResponse(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_11FtpResponse_ok(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_11FtpResponse_2ok___get__(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_FtpResponse[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_7network_7network_FtpResponse[] = {
  {(char *)"ok", __pyx_getprop_4sfml_7network_7network_11FtpResponse_ok, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_FtpResponse = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_FtpResponse = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FtpResponse = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_FtpResponse = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_FtpResponse = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.FtpResponse"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_FtpResponse), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_FtpResponse, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_FtpResponse, /*tp_as_number*/
  &__pyx_tp_as_sequence_FtpResponse, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FtpResponse, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_FtpResponse, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_FtpResponse, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_7network_7network_FtpResponse, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_FtpResponse, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_FtpDirectoryResponse(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_7network_7network_FtpResponse(t, a, k);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_20FtpDirectoryResponse___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_FtpDirectoryResponse[] = {
  {__Pyx_NAMESTR("get_directory"), (PyCFunction)__pyx_pf_4sfml_7network_7network_20FtpDirectoryResponse_1get_directory, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_FtpDirectoryResponse = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_FtpDirectoryResponse = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FtpDirectoryResponse = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_FtpDirectoryResponse = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_FtpDirectoryResponse = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.FtpDirectoryResponse"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_FtpDirectoryResponse), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_FtpResponse, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_FtpDirectoryResponse, /*tp_as_number*/
  &__pyx_tp_as_sequence_FtpDirectoryResponse, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FtpDirectoryResponse, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_FtpDirectoryResponse, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_FtpDirectoryResponse, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_FtpDirectoryResponse, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_ListingResponse(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sfml_7network_7network_FtpResponse(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_ListingResponse[] = {
  {__Pyx_NAMESTR("get_filenames"), (PyCFunction)__pyx_pf_4sfml_7network_7network_15ListingResponse_get_filenames, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ListingResponse = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ListingResponse = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ListingResponse = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ListingResponse = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_ListingResponse = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.ListingResponse"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_ListingResponse), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_FtpResponse, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ListingResponse, /*tp_as_number*/
  &__pyx_tp_as_sequence_ListingResponse, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ListingResponse, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ListingResponse, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_ListingResponse, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_ListingResponse, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_Ftp(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_Ftp(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_Ftp[] = {
  {__Pyx_NAMESTR("connect"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_connect, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("disconnect"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_1disconnect, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("login"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_2login, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("keep_alive"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_3keep_alive, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_working_directory"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_4get_working_directory, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_directory_listing"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_5get_directory_listing, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("change_directory"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_6change_directory, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("parent_directory"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_7parent_directory, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("create_directory"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_8create_directory, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("delete_directory"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_9delete_directory, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("rename_file"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_10rename_file, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("delete_file"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_11delete_file, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("download"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_12download, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("upload"), (PyCFunction)__pyx_pf_4sfml_7network_7network_3Ftp_13upload, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Ftp = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Ftp = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Ftp = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Ftp = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_Ftp = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.Ftp"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_Ftp), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_Ftp, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Ftp, /*tp_as_number*/
  &__pyx_tp_as_sequence_Ftp, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Ftp, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Ftp, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_Ftp, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_Ftp, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_HttpRequest(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_11HttpRequest___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_HttpRequest(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_setprop_4sfml_7network_7network_11HttpRequest_field(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4sfml_7network_7network_11HttpRequest_5field___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static int __pyx_setprop_4sfml_7network_7network_11HttpRequest_method(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4sfml_7network_7network_11HttpRequest_6method___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static int __pyx_setprop_4sfml_7network_7network_11HttpRequest_uri(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4sfml_7network_7network_11HttpRequest_3uri___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static int __pyx_setprop_4sfml_7network_7network_11HttpRequest_http_version(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4sfml_7network_7network_11HttpRequest_12http_version___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static int __pyx_setprop_4sfml_7network_7network_11HttpRequest_body(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4sfml_7network_7network_11HttpRequest_4body___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_HttpRequest[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_7network_7network_HttpRequest[] = {
  {(char *)"field", 0, __pyx_setprop_4sfml_7network_7network_11HttpRequest_field, 0, 0},
  {(char *)"method", 0, __pyx_setprop_4sfml_7network_7network_11HttpRequest_method, 0, 0},
  {(char *)"uri", 0, __pyx_setprop_4sfml_7network_7network_11HttpRequest_uri, 0, 0},
  {(char *)"http_version", 0, __pyx_setprop_4sfml_7network_7network_11HttpRequest_http_version, 0, 0},
  {(char *)"body", 0, __pyx_setprop_4sfml_7network_7network_11HttpRequest_body, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_HttpRequest = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_HttpRequest = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_HttpRequest = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_HttpRequest = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_HttpRequest = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.HttpRequest"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_HttpRequest), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_HttpRequest, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_HttpRequest, /*tp_as_number*/
  &__pyx_tp_as_sequence_HttpRequest, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_HttpRequest, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_HttpRequest, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_HttpRequest, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_7network_7network_HttpRequest, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_HttpRequest, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_HttpResponse(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_HttpResponse(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_12HttpResponse_field(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_12HttpResponse_5field___get__(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_12HttpResponse_status(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_12HttpResponse_6status___get__(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_12HttpResponse_major_http_version(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_12HttpResponse_18major_http_version___get__(o);
}

static PyObject *__pyx_getprop_4sfml_7network_7network_12HttpResponse_minor_http_version(PyObject *o, void *x) {
  return __pyx_pf_4sfml_7network_7network_12HttpResponse_18minor_http_version___get__(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_HttpResponse[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4sfml_7network_7network_HttpResponse[] = {
  {(char *)"field", __pyx_getprop_4sfml_7network_7network_12HttpResponse_field, 0, 0, 0},
  {(char *)"status", __pyx_getprop_4sfml_7network_7network_12HttpResponse_status, 0, 0, 0},
  {(char *)"major_http_version", __pyx_getprop_4sfml_7network_7network_12HttpResponse_major_http_version, 0, 0, 0},
  {(char *)"minor_http_version", __pyx_getprop_4sfml_7network_7network_12HttpResponse_minor_http_version, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_HttpResponse = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_HttpResponse = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_HttpResponse = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_HttpResponse = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_HttpResponse = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.HttpResponse"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_HttpResponse), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_HttpResponse, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_HttpResponse, /*tp_as_number*/
  &__pyx_tp_as_sequence_HttpResponse, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_HttpResponse, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_HttpResponse, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_HttpResponse, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4sfml_7network_7network_HttpResponse, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_HttpResponse, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4sfml_7network_7network_Http(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_4sfml_7network_7network_4Http___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sfml_7network_7network_Http(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sfml_7network_7network_Http[] = {
  {__Pyx_NAMESTR("send_request"), (PyCFunction)__pyx_pf_4sfml_7network_7network_4Http_1send_request, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Http = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Http = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Http = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Http = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4sfml_7network_7network_Http = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sfml.network.network.Http"), /*tp_name*/
  sizeof(struct __pyx_obj_4sfml_7network_7network_Http), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sfml_7network_7network_Http, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Http, /*tp_as_number*/
  &__pyx_tp_as_sequence_Http, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Http, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Http, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sfml_7network_7network_Http, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sfml_7network_7network_Http, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("network"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_n_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 1},
  {&__pyx_n_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 1},
  {&__pyx_n_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 1},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_b_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 0, 0},
  {&__pyx_kp_b_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 0, 0},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_n_s__ACCEPTED, __pyx_k__ACCEPTED, sizeof(__pyx_k__ACCEPTED), 0, 0, 1, 1},
  {&__pyx_n_s__Accepted, __pyx_k__Accepted, sizeof(__pyx_k__Accepted), 0, 0, 1, 1},
  {&__pyx_n_s__BAD_GATEWAY, __pyx_k__BAD_GATEWAY, sizeof(__pyx_k__BAD_GATEWAY), 0, 0, 1, 1},
  {&__pyx_n_s__BAD_REQUEST, __pyx_k__BAD_REQUEST, sizeof(__pyx_k__BAD_REQUEST), 0, 0, 1, 1},
  {&__pyx_n_s__BadGateway, __pyx_k__BadGateway, sizeof(__pyx_k__BadGateway), 0, 0, 1, 1},
  {&__pyx_n_s__BadRequest, __pyx_k__BadRequest, sizeof(__pyx_k__BadRequest), 0, 0, 1, 1},
  {&__pyx_n_s__CONNECTION_FAILED, __pyx_k__CONNECTION_FAILED, sizeof(__pyx_k__CONNECTION_FAILED), 0, 0, 1, 1},
  {&__pyx_n_s__CREATED, __pyx_k__CREATED, sizeof(__pyx_k__CREATED), 0, 0, 1, 1},
  {&__pyx_n_s__ConnectionFailed, __pyx_k__ConnectionFailed, sizeof(__pyx_k__ConnectionFailed), 0, 0, 1, 1},
  {&__pyx_n_s__Created, __pyx_k__Created, sizeof(__pyx_k__Created), 0, 0, 1, 1},
  {&__pyx_n_s__DISCONNECTED, __pyx_k__DISCONNECTED, sizeof(__pyx_k__DISCONNECTED), 0, 0, 1, 1},
  {&__pyx_n_s__DONE, __pyx_k__DONE, sizeof(__pyx_k__DONE), 0, 0, 1, 1},
  {&__pyx_n_s__ERROR, __pyx_k__ERROR, sizeof(__pyx_k__ERROR), 0, 0, 1, 1},
  {&__pyx_n_s__FORBIDDEN, __pyx_k__FORBIDDEN, sizeof(__pyx_k__FORBIDDEN), 0, 0, 1, 1},
  {&__pyx_n_s__Forbidden, __pyx_k__Forbidden, sizeof(__pyx_k__Forbidden), 0, 0, 1, 1},
  {&__pyx_n_s__GATEWAY_TIMEOUT, __pyx_k__GATEWAY_TIMEOUT, sizeof(__pyx_k__GATEWAY_TIMEOUT), 0, 0, 1, 1},
  {&__pyx_n_s__GET, __pyx_k__GET, sizeof(__pyx_k__GET), 0, 0, 1, 1},
  {&__pyx_n_s__GatewayTimeout, __pyx_k__GatewayTimeout, sizeof(__pyx_k__GatewayTimeout), 0, 0, 1, 1},
  {&__pyx_n_s__HEAD, __pyx_k__HEAD, sizeof(__pyx_k__HEAD), 0, 0, 1, 1},
  {&__pyx_n_s__INVALID_RESPONSE, __pyx_k__INVALID_RESPONSE, sizeof(__pyx_k__INVALID_RESPONSE), 0, 0, 1, 1},
  {&__pyx_n_s__InternalServerError, __pyx_k__InternalServerError, sizeof(__pyx_k__InternalServerError), 0, 0, 1, 1},
  {&__pyx_n_s__InvalidResponse, __pyx_k__InvalidResponse, sizeof(__pyx_k__InvalidResponse), 0, 0, 1, 1},
  {&__pyx_n_s__MOVED_PERMANENTLY, __pyx_k__MOVED_PERMANENTLY, sizeof(__pyx_k__MOVED_PERMANENTLY), 0, 0, 1, 1},
  {&__pyx_n_s__MOVED_TEMPORARILY, __pyx_k__MOVED_TEMPORARILY, sizeof(__pyx_k__MOVED_TEMPORARILY), 0, 0, 1, 1},
  {&__pyx_n_s__MULTIPLE_CHOICES, __pyx_k__MULTIPLE_CHOICES, sizeof(__pyx_k__MULTIPLE_CHOICES), 0, 0, 1, 1},
  {&__pyx_n_s__MovedPermanently, __pyx_k__MovedPermanently, sizeof(__pyx_k__MovedPermanently), 0, 0, 1, 1},
  {&__pyx_n_s__MovedTemporarily, __pyx_k__MovedTemporarily, sizeof(__pyx_k__MovedTemporarily), 0, 0, 1, 1},
  {&__pyx_n_s__MultipleChoices, __pyx_k__MultipleChoices, sizeof(__pyx_k__MultipleChoices), 0, 0, 1, 1},
  {&__pyx_n_s__NOT_FOUND, __pyx_k__NOT_FOUND, sizeof(__pyx_k__NOT_FOUND), 0, 0, 1, 1},
  {&__pyx_n_s__NOT_IMPLEMENTED, __pyx_k__NOT_IMPLEMENTED, sizeof(__pyx_k__NOT_IMPLEMENTED), 0, 0, 1, 1},
  {&__pyx_n_s__NOT_MODIFIED, __pyx_k__NOT_MODIFIED, sizeof(__pyx_k__NOT_MODIFIED), 0, 0, 1, 1},
  {&__pyx_n_s__NOT_READY, __pyx_k__NOT_READY, sizeof(__pyx_k__NOT_READY), 0, 0, 1, 1},
  {&__pyx_n_s__NO_CONTENT, __pyx_k__NO_CONTENT, sizeof(__pyx_k__NO_CONTENT), 0, 0, 1, 1},
  {&__pyx_n_s__NoContent, __pyx_k__NoContent, sizeof(__pyx_k__NoContent), 0, 0, 1, 1},
  {&__pyx_n_s__NotFound, __pyx_k__NotFound, sizeof(__pyx_k__NotFound), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplemented, __pyx_k__NotImplemented, sizeof(__pyx_k__NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplementedError, __pyx_k__NotImplementedError, sizeof(__pyx_k__NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s__NotModified, __pyx_k__NotModified, sizeof(__pyx_k__NotModified), 0, 0, 1, 1},
  {&__pyx_n_s__OK, __pyx_k__OK, sizeof(__pyx_k__OK), 0, 0, 1, 1},
  {&__pyx_n_s__Ok, __pyx_k__Ok, sizeof(__pyx_k__Ok), 0, 0, 1, 1},
  {&__pyx_n_s__PARTIAL_CONTENT, __pyx_k__PARTIAL_CONTENT, sizeof(__pyx_k__PARTIAL_CONTENT), 0, 0, 1, 1},
  {&__pyx_n_s__POST, __pyx_k__POST, sizeof(__pyx_k__POST), 0, 0, 1, 1},
  {&__pyx_n_s__PartialContent, __pyx_k__PartialContent, sizeof(__pyx_k__PartialContent), 0, 0, 1, 1},
  {&__pyx_n_s__RESET_CONTENT, __pyx_k__RESET_CONTENT, sizeof(__pyx_k__RESET_CONTENT), 0, 0, 1, 1},
  {&__pyx_n_s__RangeNotSatisfiable, __pyx_k__RangeNotSatisfiable, sizeof(__pyx_k__RangeNotSatisfiable), 0, 0, 1, 1},
  {&__pyx_n_s__ResetContent, __pyx_k__ResetContent, sizeof(__pyx_k__ResetContent), 0, 0, 1, 1},
  {&__pyx_n_s__ServiceNotAvailable, __pyx_k__ServiceNotAvailable, sizeof(__pyx_k__ServiceNotAvailable), 0, 0, 1, 1},
  {&__pyx_n_s__UNAUTHORIZED, __pyx_k__UNAUTHORIZED, sizeof(__pyx_k__UNAUTHORIZED), 0, 0, 1, 1},
  {&__pyx_n_s__Unauthorized, __pyx_k__Unauthorized, sizeof(__pyx_k__Unauthorized), 0, 0, 1, 1},
  {&__pyx_n_s__VersionNotSupported, __pyx_k__VersionNotSupported, sizeof(__pyx_k__VersionNotSupported), 0, 0, 1, 1},
  {&__pyx_n_s____class__, __pyx_k____class__, sizeof(__pyx_k____class__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__b1, __pyx_k__b1, sizeof(__pyx_k__b1), 0, 0, 1, 1},
  {&__pyx_n_s__b2, __pyx_k__b2, sizeof(__pyx_k__b2), 0, 0, 1, 1},
  {&__pyx_n_s__b3, __pyx_k__b3, sizeof(__pyx_k__b3), 0, 0, 1, 1},
  {&__pyx_n_s__b4, __pyx_k__b4, sizeof(__pyx_k__b4), 0, 0, 1, 1},
  {&__pyx_n_s__body, __pyx_k__body, sizeof(__pyx_k__body), 0, 0, 1, 1},
  {&__pyx_n_s__code, __pyx_k__code, sizeof(__pyx_k__code), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__declnetwork, __pyx_k__declnetwork, sizeof(__pyx_k__declnetwork), 0, 0, 1, 1},
  {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
  {&__pyx_n_s__from_bytes, __pyx_k__from_bytes, sizeof(__pyx_k__from_bytes), 0, 0, 1, 1},
  {&__pyx_n_s__from_integer, __pyx_k__from_integer, sizeof(__pyx_k__from_integer), 0, 0, 1, 1},
  {&__pyx_n_s__from_string, __pyx_k__from_string, sizeof(__pyx_k__from_string), 0, 0, 1, 1},
  {&__pyx_n_s__from_tuple, __pyx_k__from_tuple, sizeof(__pyx_k__from_tuple), 0, 0, 1, 1},
  {&__pyx_n_s__ftp, __pyx_k__ftp, sizeof(__pyx_k__ftp), 0, 0, 1, 1},
  {&__pyx_n_s__ftp_response, __pyx_k__ftp_response, sizeof(__pyx_k__ftp_response), 0, 0, 1, 1},
  {&__pyx_n_s__host, __pyx_k__host, sizeof(__pyx_k__host), 0, 0, 1, 1},
  {&__pyx_n_s__http, __pyx_k__http, sizeof(__pyx_k__http), 0, 0, 1, 1},
  {&__pyx_n_s__http_response, __pyx_k__http_response, sizeof(__pyx_k__http_response), 0, 0, 1, 1},
  {&__pyx_n_s__ip, __pyx_k__ip, sizeof(__pyx_k__ip), 0, 0, 1, 1},
  {&__pyx_n_s__local_address, __pyx_k__local_address, sizeof(__pyx_k__local_address), 0, 0, 1, 1},
  {&__pyx_n_s__message, __pyx_k__message, sizeof(__pyx_k__message), 0, 0, 1, 1},
  {&__pyx_n_s__method, __pyx_k__method, sizeof(__pyx_k__method), 0, 0, 1, 1},
  {&__pyx_n_s__port, __pyx_k__port, sizeof(__pyx_k__port), 0, 0, 1, 1},
  {&__pyx_n_s__public_address, __pyx_k__public_address, sizeof(__pyx_k__public_address), 0, 0, 1, 1},
  {&__pyx_n_s__request, __pyx_k__request, sizeof(__pyx_k__request), 0, 0, 1, 1},
  {&__pyx_n_s__response, __pyx_k__response, sizeof(__pyx_k__response), 0, 0, 1, 1},
  {&__pyx_n_s__timeout, __pyx_k__timeout, sizeof(__pyx_k__timeout), 0, 0, 1, 1},
  {&__pyx_n_s__uri, __pyx_k__uri, sizeof(__pyx_k__uri), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetName(__pyx_b, __pyx_n_s__NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "sfml/network/network.pyx":80
 *     def __cinit__(self, *args, **kwargs):
 *         if self.__class__ == Socket:
 *             raise NotImplementedError('Socket is abstact')             # <<<<<<<<<<<<<<
 * 
 *     property blocking:
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initnetwork(void); /*proto*/
PyMODINIT_FUNC initnetwork(void)
#else
PyMODINIT_FUNC PyInit_network(void); /*proto*/
PyMODINIT_FUNC PyInit_network(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_network(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("network"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_sfml__network__network) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_IpAddress) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "IpAddress", (PyObject *)&__pyx_type_4sfml_7network_7network_IpAddress) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_IpAddress = &__pyx_type_4sfml_7network_7network_IpAddress;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_Socket) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Socket", (PyObject *)&__pyx_type_4sfml_7network_7network_Socket) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_Socket = &__pyx_type_4sfml_7network_7network_Socket;
  __pyx_type_4sfml_7network_7network_TcpSocket.tp_base = __pyx_ptype_4sfml_7network_7network_Socket;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_TcpSocket) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "TcpSocket", (PyObject *)&__pyx_type_4sfml_7network_7network_TcpSocket) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_TcpSocket = &__pyx_type_4sfml_7network_7network_TcpSocket;
  __pyx_type_4sfml_7network_7network_UdpSocket.tp_base = __pyx_ptype_4sfml_7network_7network_Socket;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_UdpSocket) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "UdpSocket", (PyObject *)&__pyx_type_4sfml_7network_7network_UdpSocket) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_UdpSocket = &__pyx_type_4sfml_7network_7network_UdpSocket;
  __pyx_type_4sfml_7network_7network_TcpListener.tp_base = __pyx_ptype_4sfml_7network_7network_Socket;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_TcpListener) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "TcpListener", (PyObject *)&__pyx_type_4sfml_7network_7network_TcpListener) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_TcpListener = &__pyx_type_4sfml_7network_7network_TcpListener;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_SocketSelector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SocketSelector", (PyObject *)&__pyx_type_4sfml_7network_7network_SocketSelector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_SocketSelector = &__pyx_type_4sfml_7network_7network_SocketSelector;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_FtpResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "FtpResponse", (PyObject *)&__pyx_type_4sfml_7network_7network_FtpResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_FtpResponse = &__pyx_type_4sfml_7network_7network_FtpResponse;
  __pyx_type_4sfml_7network_7network_FtpDirectoryResponse.tp_base = __pyx_ptype_4sfml_7network_7network_FtpResponse;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_FtpDirectoryResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "FtpDirectoryResponse", (PyObject *)&__pyx_type_4sfml_7network_7network_FtpDirectoryResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_FtpDirectoryResponse = &__pyx_type_4sfml_7network_7network_FtpDirectoryResponse;
  __pyx_type_4sfml_7network_7network_ListingResponse.tp_base = __pyx_ptype_4sfml_7network_7network_FtpResponse;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_ListingResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ListingResponse", (PyObject *)&__pyx_type_4sfml_7network_7network_ListingResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_ListingResponse = &__pyx_type_4sfml_7network_7network_ListingResponse;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_Ftp) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Ftp", (PyObject *)&__pyx_type_4sfml_7network_7network_Ftp) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_Ftp = &__pyx_type_4sfml_7network_7network_Ftp;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_HttpRequest) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "HttpRequest", (PyObject *)&__pyx_type_4sfml_7network_7network_HttpRequest) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_HttpRequest = &__pyx_type_4sfml_7network_7network_HttpRequest;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_HttpResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "HttpResponse", (PyObject *)&__pyx_type_4sfml_7network_7network_HttpResponse) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_HttpResponse = &__pyx_type_4sfml_7network_7network_HttpResponse;
  if (PyType_Ready(&__pyx_type_4sfml_7network_7network_Http) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Http", (PyObject *)&__pyx_type_4sfml_7network_7network_Http) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sfml_7network_7network_Http = &__pyx_type_4sfml_7network_7network_Http;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "sfml/network/network.pyx":36
 * 
 *     @classmethod
 *     def from_integer(self, declnetwork.Uint32 value):             # <<<<<<<<<<<<<<
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(value)
 *         return wrap_ipaddress_instance(p)
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress, __pyx_n_s__from_integer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress->tp_dict, __pyx_n_s__from_integer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_IpAddress);

  /* "sfml/network/network.pyx":41
 * 
 *     @classmethod
 *     def from_string(self, bytes value):             # <<<<<<<<<<<<<<
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(<char*>value)
 *         return wrap_ipaddress_instance(p)
 */
  __pyx_t_2 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress, __pyx_n_s__from_string); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress->tp_dict, __pyx_n_s__from_string, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_IpAddress);

  /* "sfml/network/network.pyx":46
 * 
 *     @classmethod
 *     def from_bytes(self, declnetwork.Uint8 b1, declnetwork.Uint8 b2, declnetwork.Uint8 b3, declnetwork.Uint8 b4):             # <<<<<<<<<<<<<<
 *         cdef declnetwork.IpAddress *p = new declnetwork.IpAddress(b1, b2, b3, b4)
 *         return wrap_ipaddress_instance(p)
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress, __pyx_n_s__from_bytes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress->tp_dict, __pyx_n_s__from_bytes, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_IpAddress);

  /* "sfml/network/network.pyx":51
 * 
 *     @classmethod
 *     def from_tuple(self, tuple value):             # <<<<<<<<<<<<<<
 *         b1, b2, b3, b4 = value
 * 
 */
  __pyx_t_2 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress, __pyx_n_s__from_tuple); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress->tp_dict, __pyx_n_s__from_tuple, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_IpAddress);

  /* "sfml/network/network.pyx":58
 * 
 *     @classmethod
 *     def local_address(self):             # <<<<<<<<<<<<<<
 *         return IpAddress.from_integer(declnetwork.GetLocalAddress().ToInteger())
 * 
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress, __pyx_n_s__local_address); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress->tp_dict, __pyx_n_s__local_address, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_IpAddress);

  /* "sfml/network/network.pyx":62
 * 
 *     @classmethod
 *     def public_address(self, declnetwork.Uint32 timeout=0):             # <<<<<<<<<<<<<<
 *         return IpAddress.from_integer(declnetwork.GetPublicAddress(timeout).ToInteger())
 * 
 */
  __pyx_t_2 = __Pyx_GetName((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress, __pyx_n_s__public_address); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_IpAddress->tp_dict, __pyx_n_s__public_address, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_IpAddress);

  /* "sfml/network/network.pyx":71
 * 
 * cdef class Socket:
 *     DONE = declnetwork.Done             # <<<<<<<<<<<<<<
 *     NOT_READY = declnetwork.NotReady
 *     DISCONNECTED = declnetwork.Disconnected
 */
  __pyx_t_1 = PyInt_FromLong(sf::Socket::Done); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_Socket->tp_dict, __pyx_n_s__DONE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_Socket);

  /* "sfml/network/network.pyx":72
 * cdef class Socket:
 *     DONE = declnetwork.Done
 *     NOT_READY = declnetwork.NotReady             # <<<<<<<<<<<<<<
 *     DISCONNECTED = declnetwork.Disconnected
 *     ERROR = declnetwork.Error
 */
  __pyx_t_1 = PyInt_FromLong(sf::Socket::NotReady); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_Socket->tp_dict, __pyx_n_s__NOT_READY, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_Socket);

  /* "sfml/network/network.pyx":73
 *     DONE = declnetwork.Done
 *     NOT_READY = declnetwork.NotReady
 *     DISCONNECTED = declnetwork.Disconnected             # <<<<<<<<<<<<<<
 *     ERROR = declnetwork.Error
 * 
 */
  __pyx_t_1 = PyInt_FromLong(sf::Socket::Disconnected); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_Socket->tp_dict, __pyx_n_s__DISCONNECTED, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_Socket);

  /* "sfml/network/network.pyx":74
 *     NOT_READY = declnetwork.NotReady
 *     DISCONNECTED = declnetwork.Disconnected
 *     ERROR = declnetwork.Error             # <<<<<<<<<<<<<<
 * 
 *     cdef declnetwork.Socket *thisptr
 */
  __pyx_t_1 = PyInt_FromLong(sf::Socket::Error); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_Socket->tp_dict, __pyx_n_s__ERROR, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_Socket);

  /* "sfml/network/network.pyx":206
 *     cdef declnetwork.ftp.Response *thisptr
 * 
 *     def __cinit__(self, int code=declnetwork.ftp.ftp_response.InvalidResponse, bytes message=b""):             # <<<<<<<<<<<<<<
 *         self.thisptr = new declnetwork.ftp.Response(<declnetwork.ftp.Status>code, <char*>message)
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__ftp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ftp_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__InvalidResponse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k_6 = __pyx_t_3;

  /* "sfml/network/network.pyx":283
 * 
 * cdef class HttpRequest:
 *     GET = declnetwork.http.request.Get             # <<<<<<<<<<<<<<
 *     POST = declnetwork.http.request.Post
 *     HEAD = declnetwork.http.request.Head
 */
  __pyx_t_2 = PyInt_FromLong(sf::Http::Request::Get); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpRequest->tp_dict, __pyx_n_s__GET, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpRequest);

  /* "sfml/network/network.pyx":284
 * cdef class HttpRequest:
 *     GET = declnetwork.http.request.Get
 *     POST = declnetwork.http.request.Post             # <<<<<<<<<<<<<<
 *     HEAD = declnetwork.http.request.Head
 * 
 */
  __pyx_t_2 = PyInt_FromLong(sf::Http::Request::Post); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpRequest->tp_dict, __pyx_n_s__POST, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpRequest);

  /* "sfml/network/network.pyx":285
 *     GET = declnetwork.http.request.Get
 *     POST = declnetwork.http.request.Post
 *     HEAD = declnetwork.http.request.Head             # <<<<<<<<<<<<<<
 * 
 *     cdef declnetwork.http.Request *thisptr
 */
  __pyx_t_2 = PyInt_FromLong(sf::Http::Request::Head); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpRequest->tp_dict, __pyx_n_s__HEAD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpRequest);

  /* "sfml/network/network.pyx":289
 *     cdef declnetwork.http.Request *thisptr
 * 
 *     def __cinit__(self, bytes uri=b"/", int method=declnetwork.http.request.Get, bytes body=b""):             # <<<<<<<<<<<<<<
 *         self.thisptr = new declnetwork.http.Request(<char*>uri, <declnetwork.http.request.Method>method, <char*>body)
 * 
 */
  __pyx_k_8 = sf::Http::Request::Get;

  /* "sfml/network/network.pyx":317
 * 
 * cdef class HttpResponse:
 *     OK = declnetwork.http.http_response.Ok             # <<<<<<<<<<<<<<
 *     CREATED = declnetwork.http.http_response.Created
 *     ACCEPTED = declnetwork.http.http_response.Accepted
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Ok); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__OK, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":318
 * cdef class HttpResponse:
 *     OK = declnetwork.http.http_response.Ok
 *     CREATED = declnetwork.http.http_response.Created             # <<<<<<<<<<<<<<
 *     ACCEPTED = declnetwork.http.http_response.Accepted
 *     NO_CONTENT = declnetwork.http.http_response.NoContent
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__Created); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__CREATED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":319
 *     OK = declnetwork.http.http_response.Ok
 *     CREATED = declnetwork.http.http_response.Created
 *     ACCEPTED = declnetwork.http.http_response.Accepted             # <<<<<<<<<<<<<<
 *     NO_CONTENT = declnetwork.http.http_response.NoContent
 *     RESET_CONTENT = declnetwork.http.http_response.ResetContent
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Accepted); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__ACCEPTED, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":320
 *     CREATED = declnetwork.http.http_response.Created
 *     ACCEPTED = declnetwork.http.http_response.Accepted
 *     NO_CONTENT = declnetwork.http.http_response.NoContent             # <<<<<<<<<<<<<<
 *     RESET_CONTENT = declnetwork.http.http_response.ResetContent
 *     PARTIAL_CONTENT = declnetwork.http.http_response.PartialContent
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__NoContent); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__NO_CONTENT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":321
 *     ACCEPTED = declnetwork.http.http_response.Accepted
 *     NO_CONTENT = declnetwork.http.http_response.NoContent
 *     RESET_CONTENT = declnetwork.http.http_response.ResetContent             # <<<<<<<<<<<<<<
 *     PARTIAL_CONTENT = declnetwork.http.http_response.PartialContent
 *     MULTIPLE_CHOICES = declnetwork.http.http_response.MultipleChoices
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ResetContent); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__RESET_CONTENT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":322
 *     NO_CONTENT = declnetwork.http.http_response.NoContent
 *     RESET_CONTENT = declnetwork.http.http_response.ResetContent
 *     PARTIAL_CONTENT = declnetwork.http.http_response.PartialContent             # <<<<<<<<<<<<<<
 *     MULTIPLE_CHOICES = declnetwork.http.http_response.MultipleChoices
 *     MOVED_PERMANENTLY = declnetwork.http.http_response.MovedPermanently
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__PartialContent); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__PARTIAL_CONTENT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":323
 *     RESET_CONTENT = declnetwork.http.http_response.ResetContent
 *     PARTIAL_CONTENT = declnetwork.http.http_response.PartialContent
 *     MULTIPLE_CHOICES = declnetwork.http.http_response.MultipleChoices             # <<<<<<<<<<<<<<
 *     MOVED_PERMANENTLY = declnetwork.http.http_response.MovedPermanently
 *     MOVED_TEMPORARILY = declnetwork.http.http_response.MovedTemporarily
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__MultipleChoices); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__MULTIPLE_CHOICES, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":324
 *     PARTIAL_CONTENT = declnetwork.http.http_response.PartialContent
 *     MULTIPLE_CHOICES = declnetwork.http.http_response.MultipleChoices
 *     MOVED_PERMANENTLY = declnetwork.http.http_response.MovedPermanently             # <<<<<<<<<<<<<<
 *     MOVED_TEMPORARILY = declnetwork.http.http_response.MovedTemporarily
 *     NOT_MODIFIED = declnetwork.http.http_response.NotModified
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__MovedPermanently); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__MOVED_PERMANENTLY, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":325
 *     MULTIPLE_CHOICES = declnetwork.http.http_response.MultipleChoices
 *     MOVED_PERMANENTLY = declnetwork.http.http_response.MovedPermanently
 *     MOVED_TEMPORARILY = declnetwork.http.http_response.MovedTemporarily             # <<<<<<<<<<<<<<
 *     NOT_MODIFIED = declnetwork.http.http_response.NotModified
 *     BAD_REQUEST = declnetwork.http.http_response.BadRequest
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__MovedTemporarily); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__MOVED_TEMPORARILY, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":326
 *     MOVED_PERMANENTLY = declnetwork.http.http_response.MovedPermanently
 *     MOVED_TEMPORARILY = declnetwork.http.http_response.MovedTemporarily
 *     NOT_MODIFIED = declnetwork.http.http_response.NotModified             # <<<<<<<<<<<<<<
 *     BAD_REQUEST = declnetwork.http.http_response.BadRequest
 *     UNAUTHORIZED = declnetwork.http.http_response.Unauthorized
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__NotModified); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__NOT_MODIFIED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":327
 *     MOVED_TEMPORARILY = declnetwork.http.http_response.MovedTemporarily
 *     NOT_MODIFIED = declnetwork.http.http_response.NotModified
 *     BAD_REQUEST = declnetwork.http.http_response.BadRequest             # <<<<<<<<<<<<<<
 *     UNAUTHORIZED = declnetwork.http.http_response.Unauthorized
 *     FORBIDDEN = declnetwork.http.http_response.Forbidden
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__BadRequest); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__BAD_REQUEST, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":328
 *     NOT_MODIFIED = declnetwork.http.http_response.NotModified
 *     BAD_REQUEST = declnetwork.http.http_response.BadRequest
 *     UNAUTHORIZED = declnetwork.http.http_response.Unauthorized             # <<<<<<<<<<<<<<
 *     FORBIDDEN = declnetwork.http.http_response.Forbidden
 *     NOT_FOUND = declnetwork.http.http_response.NotFound
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__Unauthorized); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__UNAUTHORIZED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":329
 *     BAD_REQUEST = declnetwork.http.http_response.BadRequest
 *     UNAUTHORIZED = declnetwork.http.http_response.Unauthorized
 *     FORBIDDEN = declnetwork.http.http_response.Forbidden             # <<<<<<<<<<<<<<
 *     NOT_FOUND = declnetwork.http.http_response.NotFound
 *     RANGE_NOT_SATISFIABLE = declnetwork.http.http_response.RangeNotSatisfiable
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Forbidden); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__FORBIDDEN, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":330
 *     UNAUTHORIZED = declnetwork.http.http_response.Unauthorized
 *     FORBIDDEN = declnetwork.http.http_response.Forbidden
 *     NOT_FOUND = declnetwork.http.http_response.NotFound             # <<<<<<<<<<<<<<
 *     RANGE_NOT_SATISFIABLE = declnetwork.http.http_response.RangeNotSatisfiable
 *     INTERNAL_SERVER_ERROR = declnetwork.http.http_response.InternalServerError
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__NotFound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__NOT_FOUND, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":331
 *     FORBIDDEN = declnetwork.http.http_response.Forbidden
 *     NOT_FOUND = declnetwork.http.http_response.NotFound
 *     RANGE_NOT_SATISFIABLE = declnetwork.http.http_response.RangeNotSatisfiable             # <<<<<<<<<<<<<<
 *     INTERNAL_SERVER_ERROR = declnetwork.http.http_response.InternalServerError
 *     NOT_IMPLEMENTED = declnetwork.http.http_response.NotImplemented
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__RangeNotSatisfiable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s_9, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":332
 *     NOT_FOUND = declnetwork.http.http_response.NotFound
 *     RANGE_NOT_SATISFIABLE = declnetwork.http.http_response.RangeNotSatisfiable
 *     INTERNAL_SERVER_ERROR = declnetwork.http.http_response.InternalServerError             # <<<<<<<<<<<<<<
 *     NOT_IMPLEMENTED = declnetwork.http.http_response.NotImplemented
 *     BAD_GATEWAY = declnetwork.http.http_response.BadGateway
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__InternalServerError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s_10, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":333
 *     RANGE_NOT_SATISFIABLE = declnetwork.http.http_response.RangeNotSatisfiable
 *     INTERNAL_SERVER_ERROR = declnetwork.http.http_response.InternalServerError
 *     NOT_IMPLEMENTED = declnetwork.http.http_response.NotImplemented             # <<<<<<<<<<<<<<
 *     BAD_GATEWAY = declnetwork.http.http_response.BadGateway
 *     SERVICE_NOT_AVAILABLE = declnetwork.http.http_response.ServiceNotAvailable
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__NotImplemented); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__NOT_IMPLEMENTED, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":334
 *     INTERNAL_SERVER_ERROR = declnetwork.http.http_response.InternalServerError
 *     NOT_IMPLEMENTED = declnetwork.http.http_response.NotImplemented
 *     BAD_GATEWAY = declnetwork.http.http_response.BadGateway             # <<<<<<<<<<<<<<
 *     SERVICE_NOT_AVAILABLE = declnetwork.http.http_response.ServiceNotAvailable
 *     GATEWAY_TIMEOUT = declnetwork.http.http_response.GatewayTimeout
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__BadGateway); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__BAD_GATEWAY, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":335
 *     NOT_IMPLEMENTED = declnetwork.http.http_response.NotImplemented
 *     BAD_GATEWAY = declnetwork.http.http_response.BadGateway
 *     SERVICE_NOT_AVAILABLE = declnetwork.http.http_response.ServiceNotAvailable             # <<<<<<<<<<<<<<
 *     GATEWAY_TIMEOUT = declnetwork.http.http_response.GatewayTimeout
 *     VERSION_NOT_SUPPORTED = declnetwork.http.http_response.VersionNotSupported
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ServiceNotAvailable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s_11, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":336
 *     BAD_GATEWAY = declnetwork.http.http_response.BadGateway
 *     SERVICE_NOT_AVAILABLE = declnetwork.http.http_response.ServiceNotAvailable
 *     GATEWAY_TIMEOUT = declnetwork.http.http_response.GatewayTimeout             # <<<<<<<<<<<<<<
 *     VERSION_NOT_SUPPORTED = declnetwork.http.http_response.VersionNotSupported
 *     INVALID_RESPONSE = declnetwork.http.http_response.InvalidResponse
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__GatewayTimeout); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__GATEWAY_TIMEOUT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":337
 *     SERVICE_NOT_AVAILABLE = declnetwork.http.http_response.ServiceNotAvailable
 *     GATEWAY_TIMEOUT = declnetwork.http.http_response.GatewayTimeout
 *     VERSION_NOT_SUPPORTED = declnetwork.http.http_response.VersionNotSupported             # <<<<<<<<<<<<<<
 *     INVALID_RESPONSE = declnetwork.http.http_response.InvalidResponse
 *     CONNECTION_FAILED = declnetwork.http.http_response.ConnectionFailed
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__VersionNotSupported); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s_12, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":338
 *     GATEWAY_TIMEOUT = declnetwork.http.http_response.GatewayTimeout
 *     VERSION_NOT_SUPPORTED = declnetwork.http.http_response.VersionNotSupported
 *     INVALID_RESPONSE = declnetwork.http.http_response.InvalidResponse             # <<<<<<<<<<<<<<
 *     CONNECTION_FAILED = declnetwork.http.http_response.ConnectionFailed
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__InvalidResponse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__INVALID_RESPONSE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":339
 *     VERSION_NOT_SUPPORTED = declnetwork.http.http_response.VersionNotSupported
 *     INVALID_RESPONSE = declnetwork.http.http_response.InvalidResponse
 *     CONNECTION_FAILED = declnetwork.http.http_response.ConnectionFailed             # <<<<<<<<<<<<<<
 * 
 *     cdef declnetwork.http.Response *thisptr
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__declnetwork); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__http); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__http_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ConnectionFailed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4sfml_7network_7network_HttpResponse->tp_dict, __pyx_n_s__CONNECTION_FAILED, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4sfml_7network_7network_HttpResponse);

  /* "sfml/network/network.pyx":1
 * # Copyright 2012, Jonathan De Wachter <dewachter.jonathan@gmail.com>             # <<<<<<<<<<<<<<
 * #
 * # This program is free software: you can redistribute it and/or modify
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init sfml.network.network", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init sfml.network.network");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %"PY_FORMAT_SIZE_T"d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %"PY_FORMAT_SIZE_T"d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif


static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
    /* It appears that PyMethodDescr_Type is not anywhere exposed in the Python/C API */
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = __Pyx_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) { /* cdef classes */
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
    else if (PyMethod_Check(method)) { /* python classes */
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __pyx_binding_PyCFunctionType_USED
    else if (PyObject_TypeCheck(method, __pyx_binding_PyCFunctionType)) { /* binded CFunction */
        return PyClassMethod_New(method);
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "Class-level classmethod() can only be called on "
                 "a method_descriptor or instance method.");
    return NULL;
}

static CYTHON_INLINE sf::Uint8 __Pyx_PyInt_from_py_sf__Uint8(PyObject* x) {
    const sf::Uint8 neg_one = (sf::Uint8)-1, const_zero = (sf::Uint8)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(sf::Uint8) == sizeof(char)) {
        if (is_unsigned)
            return (sf::Uint8)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (sf::Uint8)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(sf::Uint8) == sizeof(short)) {
        if (is_unsigned)
            return (sf::Uint8)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (sf::Uint8)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(sf::Uint8) == sizeof(int)) {
        if (is_unsigned)
            return (sf::Uint8)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (sf::Uint8)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(sf::Uint8) == sizeof(long)) {
        if (is_unsigned)
            return (sf::Uint8)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (sf::Uint8)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(sf::Uint8) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (sf::Uint8)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (sf::Uint8)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        sf::Uint8 val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (sf::Uint8)-1;
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_sf__Uint32(sf::Uint32 val) {
    const sf::Uint32 neg_one = (sf::Uint32)-1, const_zero = (sf::Uint32)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(sf::Uint32) == sizeof(char))  ||
        (sizeof(sf::Uint32) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(sf::Uint32) == sizeof(int)) ||
               (sizeof(sf::Uint32) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(sf::Uint32) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(sf::Uint32),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE sf::Uint32 __Pyx_PyInt_from_py_sf__Uint32(PyObject* x) {
    const sf::Uint32 neg_one = (sf::Uint32)-1, const_zero = (sf::Uint32)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(sf::Uint32) == sizeof(char)) {
        if (is_unsigned)
            return (sf::Uint32)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (sf::Uint32)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(sf::Uint32) == sizeof(short)) {
        if (is_unsigned)
            return (sf::Uint32)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (sf::Uint32)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(sf::Uint32) == sizeof(int)) {
        if (is_unsigned)
            return (sf::Uint32)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (sf::Uint32)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(sf::Uint32) == sizeof(long)) {
        if (is_unsigned)
            return (sf::Uint32)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (sf::Uint32)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(sf::Uint32) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (sf::Uint32)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (sf::Uint32)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        sf::Uint32 val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (sf::Uint32)-1;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
